// Generated by Haxe 4.0.0 (git build development @ 3018ab1)
(function () { "use strict";
function $extend(from, fields) {
	function Inherit() {} Inherit.prototype = from; var proto = new Inherit();
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
var App = function() {
	console.log("App.hx:21:","new Appli");
	var can = window.document.createElement("canvas");
	can.width = 800;
	can.height = 800;
	window.document.body.appendChild(can);
	this.raf = ($_=window,$bind($_,$_.requestAnimationFrame));
	var display = new CanvasRender(can);
	var mock = new MockFlock(null,can);
	display.addRenderable(mock);
	var step = function(timestamp) {
		display.render();
	};
	this.raf(step);
};
App.__name__ = true;
App.main = function() {
	new App();
};
var CanvasRender = function(can) {
	this.map = new haxe_ds_ObjectMap();
	this.canvas = can;
	this.dims = { width : this.canvas.width, height : this.canvas.height};
	this.ctx = can.getContext("2d",null);
	this.ctx.save();
};
CanvasRender.__name__ = true;
CanvasRender.prototype = {
	addRenderable: function(ir) {
		this.map.set(ir,true);
	}
	,clear: function() {
		this.ctx.clearRect(0,0,this.canvas.width,this.canvas.height);
	}
	,render: function() {
		this.clear();
		var renderable = this.map.keys();
		while(renderable.hasNext()) {
			var renderable1 = renderable.next();
			if(renderable1.enabled) {
				renderable1.render(this);
			}
		}
	}
};
var IRenderable = function() { };
IRenderable.__name__ = true;
var postite_geom__$CoolPoint_Points_$Impl_$ = {};
postite_geom__$CoolPoint_Points_$Impl_$.__name__ = true;
postite_geom__$CoolPoint_Points_$Impl_$.fromArrayInt = function(a) {
	return a;
};
var Coords = function() { };
Coords.__name__ = true;
var Dro = function() {
};
Dro.__name__ = true;
Dro.droPoint = function(ctx,_point,col,opacity) {
	if(opacity == null) {
		opacity = 1.0;
	}
	if(col == null) {
		col = "201, 185, 101";
	}
	ctx.beginPath();
	ctx.arc(_point.x,_point.y,_point.press / 2,0,2 * Math.PI,true);
	ctx.fillStyle = "rgba(" + col + ", " + (opacity == null ? "null" : "" + opacity) + ")";
	ctx.fill();
};
Dro.drawPoly = function(ctx,poly,col) {
	if(col == null) {
		col = "#000";
	}
	var p0 = poly[0];
	ctx.strokeStyle = col;
	ctx.moveTo(p0.x / 1,p0.y / 1);
	var _g1 = 1;
	var _g = poly.length;
	while(_g1 < _g) {
		var p = poly[_g1++];
		ctx.lineTo(p.x / 1,p.y / 1);
	}
	ctx.lineTo(p0.x / 1,p0.y / 1);
	ctx.stroke();
	ctx.lineWidth = 1;
	ctx.strokeStyle = "#000";
};
Dro.droSegments = function(ctx,segments,col,fillColor,opacity) {
	if(opacity == null) {
		opacity = 1.0;
	}
	if(col == null) {
		col = "#000";
	}
	ctx.strokeStyle = col;
	ctx.lineWidth = 3;
	var _g = 0;
	while(_g < segments.length) {
		var segment = segments[_g];
		++_g;
		ctx.moveTo(segment.x,segment.y);
		ctx.lineTo(segment.dx + segment.x,segment.dy + segment.y);
	}
	ctx.stroke();
};
Dro.droRect = function(ctx,rect) {
	ctx.strokeRect(rect.x,rect.y,rect.width,rect.height);
	ctx.stroke();
};
Dro.droPaths = function(ctx,paths,col) {
	if(col == null) {
		col = "#000";
	}
	ctx.strokeStyle = col;
	ctx.lineWidth = 5;
	var _g = 0;
	while(_g < paths.length) {
		var path = paths[_g];
		++_g;
		ctx.moveTo(path[0].x,path[0].y);
		var _g1 = 0;
		while(_g1 < path.length) {
			var point = path[_g1];
			++_g1;
			ctx.lineTo(point.x,point.y);
		}
		ctx.lineTo(path[0].x,path[0].y);
	}
	ctx.stroke();
};
var Hit = function() {
	this.inited = false;
};
Hit.__name__ = true;
Hit.get_instance = function() {
	if(Hit._inst == null) {
		Hit._inst = new Hit();
	}
	return Hit._inst;
};
Hit.prototype = {
	init: function(el) {
		var _gthis = this;
		this.el = el;
		var trig = tink_core__$Signal_Signal_$Impl_$.trigger();
		this.outTrig = tink_core__$Signal_Signal_$Impl_$.trigger();
		el.addEventListener("click",function(e) {
			_gthis.mousePoint = postite_geom__$CoolPoint_CoolPoint_$Impl_$.fromAnon({ x : e.clientX, y : e.clientY});
			tink_core__$Callback_CallbackList_$Impl_$.invoke(trig.handlers,_gthis.mousePoint);
		});
		this.clickSign = trig;
		this.pointSign = this.outTrig;
		this.inited = true;
	}
	,observe: function(point) {
		var _gthis = this;
		if(!this.inited) {
			throw new js__$Boot_HaxeError("not inited");
		}
		this.clickSign.handle(function(mouse) {
			if(_gthis.isIntersect(_gthis.mousePoint,point)) {
				tink_core__$Callback_CallbackList_$Impl_$.invoke(_gthis.outTrig.handlers,point);
			}
		});
	}
	,isIntersect: function(point,circle) {
		return Math.sqrt(Math.pow(point.x - circle.x,2) + Math.pow(point.y - circle.y,2)) < circle.press * 2;
	}
	,clear: function() {
		var _gthis = this;
		this.el.removeEventListener("click",function(e) {
			_gthis.mousePoint = postite_geom__$CoolPoint_CoolPoint_$Impl_$.fromAnon({ x : e.clientX, y : e.clientY});
		});
	}
};
var HxOverrides = function() { };
HxOverrides.__name__ = true;
HxOverrides.strDate = function(s) {
	switch(s.length) {
	case 8:
		var k = s.split(":");
		var d = new Date();
		d["setTime"](0);
		d["setUTCHours"](k[0]);
		d["setUTCMinutes"](k[1]);
		d["setUTCSeconds"](k[2]);
		return d;
	case 10:
		var k1 = s.split("-");
		return new Date(k1[0],k1[1] - 1,k1[2],0,0,0);
	case 19:
		var k2 = s.split(" ");
		var y = k2[0].split("-");
		var t = k2[1].split(":");
		return new Date(y[0],y[1] - 1,y[2],t[0],t[1],t[2]);
	default:
		throw new js__$Boot_HaxeError("Invalid date format : " + s);
	}
};
HxOverrides.remove = function(a,obj) {
	var i = a.indexOf(obj);
	if(i == -1) {
		return false;
	}
	a.splice(i,1);
	return true;
};
HxOverrides.iter = function(a) {
	return { cur : 0, arr : a, hasNext : function() {
		return this.cur < this.arr.length;
	}, next : function() {
		return this.arr[this.cur++];
	}};
};
var Main = function() { };
Main.__name__ = true;
Main.main = function() {
	console.log("Main.hx:3:","Hello, world!");
	new App();
};
Math.__name__ = true;
var MockFlock = function(dims,can) {
	this.enabled = true;
	this.can = can;
	this.init();
};
MockFlock.__name__ = true;
MockFlock.__interfaces__ = [IRenderable];
MockFlock.prototype = {
	init: function() {
		var _gthis = this;
		var _g = [];
		var _g1 = 0;
		while(_g1 < 100) {
			++_g1;
			_g.push({ x : Std.random(600) * 1.0, y : Std.random(300) + 100.0, press : 10.0});
		}
		MockFlock.coolPoints = _g;
		this.listen = Hit.get_instance();
		this.listen.init(this.can);
		this.listen.clickSign.handle(function(mouse) {
			console.log("MockFlock.hx:38:","inside rect " + Std.string(postite_geom_GeomFilters.isInsideRect(postite_geom__$CoolPoint_CoolPoint_$Impl_$.toPoint(mouse),_gthis.rect)));
			console.log("MockFlock.hx:45:","pulo=" + Std.string(postite_geom__$PolyGon_Polygon_$Impl_$.contains(_gthis.hullPol,postite_geom__$CoolPoint_CoolPoint_$Impl_$.toPoint(mouse),true)));
			return;
		});
		this.listen.pointSign.handle(function(cpoint) {
			console.log("MockFlock.hx:48:","oui ma point " + Std.string(cpoint));
			return;
		});
		var _g11 = 0;
		var _g2 = MockFlock.coolPoints;
		while(_g11 < _g2.length) this.listen.observe(_g2[_g11++]);
		this.update();
	}
	,update: function() {
		MockFlock.coolPoints = MockFlock.coolPoints.map(function(cp) {
			return { x : cp.x + postite_geom_Calc.getRandomInt(-5,5), y : cp.y + postite_geom_Calc.getRandomInt(-5,5), press : cp.press};
		});
		MockFlock.points = MockFlock.coolPoints.map(function(cp1) {
			return postite_geom__$CoolPoint_CoolPoint_$Impl_$.toPoint(cp1);
		});
		this.rect = postite_geom_GeomFilters.boundRectForPoly(MockFlock.points);
		this.hullPol = postite_geom__$PolyGon_Polygon_$Impl_$.convexHull(MockFlock.points);
	}
	,render: function(_render) {
		if(MockFlock.offseting) {
			var offset = postite_geom_GeomFilters.clipOff(this.hullPol,30);
			Dro.droPaths(_render.ctx,offset,"#cc3300");
		}
		if(MockFlock.bounding) {
			Dro.droRect(_render.ctx,this.rect);
		}
		var pathPoints = Coords.path.map(function(a) {
			return { x : a.x * 1.0, y : a.y * 1.0};
		});
		var sim1 = postite_geom_GeomFilters.isClosed(pathPoints);
		Dro.drawPoly(_render.ctx,pathPoints);
		console.log("MockFlock.hx:94:",sim1);
		if(sim1 != null) {
			Dro.droPoint(_render.ctx,postite_geom__$CoolPoint_CoolPoint_$Impl_$._new(sim1.x,sim1.y,10),"#00AAFF");
		}
		var closed = Coords.closed.map(function(a1) {
			return { x : a1.x * 1.0, y : a1.y * 1.0};
		});
		var sim = postite_geom__$CoolPoint_Point_$Impl_$.toPress(postite_geom_GeomFilters.isClosed(closed));
		Dro.drawPoly(_render.ctx,closed);
		Dro.droPoint(_render.ctx,postite_geom__$CoolPoint_CoolPoint_$Impl_$._new(sim.x,sim.y,10),"#00AAFF");
		_render.clear();
		var con = postite_geom__$CoolPoint_Points_$Impl_$.fromArrayInt([{ x : 100, y : 200},{ x : 600, y : 400},{ x : 300, y : 500},{ x : 400, y : 700}]);
		Dro.drawPoly(_render.ctx,con);
		var tra = postite_geom_Geste.TranslateTo(con,postite_geom__$CoolPoint_Point_$Impl_$.fromAnonInt({ x : 400, y : 200}));
		Dro.drawPoly(_render.ctx,tra,"#00aaff");
		var centr = postite_geom_Geste.Centroid(tra);
		Dro.droPoint(_render.ctx,postite_geom__$CoolPoint_Point_$Impl_$.toPress(centr));
		var centro = postite_geom_Geste.Centroid(con);
		Dro.droPoint(_render.ctx,postite_geom__$CoolPoint_Point_$Impl_$.toPress(centro));
		Dro.droPoint(_render.ctx,{ x : 400, y : 200, press : 10},"198, 88, 29");
	}
};
var Std = function() { };
Std.__name__ = true;
Std.string = function(s) {
	return js_Boot.__string_rec(s,"");
};
Std.random = function(x) {
	if(x <= 0) {
		return 0;
	} else {
		return Math.floor(Math.random() * x);
	}
};
var haxe_StackItem = { __ename__ : true, __constructs__ : ["CFunction","Module","FilePos","Method","LocalFunction"] };
haxe_StackItem.CFunction = ["CFunction",0];
haxe_StackItem.CFunction.__enum__ = haxe_StackItem;
haxe_StackItem.Module = function(m) { var $x = ["Module",1,m]; $x.__enum__ = haxe_StackItem; return $x; };
haxe_StackItem.FilePos = function(s,file,line,column) { var $x = ["FilePos",2,s,file,line,column]; $x.__enum__ = haxe_StackItem; return $x; };
haxe_StackItem.Method = function(classname,method) { var $x = ["Method",3,classname,method]; $x.__enum__ = haxe_StackItem; return $x; };
haxe_StackItem.LocalFunction = function(v) { var $x = ["LocalFunction",4,v]; $x.__enum__ = haxe_StackItem; return $x; };
var haxe_IMap = function() { };
haxe_IMap.__name__ = true;
var haxe_Timer = function(time_ms) {
	var me = this;
	this.id = setInterval(function() {
		me.run();
	},time_ms);
};
haxe_Timer.__name__ = true;
haxe_Timer.delay = function(f,time_ms) {
	var t = new haxe_Timer(time_ms);
	t.run = function() {
		t.stop();
		f();
	};
	return t;
};
haxe_Timer.prototype = {
	stop: function() {
		if(this.id == null) {
			return;
		}
		clearInterval(this.id);
		this.id = null;
	}
	,run: function() {
	}
};
var haxe_ds_ArraySort = function() { };
haxe_ds_ArraySort.__name__ = true;
haxe_ds_ArraySort.sort = function(a,cmp) {
	haxe_ds_ArraySort.rec(a,cmp,0,a.length);
};
haxe_ds_ArraySort.rec = function(a,cmp,from,to) {
	var middle = from + to >> 1;
	if(to - from < 12) {
		if(to <= from) {
			return;
		}
		var _g1 = from + 1;
		while(_g1 < to) {
			var j = _g1++;
			while(j > from) {
				if(cmp(a[j],a[j - 1]) < 0) {
					haxe_ds_ArraySort.swap(a,j - 1,j);
				} else {
					break;
				}
				--j;
			}
		}
		return;
	}
	haxe_ds_ArraySort.rec(a,cmp,from,middle);
	haxe_ds_ArraySort.rec(a,cmp,middle,to);
	haxe_ds_ArraySort.doMerge(a,cmp,from,middle,to,middle - from,to - middle);
};
haxe_ds_ArraySort.doMerge = function(a,cmp,from,pivot,to,len1,len2) {
	var first_cut;
	var second_cut;
	var len11;
	var len22;
	if(len1 == 0 || len2 == 0) {
		return;
	}
	if(len1 + len2 == 2) {
		if(cmp(a[pivot],a[from]) < 0) {
			haxe_ds_ArraySort.swap(a,pivot,from);
		}
		return;
	}
	if(len1 > len2) {
		len11 = len1 >> 1;
		first_cut = from + len11;
		second_cut = haxe_ds_ArraySort.lower(a,cmp,pivot,to,first_cut);
		len22 = second_cut - pivot;
	} else {
		len22 = len2 >> 1;
		second_cut = pivot + len22;
		first_cut = haxe_ds_ArraySort.upper(a,cmp,from,pivot,second_cut);
		len11 = first_cut - from;
	}
	haxe_ds_ArraySort.rotate(a,cmp,first_cut,pivot,second_cut);
	var new_mid = first_cut + len22;
	haxe_ds_ArraySort.doMerge(a,cmp,from,first_cut,new_mid,len11,len22);
	haxe_ds_ArraySort.doMerge(a,cmp,new_mid,second_cut,to,len1 - len11,len2 - len22);
};
haxe_ds_ArraySort.rotate = function(a,cmp,from,mid,to) {
	if(from == mid || mid == to) {
		return;
	}
	var n = haxe_ds_ArraySort.gcd(to - from,mid - from);
	while(n-- != 0) {
		var val = a[from + n];
		var shift = mid - from;
		var p1 = from + n;
		var p2 = from + n + shift;
		while(p2 != from + n) {
			a[p1] = a[p2];
			p1 = p2;
			if(to - p2 > shift) {
				p2 += shift;
			} else {
				p2 = from + (shift - (to - p2));
			}
		}
		a[p1] = val;
	}
};
haxe_ds_ArraySort.gcd = function(m,n) {
	while(n != 0) {
		var t = m % n;
		m = n;
		n = t;
	}
	return m;
};
haxe_ds_ArraySort.upper = function(a,cmp,from,to,val) {
	var len = to - from;
	var half;
	var mid;
	while(len > 0) {
		half = len >> 1;
		mid = from + half;
		if(cmp(a[val],a[mid]) < 0) {
			len = half;
		} else {
			from = mid + 1;
			len = len - half - 1;
		}
	}
	return from;
};
haxe_ds_ArraySort.lower = function(a,cmp,from,to,val) {
	var len = to - from;
	var half;
	var mid;
	while(len > 0) {
		half = len >> 1;
		mid = from + half;
		if(cmp(a[mid],a[val]) < 0) {
			from = mid + 1;
			len = len - half - 1;
		} else {
			len = half;
		}
	}
	return from;
};
haxe_ds_ArraySort.swap = function(a,i,j) {
	var tmp = a[i];
	a[i] = a[j];
	a[j] = tmp;
};
var haxe_ds_Either = { __ename__ : true, __constructs__ : ["Left","Right"] };
haxe_ds_Either.Left = function(v) { var $x = ["Left",0,v]; $x.__enum__ = haxe_ds_Either; return $x; };
haxe_ds_Either.Right = function(v) { var $x = ["Right",1,v]; $x.__enum__ = haxe_ds_Either; return $x; };
var haxe_ds_ObjectMap = function() {
	this.h = { __keys__ : { }};
};
haxe_ds_ObjectMap.__name__ = true;
haxe_ds_ObjectMap.__interfaces__ = [haxe_IMap];
haxe_ds_ObjectMap.prototype = {
	set: function(key,value) {
		var id = key.__id__ || (key.__id__ = ++haxe_ds_ObjectMap.count);
		this.h[id] = value;
		this.h.__keys__[id] = key;
	}
	,keys: function() {
		var a = [];
		for( var key in this.h.__keys__ ) {
		if(this.h.hasOwnProperty(key)) {
			a.push(this.h.__keys__[key]);
		}
		}
		return HxOverrides.iter(a);
	}
};
var haxe_ds_Option = { __ename__ : true, __constructs__ : ["Some","None"] };
haxe_ds_Option.Some = function(v) { var $x = ["Some",0,v]; $x.__enum__ = haxe_ds_Option; return $x; };
haxe_ds_Option.None = ["None",1];
haxe_ds_Option.None.__enum__ = haxe_ds_Option;
var haxe_ds_StringMap = function() {
	this.h = { };
};
haxe_ds_StringMap.__name__ = true;
haxe_ds_StringMap.__interfaces__ = [haxe_IMap];
haxe_ds_StringMap.prototype = {
	setReserved: function(key,value) {
		if(this.rh == null) {
			this.rh = { };
		}
		this.rh["$" + key] = value;
	}
	,getReserved: function(key) {
		if(this.rh == null) {
			return null;
		} else {
			return this.rh["$" + key];
		}
	}
	,keys: function() {
		return HxOverrides.iter(this.arrayKeys());
	}
	,arrayKeys: function() {
		var out = [];
		for( var key in this.h ) {
		if(this.h.hasOwnProperty(key)) {
			out.push(key);
		}
		}
		if(this.rh != null) {
			for( var key in this.rh ) {
			if(key.charCodeAt(0) == 36) {
				out.push(key.substr(1));
			}
			}
		}
		return out;
	}
};
var hxClipper_DoublePoint = function(x,y) {
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	this.x = x;
	this.y = y;
};
hxClipper_DoublePoint.__name__ = true;
hxClipper_DoublePoint.fromDoublePoint = function(dp) {
	return dp.clone();
};
hxClipper_DoublePoint.fromIntPoint = function(ip) {
	return new hxClipper_DoublePoint(ip.x,ip.y);
};
hxClipper_DoublePoint.prototype = {
	clone: function() {
		return new hxClipper_DoublePoint(this.x,this.y);
	}
	,toString: function() {
		return "(x:" + this.x + ", y:" + this.y + ")";
	}
};
var hxClipper_PolyNode = function() {
	this.mChildren = [];
	this.mPolygon = [];
};
hxClipper_PolyNode.__name__ = true;
hxClipper_PolyNode.prototype = {
	isHoleNode: function() {
		var result = true;
		var node = this.mParent;
		while(node != null) {
			result = !result;
			node = node.mParent;
		}
		return result;
	}
	,get_numChildren: function() {
		return this.mChildren.length;
	}
	,get_contour: function() {
		return this.mPolygon;
	}
	,addChild: function(child) {
		var cnt = this.mChildren.length;
		this.mChildren.push(child);
		child.mParent = this;
		child.mIndex = cnt;
	}
	,getNext: function() {
		if(this.mChildren.length > 0) {
			return this.mChildren[0];
		} else {
			return this.getNextSiblingUp();
		}
	}
	,getNextSiblingUp: function() {
		if(this.mParent == null) {
			return null;
		} else if(this.mIndex == this.mParent.mChildren.length - 1) {
			return this.mParent.getNextSiblingUp();
		} else {
			return this.mParent.mChildren[this.mIndex + 1];
		}
	}
	,get_children: function() {
		return this.mChildren;
	}
	,get_parent: function() {
		return this.mParent;
	}
	,get_isHole: function() {
		return this.isHoleNode();
	}
};
var hxClipper_PolyTree = function() {
	this.mAllPolys = [];
	hxClipper_PolyNode.call(this);
};
hxClipper_PolyTree.__name__ = true;
hxClipper_PolyTree.__super__ = hxClipper_PolyNode;
hxClipper_PolyTree.prototype = $extend(hxClipper_PolyNode.prototype,{
	clear: function() {
		var _g1 = 0;
		var _g = this.mAllPolys.length;
		while(_g1 < _g) this.mAllPolys[_g1++] = null;
		this.mAllPolys.length = 0;
		this.mChildren.length = 0;
	}
	,getFirst: function() {
		if(this.mChildren.length > 0) {
			return this.mChildren[0];
		} else {
			return null;
		}
	}
	,get_total: function() {
		var result = this.mAllPolys.length;
		if(result > 0 && this.mChildren[0] != this.mAllPolys[0]) {
			--result;
		}
		return result;
	}
});
var hxClipper_IntPoint = function(x,y) {
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	this.x = x;
	this.y = y;
};
hxClipper_IntPoint.__name__ = true;
hxClipper_IntPoint.fromFloats = function(x,y) {
	return new hxClipper_IntPoint(x | 0,y | 0);
};
hxClipper_IntPoint.fromDoublePoint = function(dp) {
	return hxClipper_IntPoint.fromFloats(dp.x,dp.y);
};
hxClipper_IntPoint.fromIntPoint = function(pt) {
	return pt.clone();
};
hxClipper_IntPoint.prototype = {
	clone: function() {
		return new hxClipper_IntPoint(this.x,this.y);
	}
	,toString: function() {
		return "(x:" + this.x + ", y:" + this.y + ")";
	}
	,copyFrom: function(ip) {
		this.x = ip.x;
		this.y = ip.y;
	}
	,equals: function(ip) {
		if(this.x == ip.x) {
			return this.y == ip.y;
		} else {
			return false;
		}
	}
};
var hxClipper_IntRect = function(l,t,r,b) {
	this.left = l;
	this.top = t;
	this.right = r;
	this.bottom = b;
};
hxClipper_IntRect.__name__ = true;
hxClipper_IntRect.prototype = {
	clone: function(ir) {
		return new hxClipper_IntRect(this.left,this.top,this.right,this.bottom);
	}
};
var hxClipper_ClipType = { __ename__ : true, __constructs__ : ["CT_INTERSECTION","CT_UNION","CT_DIFFERENCE","CT_XOR"] };
hxClipper_ClipType.CT_INTERSECTION = ["CT_INTERSECTION",0];
hxClipper_ClipType.CT_INTERSECTION.__enum__ = hxClipper_ClipType;
hxClipper_ClipType.CT_UNION = ["CT_UNION",1];
hxClipper_ClipType.CT_UNION.__enum__ = hxClipper_ClipType;
hxClipper_ClipType.CT_DIFFERENCE = ["CT_DIFFERENCE",2];
hxClipper_ClipType.CT_DIFFERENCE.__enum__ = hxClipper_ClipType;
hxClipper_ClipType.CT_XOR = ["CT_XOR",3];
hxClipper_ClipType.CT_XOR.__enum__ = hxClipper_ClipType;
var hxClipper_PolyType = { __ename__ : true, __constructs__ : ["PT_SUBJECT","PT_CLIP"] };
hxClipper_PolyType.PT_SUBJECT = ["PT_SUBJECT",0];
hxClipper_PolyType.PT_SUBJECT.__enum__ = hxClipper_PolyType;
hxClipper_PolyType.PT_CLIP = ["PT_CLIP",1];
hxClipper_PolyType.PT_CLIP.__enum__ = hxClipper_PolyType;
var hxClipper_PolyFillType = { __ename__ : true, __constructs__ : ["PFT_EVEN_ODD","PFT_NON_ZERO","PFT_POSITIVE","PFT_NEGATIVE"] };
hxClipper_PolyFillType.PFT_EVEN_ODD = ["PFT_EVEN_ODD",0];
hxClipper_PolyFillType.PFT_EVEN_ODD.__enum__ = hxClipper_PolyFillType;
hxClipper_PolyFillType.PFT_NON_ZERO = ["PFT_NON_ZERO",1];
hxClipper_PolyFillType.PFT_NON_ZERO.__enum__ = hxClipper_PolyFillType;
hxClipper_PolyFillType.PFT_POSITIVE = ["PFT_POSITIVE",2];
hxClipper_PolyFillType.PFT_POSITIVE.__enum__ = hxClipper_PolyFillType;
hxClipper_PolyFillType.PFT_NEGATIVE = ["PFT_NEGATIVE",3];
hxClipper_PolyFillType.PFT_NEGATIVE.__enum__ = hxClipper_PolyFillType;
var hxClipper_JoinType = { __ename__ : true, __constructs__ : ["JT_SQUARE","JT_ROUND","JT_MITER"] };
hxClipper_JoinType.JT_SQUARE = ["JT_SQUARE",0];
hxClipper_JoinType.JT_SQUARE.__enum__ = hxClipper_JoinType;
hxClipper_JoinType.JT_ROUND = ["JT_ROUND",1];
hxClipper_JoinType.JT_ROUND.__enum__ = hxClipper_JoinType;
hxClipper_JoinType.JT_MITER = ["JT_MITER",2];
hxClipper_JoinType.JT_MITER.__enum__ = hxClipper_JoinType;
var hxClipper_EndType = { __ename__ : true, __constructs__ : ["ET_CLOSED_POLYGON","ET_CLOSED_LINE","ET_OPEN_BUTT","ET_OPEN_SQUARE","ET_OPEN_ROUND"] };
hxClipper_EndType.ET_CLOSED_POLYGON = ["ET_CLOSED_POLYGON",0];
hxClipper_EndType.ET_CLOSED_POLYGON.__enum__ = hxClipper_EndType;
hxClipper_EndType.ET_CLOSED_LINE = ["ET_CLOSED_LINE",1];
hxClipper_EndType.ET_CLOSED_LINE.__enum__ = hxClipper_EndType;
hxClipper_EndType.ET_OPEN_BUTT = ["ET_OPEN_BUTT",2];
hxClipper_EndType.ET_OPEN_BUTT.__enum__ = hxClipper_EndType;
hxClipper_EndType.ET_OPEN_SQUARE = ["ET_OPEN_SQUARE",3];
hxClipper_EndType.ET_OPEN_SQUARE.__enum__ = hxClipper_EndType;
hxClipper_EndType.ET_OPEN_ROUND = ["ET_OPEN_ROUND",4];
hxClipper_EndType.ET_OPEN_ROUND.__enum__ = hxClipper_EndType;
var hxClipper__$Clipper_EdgeSide = { __ename__ : true, __constructs__ : ["ES_LEFT","ES_RIGHT"] };
hxClipper__$Clipper_EdgeSide.ES_LEFT = ["ES_LEFT",0];
hxClipper__$Clipper_EdgeSide.ES_LEFT.__enum__ = hxClipper__$Clipper_EdgeSide;
hxClipper__$Clipper_EdgeSide.ES_RIGHT = ["ES_RIGHT",1];
hxClipper__$Clipper_EdgeSide.ES_RIGHT.__enum__ = hxClipper__$Clipper_EdgeSide;
var hxClipper__$Clipper_Direction = { __ename__ : true, __constructs__ : ["D_RIGHT_TO_LEFT","D_LEFT_TO_RIGHT"] };
hxClipper__$Clipper_Direction.D_RIGHT_TO_LEFT = ["D_RIGHT_TO_LEFT",0];
hxClipper__$Clipper_Direction.D_RIGHT_TO_LEFT.__enum__ = hxClipper__$Clipper_Direction;
hxClipper__$Clipper_Direction.D_LEFT_TO_RIGHT = ["D_LEFT_TO_RIGHT",1];
hxClipper__$Clipper_Direction.D_LEFT_TO_RIGHT.__enum__ = hxClipper__$Clipper_Direction;
var hxClipper__$Clipper_NodeType = { __ename__ : true, __constructs__ : ["NT_ANY","NT_OPEN","NT_CLOSED"] };
hxClipper__$Clipper_NodeType.NT_ANY = ["NT_ANY",0];
hxClipper__$Clipper_NodeType.NT_ANY.__enum__ = hxClipper__$Clipper_NodeType;
hxClipper__$Clipper_NodeType.NT_OPEN = ["NT_OPEN",1];
hxClipper__$Clipper_NodeType.NT_OPEN.__enum__ = hxClipper__$Clipper_NodeType;
hxClipper__$Clipper_NodeType.NT_CLOSED = ["NT_CLOSED",2];
hxClipper__$Clipper_NodeType.NT_CLOSED.__enum__ = hxClipper__$Clipper_NodeType;
var hxClipper__$Clipper_TEdge = function() {
	this.delta = new hxClipper_IntPoint();
	this.top = new hxClipper_IntPoint();
	this.curr = new hxClipper_IntPoint();
	this.bot = new hxClipper_IntPoint();
};
hxClipper__$Clipper_TEdge.__name__ = true;
hxClipper__$Clipper_TEdge.prototype = {
	toString: function() {
		return "TE(curr:" + this.curr.toString() + ", bot:" + this.bot.toString() + ", top:" + this.top.toString() + ", dx:" + this.dx + ")";
	}
};
var hxClipper_IntersectNode = function() {
	this.pt = new hxClipper_IntPoint();
};
hxClipper_IntersectNode.__name__ = true;
var hxClipper__$Clipper_LocalMinima = function() {
};
hxClipper__$Clipper_LocalMinima.__name__ = true;
var hxClipper__$Clipper_Scanbeam = function() {
};
hxClipper__$Clipper_Scanbeam.__name__ = true;
var hxClipper__$Clipper_Maxima = function() {
};
hxClipper__$Clipper_Maxima.__name__ = true;
var hxClipper__$Clipper_OutRec = function() {
};
hxClipper__$Clipper_OutRec.__name__ = true;
var hxClipper__$Clipper_OutPt = function() {
	this.pt = new hxClipper_IntPoint();
};
hxClipper__$Clipper_OutPt.__name__ = true;
var hxClipper__$Clipper_Join = function() {
	this.offPt = new hxClipper_IntPoint();
};
hxClipper__$Clipper_Join.__name__ = true;
var hxClipper_ClipperBase = function() {
	this.mEdges = [];
	this.mMinimaList = null;
	this.mCurrentLM = null;
	this.mUseFullRange = false;
	this.mHasOpenPaths = false;
};
hxClipper_ClipperBase.__name__ = true;
hxClipper_ClipperBase.nearZero = function(val) {
	if(val > -1e-20) {
		return val < 1.0E-20;
	} else {
		return false;
	}
};
hxClipper_ClipperBase.isHorizontal = function(e) {
	return e.delta.y == 0;
};
hxClipper_ClipperBase.slopesEqual = function(e1,e2,useFullRange) {
	return e1.delta.y * e2.delta.x == e1.delta.x * e2.delta.y;
};
hxClipper_ClipperBase.slopesEqual3 = function(pt1,pt2,pt3,useFullRange) {
	return (pt1.y - pt2.y) * (pt2.x - pt3.x) - (pt1.x - pt2.x) * (pt2.y - pt3.y) == 0;
};
hxClipper_ClipperBase.slopesEqual4 = function(pt1,pt2,pt3,pt4,useFullRange) {
	return (pt1.y - pt2.y) * (pt3.x - pt4.x) - (pt1.x - pt2.x) * (pt3.y - pt4.y) == 0;
};
hxClipper_ClipperBase.getBounds = function(paths) {
	var i = 0;
	var cnt = paths.length;
	while(i < cnt && paths[i].length == 0) ++i;
	if(i == cnt) {
		return new hxClipper_IntRect(0,0,0,0);
	}
	var result = new hxClipper_IntRect(0,0,0,0);
	result.left = paths[i][0].x;
	result.right = result.left;
	result.top = paths[i][0].y;
	result.bottom = result.top;
	while(i < cnt) {
		var _g1 = 0;
		var _g = paths[i].length;
		while(_g1 < _g) {
			var j = _g1++;
			if(paths[i][j].x < result.left) {
				result.left = paths[i][j].x;
			} else if(paths[i][j].x > result.right) {
				result.right = paths[i][j].x;
			}
			if(paths[i][j].y < result.top) {
				result.top = paths[i][j].y;
			} else if(paths[i][j].y > result.bottom) {
				result.bottom = paths[i][j].y;
			}
		}
		++i;
	}
	return result;
};
hxClipper_ClipperBase.prototype = {
	pointIsVertex: function(pt,pp) {
		var pp2 = pp;
		while(true) {
			if(pp2.pt.equals(pt)) {
				return true;
			}
			pp2 = pp2.next;
			if(!(pp2 != pp)) {
				break;
			}
		}
		return false;
	}
	,pointOnLineSegment: function(pt,linePt1,linePt2,useFullRange) {
		if(!(pt.x == linePt1.x && pt.y == linePt1.y || pt.x == linePt2.x && pt.y == linePt2.y)) {
			if(pt.x > linePt1.x == pt.x < linePt2.x && pt.y > linePt1.y == pt.y < linePt2.y) {
				return (pt.x - linePt1.x) * (linePt2.y - linePt1.y) == (linePt2.x - linePt1.x) * (pt.y - linePt1.y);
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,pointOnPolygon: function(pt,pp,useFullRange) {
		var pp2 = pp;
		while(true) {
			if(this.pointOnLineSegment(pt,pp2.pt,pp2.next.pt,useFullRange)) {
				return true;
			}
			pp2 = pp2.next;
			if(pp2 == pp) {
				break;
			}
		}
		return false;
	}
	,clear: function() {
		this.disposeLocalMinimaList();
		var _g1 = 0;
		var _g = this.mEdges.length;
		while(_g1 < _g) {
			var i = _g1++;
			var _g3 = 0;
			var _g2 = this.mEdges[i].length;
			while(_g3 < _g2) this.mEdges[i][_g3++] = null;
			this.mEdges[i].length = 0;
		}
		this.mEdges.length = 0;
		this.mUseFullRange = false;
		this.mHasOpenPaths = false;
	}
	,disposeLocalMinimaList: function() {
		while(this.mMinimaList != null) {
			var tmpLm = this.mMinimaList.next;
			this.mMinimaList = null;
			this.mMinimaList = tmpLm;
		}
		this.mCurrentLM = null;
	}
	,rangeTest: function(pt,useFullRange) {
		if(useFullRange) {
			if(pt.x > 32767 || pt.y > 32767 || -pt.x > 32767 || -pt.y > 32767) {
				throw new js__$Boot_HaxeError(new hxClipper_ClipperException("Coordinate outside allowed range"));
			}
		} else if(pt.x > 32767 || pt.y > 32767 || -pt.x > 32767 || -pt.y > 32767) {
			useFullRange = true;
			this.rangeTest(pt,true);
		}
		return useFullRange;
	}
	,initEdge: function(e,eNext,ePrev,pt) {
		e.next = eNext;
		e.prev = ePrev;
		e.curr.copyFrom(pt);
		e.outIdx = -1;
	}
	,initEdge2: function(e,polyType) {
		if(e.curr.y >= e.next.curr.y) {
			e.bot.copyFrom(e.curr);
			e.top.copyFrom(e.next.curr);
		} else {
			e.top.copyFrom(e.curr);
			e.bot.copyFrom(e.next.curr);
		}
		this.setDx(e);
		e.polyType = polyType;
	}
	,findNextLocMin: function(e) {
		var e2;
		while(true) {
			while(!e.bot.equals(e.prev.bot) || e.curr.equals(e.top)) e = e.next;
			if(e.dx != -3.4E+38 && e.prev.dx != -3.4E+38) {
				break;
			}
			while(e.prev.dx == -3.4E+38) e = e.prev;
			e2 = e;
			while(e.dx == -3.4E+38) e = e.next;
			if(e.top.y == e.prev.bot.y) {
				continue;
			}
			if(e2.prev.bot.x < e.bot.x) {
				e = e2;
			}
			break;
		}
		return e;
	}
	,processBound: function(e,leftBoundIsForward) {
		var eStart;
		var result = e;
		var horz;
		if(result.outIdx == -2) {
			e = result;
			if(leftBoundIsForward) {
				while(e.top.y == e.next.bot.y) e = e.next;
				while(e != result && e.dx == -3.4E+38) e = e.prev;
			} else {
				while(e.top.y == e.prev.bot.y) e = e.prev;
				while(e != result && e.dx == -3.4E+38) e = e.next;
			}
			if(e == result) {
				if(leftBoundIsForward) {
					result = e.next;
				} else {
					result = e.prev;
				}
			} else {
				if(leftBoundIsForward) {
					e = result.next;
				} else {
					e = result.prev;
				}
				var locMin = new hxClipper__$Clipper_LocalMinima();
				locMin.next = null;
				locMin.y = e.bot.y;
				locMin.leftBound = null;
				locMin.rightBound = e;
				e.windDelta = 0;
				result = this.processBound(e,leftBoundIsForward);
				this.insertLocalMinima(locMin);
			}
			return result;
		}
		if(e.dx == -3.4E+38) {
			if(leftBoundIsForward) {
				eStart = e.prev;
			} else {
				eStart = e.next;
			}
			if(eStart.dx == -3.4E+38) {
				if(eStart.bot.x != e.bot.x && eStart.top.x != e.bot.x) {
					this.reverseHorizontal(e);
				}
			} else if(eStart.bot.x != e.bot.x) {
				this.reverseHorizontal(e);
			}
		}
		eStart = e;
		if(leftBoundIsForward) {
			while(result.top.y == result.next.bot.y && result.next.outIdx != -2) result = result.next;
			if(result.dx == -3.4E+38 && result.next.outIdx != -2) {
				horz = result;
				while(horz.prev.dx == -3.4E+38) horz = horz.prev;
				if(horz.prev.top.x > result.next.top.x) {
					result = horz.prev;
				}
			}
			while(e != result) {
				e.nextInLML = e.next;
				if(e.dx == -3.4E+38 && e != eStart && e.bot.x != e.prev.top.x) {
					this.reverseHorizontal(e);
				}
				e = e.next;
			}
			if(e.dx == -3.4E+38 && e != eStart && e.bot.x != e.prev.top.x) {
				this.reverseHorizontal(e);
			}
			result = result.next;
		} else {
			while(result.top.y == result.prev.bot.y && result.prev.outIdx != -2) result = result.prev;
			if(result.dx == -3.4E+38 && result.prev.outIdx != -2) {
				horz = result;
				while(horz.next.dx == -3.4E+38) horz = horz.next;
				if(horz.next.top.x == result.prev.top.x || horz.next.top.x > result.prev.top.x) {
					result = horz.next;
				}
			}
			while(e != result) {
				e.nextInLML = e.prev;
				if(e.dx == -3.4E+38 && e != eStart && e.bot.x != e.next.top.x) {
					this.reverseHorizontal(e);
				}
				e = e.prev;
			}
			if(e.dx == -3.4E+38 && e != eStart && e.bot.x != e.next.top.x) {
				this.reverseHorizontal(e);
			}
			result = result.prev;
		}
		return result;
	}
	,addPath: function(path,polyType,closed) {
		if(!closed) {
			throw new js__$Boot_HaxeError(new hxClipper_ClipperException("AddPath: Open paths have been disabled (define USE_LINES to enable them)."));
		}
		var highI = path.length - 1;
		if(closed) {
			while(highI > 0 && path[highI].equals(path[0])) --highI;
		}
		while(highI > 0 && path[highI].equals(path[highI - 1])) --highI;
		if(closed && highI < 2 || !closed && highI < 1) {
			return false;
		}
		var edges = [];
		var _g1 = 0;
		var _g = highI + 1;
		while(_g1 < _g) {
			++_g1;
			edges.push(new hxClipper__$Clipper_TEdge());
		}
		var isFlat = true;
		edges[1].curr.copyFrom(path[1]);
		this.mUseFullRange = this.rangeTest(path[0],this.mUseFullRange);
		this.mUseFullRange = this.rangeTest(path[highI],this.mUseFullRange);
		this.initEdge(edges[0],edges[1],edges[highI],path[0]);
		this.initEdge(edges[highI],edges[0],edges[highI - 1],path[highI]);
		var i = highI - 1;
		while(i >= 1) {
			this.mUseFullRange = this.rangeTest(path[i],this.mUseFullRange);
			this.initEdge(edges[i],edges[i + 1],edges[i - 1],path[i]);
			--i;
		}
		var eStart = edges[0];
		var e = eStart;
		var eLoopStop = eStart;
		while(true) {
			if(e.curr.equals(e.next.curr) && (closed || e.next != eStart)) {
				if(e == e.next) {
					break;
				}
				if(e == eStart) {
					eStart = e.next;
				}
				e = this.removeEdge(e);
				eLoopStop = e;
				continue;
			}
			if(e.prev == e.next) {
				break;
			} else if(closed && hxClipper_ClipperBase.slopesEqual3(e.prev.curr,e.curr,e.next.curr,this.mUseFullRange) && (!this.preserveCollinear || !this.pt2IsBetweenPt1AndPt3(e.prev.curr,e.curr,e.next.curr))) {
				if(e == eStart) {
					eStart = e.next;
				}
				e = this.removeEdge(e);
				e = e.prev;
				eLoopStop = e;
				continue;
			}
			e = e.next;
			if(e == eLoopStop || !closed && e.next == eStart) {
				break;
			}
		}
		if(!closed && e == e.next || closed && e.prev == e.next) {
			return false;
		}
		if(!closed) {
			this.mHasOpenPaths = true;
			eStart.prev.outIdx = -2;
		}
		e = eStart;
		while(true) {
			this.initEdge2(e,polyType);
			e = e.next;
			if(isFlat && e.curr.y != eStart.curr.y) {
				isFlat = false;
			}
			if(!(e != eStart)) {
				break;
			}
		}
		if(isFlat) {
			if(closed) {
				return false;
			}
			e.prev.outIdx = -2;
			var locMin = new hxClipper__$Clipper_LocalMinima();
			locMin.next = null;
			locMin.y = e.bot.y;
			locMin.leftBound = null;
			locMin.rightBound = e;
			locMin.rightBound.side = hxClipper__$Clipper_EdgeSide.ES_RIGHT;
			locMin.rightBound.windDelta = 0;
			while(true) {
				if(e.bot.x != e.prev.top.x) {
					this.reverseHorizontal(e);
				}
				if(e.next.outIdx == -2) {
					break;
				}
				e.nextInLML = e.next;
				e = e.next;
			}
			this.insertLocalMinima(locMin);
			this.mEdges.push(edges);
			return true;
		}
		this.mEdges.push(edges);
		var leftBoundIsForward;
		var eMin = null;
		if(e.prev.bot.equals(e.prev.top)) {
			e = e.next;
		}
		while(true) {
			e = this.findNextLocMin(e);
			if(e == eMin) {
				break;
			} else if(eMin == null) {
				eMin = e;
			}
			var locMin1 = new hxClipper__$Clipper_LocalMinima();
			locMin1.next = null;
			locMin1.y = e.bot.y;
			if(e.dx < e.prev.dx) {
				locMin1.leftBound = e.prev;
				locMin1.rightBound = e;
				leftBoundIsForward = false;
			} else {
				locMin1.leftBound = e;
				locMin1.rightBound = e.prev;
				leftBoundIsForward = true;
			}
			locMin1.leftBound.side = hxClipper__$Clipper_EdgeSide.ES_LEFT;
			locMin1.rightBound.side = hxClipper__$Clipper_EdgeSide.ES_RIGHT;
			if(!closed) {
				locMin1.leftBound.windDelta = 0;
			} else if(locMin1.leftBound.next == locMin1.rightBound) {
				locMin1.leftBound.windDelta = -1;
			} else {
				locMin1.leftBound.windDelta = 1;
			}
			locMin1.rightBound.windDelta = -locMin1.leftBound.windDelta;
			e = this.processBound(locMin1.leftBound,leftBoundIsForward);
			if(e.outIdx == -2) {
				e = this.processBound(e,leftBoundIsForward);
			}
			var E2 = this.processBound(locMin1.rightBound,!leftBoundIsForward);
			if(E2.outIdx == -2) {
				E2 = this.processBound(E2,!leftBoundIsForward);
			}
			if(locMin1.leftBound.outIdx == -2) {
				locMin1.leftBound = null;
			} else if(locMin1.rightBound.outIdx == -2) {
				locMin1.rightBound = null;
			}
			this.insertLocalMinima(locMin1);
			if(!leftBoundIsForward) {
				e = E2;
			}
		}
		return true;
	}
	,addPaths: function(paths,polyType,closed) {
		var result = false;
		var _g1 = 0;
		var _g = paths.length;
		while(_g1 < _g) if(this.addPath(paths[_g1++],polyType,closed)) {
			result = true;
		}
		return result;
	}
	,pt2IsBetweenPt1AndPt3: function(pt1,pt2,pt3) {
		if(pt1.equals(pt3) || pt1.equals(pt2) || pt3.equals(pt2)) {
			return false;
		} else if(pt1.x != pt3.x) {
			return pt2.x > pt1.x == pt2.x < pt3.x;
		} else {
			return pt2.y > pt1.y == pt2.y < pt3.y;
		}
	}
	,removeEdge: function(e) {
		e.prev.next = e.next;
		e.next.prev = e.prev;
		e.prev = null;
		return e.next;
	}
	,setDx: function(e) {
		e.delta.x = e.top.x - e.bot.x;
		e.delta.y = e.top.y - e.bot.y;
		if(e.delta.y == 0) {
			e.dx = -3.4E+38;
		} else {
			e.dx = e.delta.x / e.delta.y;
		}
	}
	,insertLocalMinima: function(newLm) {
		if(this.mMinimaList == null) {
			this.mMinimaList = newLm;
		} else if(newLm.y >= this.mMinimaList.y) {
			newLm.next = this.mMinimaList;
			this.mMinimaList = newLm;
		} else {
			var tmpLm = this.mMinimaList;
			while(tmpLm.next != null && newLm.y < tmpLm.next.y) tmpLm = tmpLm.next;
			newLm.next = tmpLm.next;
			tmpLm.next = newLm;
		}
	}
	,popLocalMinima: function(y,current) {
		current.lm = this.mCurrentLM;
		if(this.mCurrentLM != null && this.mCurrentLM.y == y) {
			this.mCurrentLM = this.mCurrentLM.next;
			return true;
		}
		return false;
	}
	,reverseHorizontal: function(e) {
		var tmp = e.top.x;
		e.top.x = e.bot.x;
		e.bot.x = tmp;
	}
	,reset: function() {
		this.mCurrentLM = this.mMinimaList;
		if(this.mCurrentLM == null) {
			return;
		}
		this.mScanbeam = null;
		var lm = this.mMinimaList;
		while(lm != null) {
			this.insertScanbeam(lm.y);
			var e = lm.leftBound;
			if(e != null) {
				e.curr.copyFrom(e.bot);
				e.outIdx = -1;
			}
			e = lm.rightBound;
			if(e != null) {
				e.curr.copyFrom(e.bot);
				e.outIdx = -1;
			}
			lm = lm.next;
		}
		this.mActiveEdges = null;
	}
	,insertScanbeam: function(y) {
		if(this.mScanbeam == null) {
			this.mScanbeam = new hxClipper__$Clipper_Scanbeam();
			this.mScanbeam.next = null;
			this.mScanbeam.y = y;
		} else if(y > this.mScanbeam.y) {
			var newSb = new hxClipper__$Clipper_Scanbeam();
			newSb.y = y;
			newSb.next = this.mScanbeam;
			this.mScanbeam = newSb;
		} else {
			var sb2 = this.mScanbeam;
			while(sb2.next != null && y <= sb2.next.y) sb2 = sb2.next;
			if(y == sb2.y) {
				return;
			}
			var newSb1 = new hxClipper__$Clipper_Scanbeam();
			newSb1.y = y;
			newSb1.next = sb2.next;
			sb2.next = newSb1;
		}
	}
	,popScanbeam: function() {
		var res = { y : 0, popped : false};
		if(this.mScanbeam == null) {
			return res;
		}
		res.y = this.mScanbeam.y;
		this.mScanbeam = this.mScanbeam.next;
		res.popped = true;
		return res;
	}
	,localMinimaPending: function() {
		return this.mCurrentLM != null;
	}
	,createOutRec: function() {
		var result = new hxClipper__$Clipper_OutRec();
		result.idx = -1;
		result.isHole = false;
		result.isOpen = false;
		result.firstLeft = null;
		result.pts = null;
		result.bottomPt = null;
		result.polyNode = null;
		this.mPolyOuts.push(result);
		result.idx = this.mPolyOuts.length - 1;
		return result;
	}
	,disposeOutRec: function(index) {
		var outRec = this.mPolyOuts[index];
		outRec.pts = null;
		outRec = null;
		this.mPolyOuts[index] = null;
	}
	,updateEdgeIntoAEL: function(e) {
		if(e.nextInLML == null) {
			throw new js__$Boot_HaxeError(new hxClipper_ClipperException("UpdateEdgeIntoAEL: invalid call"));
		}
		var aelPrev = e.prevInAEL;
		var aelNext = e.nextInAEL;
		e.nextInLML.outIdx = e.outIdx;
		if(aelPrev != null) {
			aelPrev.nextInAEL = e.nextInLML;
		} else {
			this.mActiveEdges = e.nextInLML;
		}
		if(aelNext != null) {
			aelNext.prevInAEL = e.nextInLML;
		}
		e.nextInLML.side = e.side;
		e.nextInLML.windDelta = e.windDelta;
		e.nextInLML.windCnt = e.windCnt;
		e.nextInLML.windCnt2 = e.windCnt2;
		e = e.nextInLML;
		e.curr.copyFrom(e.bot);
		e.prevInAEL = aelPrev;
		e.nextInAEL = aelNext;
		if(!hxClipper_ClipperBase.isHorizontal(e)) {
			this.insertScanbeam(e.top.y);
		}
		return e;
	}
	,swapPositionsInAEL: function(edge1,edge2) {
		if(edge1.nextInAEL == edge1.prevInAEL || edge2.nextInAEL == edge2.prevInAEL) {
			return;
		}
		if(edge1.nextInAEL == edge2) {
			var next = edge2.nextInAEL;
			if(next != null) {
				next.prevInAEL = edge1;
			}
			var prev = edge1.prevInAEL;
			if(prev != null) {
				prev.nextInAEL = edge2;
			}
			edge2.prevInAEL = prev;
			edge2.nextInAEL = edge1;
			edge1.prevInAEL = edge2;
			edge1.nextInAEL = next;
		} else if(edge2.nextInAEL == edge1) {
			var next1 = edge1.nextInAEL;
			if(next1 != null) {
				next1.prevInAEL = edge2;
			}
			var prev1 = edge2.prevInAEL;
			if(prev1 != null) {
				prev1.nextInAEL = edge1;
			}
			edge1.prevInAEL = prev1;
			edge1.nextInAEL = edge2;
			edge2.prevInAEL = edge1;
			edge2.nextInAEL = next1;
		} else {
			var next2 = edge1.nextInAEL;
			var prev2 = edge1.prevInAEL;
			edge1.nextInAEL = edge2.nextInAEL;
			if(edge1.nextInAEL != null) {
				edge1.nextInAEL.prevInAEL = edge1;
			}
			edge1.prevInAEL = edge2.prevInAEL;
			if(edge1.prevInAEL != null) {
				edge1.prevInAEL.nextInAEL = edge1;
			}
			edge2.nextInAEL = next2;
			if(edge2.nextInAEL != null) {
				edge2.nextInAEL.prevInAEL = edge2;
			}
			edge2.prevInAEL = prev2;
			if(edge2.prevInAEL != null) {
				edge2.prevInAEL.nextInAEL = edge2;
			}
		}
		if(edge1.prevInAEL == null) {
			this.mActiveEdges = edge1;
		} else if(edge2.prevInAEL == null) {
			this.mActiveEdges = edge2;
		}
	}
	,deleteFromAEL: function(e) {
		var aelPrev = e.prevInAEL;
		var aelNext = e.nextInAEL;
		if(aelPrev == null && aelNext == null && e != this.mActiveEdges) {
			return;
		}
		if(aelPrev != null) {
			aelPrev.nextInAEL = aelNext;
		} else {
			this.mActiveEdges = aelNext;
		}
		if(aelNext != null) {
			aelNext.prevInAEL = aelPrev;
		}
		e.nextInAEL = null;
		e.prevInAEL = null;
	}
};
var hxClipper_Clipper = function(initOptions) {
	if(initOptions == null) {
		initOptions = 0;
	}
	hxClipper_ClipperBase.call(this);
	this.mScanbeam = null;
	this.mMaxima = null;
	this.mActiveEdges = null;
	this.mSortedEdges = null;
	this.mIntersectList = [];
	this.mIntersectNodeComparer = hxClipper_Clipper.compare;
	this.mExecuteLocked = false;
	this.mUsingPolyTree = false;
	this.mPolyOuts = [];
	this.mJoins = [];
	this.mGhostJoins = [];
	this.reverseSolution = (1 & initOptions) != 0;
	this.strictlySimple = (2 & initOptions) != 0;
	this.preserveCollinear = (4 & initOptions) != 0;
};
hxClipper_Clipper.__name__ = true;
hxClipper_Clipper.compare = function(node1,node2) {
	var i = node2.pt.y - node1.pt.y;
	if(i > 0) {
		return 1;
	} else if(i < 0) {
		return -1;
	} else {
		return 0;
	}
};
hxClipper_Clipper.swapSides = function(edge1,edge2) {
	var side = edge1.side;
	edge1.side = edge2.side;
	edge2.side = side;
};
hxClipper_Clipper.swapPolyIndexes = function(edge1,edge2) {
	var outIdx = edge1.outIdx;
	edge1.outIdx = edge2.outIdx;
	edge2.outIdx = outIdx;
};
hxClipper_Clipper.intersectNodeSort = function(node1,node2) {
	return node2.pt.y - node1.pt.y | 0;
};
hxClipper_Clipper.round = function(value) {
	if(value < 0) {
		return value - 0.5 | 0;
	} else {
		return value + 0.5 | 0;
	}
};
hxClipper_Clipper.topX = function(edge,currentY) {
	if(currentY == edge.top.y) {
		return edge.top.x;
	}
	return edge.bot.x + hxClipper_Clipper.round(edge.dx * (currentY - edge.bot.y));
};
hxClipper_Clipper.reversePaths = function(polys) {
	var _g = 0;
	while(_g < polys.length) polys[_g++].reverse();
};
hxClipper_Clipper.orientation = function(poly) {
	return hxClipper_Clipper.area(poly) >= 0;
};
hxClipper_Clipper.pointInPolygon = function(pt,path) {
	var result = 0;
	var cnt = path.length;
	if(cnt < 3) {
		return 0;
	}
	var ip = path[0].clone();
	var ipNext = new hxClipper_IntPoint();
	var _g1 = 1;
	var _g = cnt + 1;
	while(_g1 < _g) {
		var i = _g1++;
		ipNext.copyFrom(i == cnt ? path[0] : path[i]);
		if(ipNext.y == pt.y) {
			if(ipNext.x == pt.x || ip.y == pt.y && ipNext.x > pt.x == ip.x < pt.x) {
				return -1;
			}
		}
		if(ip.y < pt.y != ipNext.y < pt.y) {
			if(ip.x >= pt.x) {
				if(ipNext.x > pt.x) {
					result = 1 - result;
				} else {
					var d = (ip.x - pt.x) * (ipNext.y - pt.y) - (ipNext.x - pt.x) * (ip.y - pt.y);
					if(d == 0) {
						return -1;
					} else if(d > 0 == ipNext.y > ip.y) {
						result = 1 - result;
					}
				}
			} else if(ipNext.x > pt.x) {
				var d1 = (ip.x - pt.x) * (ipNext.y - pt.y) - (ipNext.x - pt.x) * (ip.y - pt.y);
				if(d1 == 0) {
					return -1;
				} else if(d1 > 0 == ipNext.y > ip.y) {
					result = 1 - result;
				}
			}
		}
		ip.copyFrom(ipNext);
	}
	return result;
};
hxClipper_Clipper.pointInOutPt = function(pt,op) {
	var result = 0;
	var startOp = op;
	var ptx = pt.x;
	var pty = pt.y;
	var poly0x = op.pt.x;
	var poly0y = op.pt.y;
	while(true) {
		op = op.next;
		var poly1x = op.pt.x;
		var poly1y = op.pt.y;
		if(poly1y == pty) {
			if(poly1x == ptx || poly0y == pty && poly1x > ptx == poly0x < ptx) {
				return -1;
			}
		}
		if(poly0y < pty != poly1y < pty) {
			if(poly0x >= ptx) {
				if(poly1x > ptx) {
					result = 1 - result;
				} else {
					var d = (poly0x - ptx) * (poly1y - pty) - (poly1x - ptx) * (poly0y - pty);
					if(d == 0) {
						return -1;
					}
					if(d > 0 == poly1y > poly0y) {
						result = 1 - result;
					}
				}
			} else if(poly1x > ptx) {
				var d1 = (poly0x - ptx) * (poly1y - pty) - (poly1x - ptx) * (poly0y - pty);
				if(d1 == 0) {
					return -1;
				}
				if(d1 > 0 == poly1y > poly0y) {
					result = 1 - result;
				}
			}
		}
		poly0x = poly1x;
		poly0y = poly1y;
		if(!(startOp != op)) {
			break;
		}
	}
	return result;
};
hxClipper_Clipper.poly2ContainsPoly1 = function(outPt1,outPt2) {
	var op = outPt1;
	while(true) {
		var res = hxClipper_Clipper.pointInOutPt(op.pt,outPt2);
		if(res >= 0) {
			return res > 0;
		}
		op = op.next;
		if(!(op != outPt1)) {
			break;
		}
	}
	return true;
};
hxClipper_Clipper.parseFirstLeft = function(firstLeft) {
	while(firstLeft != null && firstLeft.pts == null) firstLeft = firstLeft.firstLeft;
	return firstLeft;
};
hxClipper_Clipper.area = function(poly) {
	if(poly == null || poly.length < 3) {
		return 0;
	}
	var cnt = poly.length;
	var a = 0;
	var j = cnt - 1;
	var _g1 = 0;
	while(_g1 < cnt) {
		var i = _g1++;
		a += (poly[j].x + poly[i].x) * (poly[j].y - poly[i].y);
		j = i;
	}
	return -a * 0.5;
};
hxClipper_Clipper.simplifyPolygon = function(poly,fillType) {
	if(fillType == null) {
		fillType = hxClipper_PolyFillType.PFT_EVEN_ODD;
	}
	var result = [];
	var c = new hxClipper_Clipper();
	c.strictlySimple = true;
	c.addPath(poly,hxClipper_PolyType.PT_SUBJECT,true);
	c.executePaths(hxClipper_ClipType.CT_UNION,result,fillType,fillType);
	return result;
};
hxClipper_Clipper.simplifyPolygons = function(polys,fillType) {
	if(fillType == null) {
		fillType = hxClipper_PolyFillType.PFT_EVEN_ODD;
	}
	var result = [];
	var c = new hxClipper_Clipper();
	c.strictlySimple = true;
	c.addPaths(polys,hxClipper_PolyType.PT_SUBJECT,true);
	c.executePaths(hxClipper_ClipType.CT_UNION,result,fillType,fillType);
	return result;
};
hxClipper_Clipper.distanceSqrd = function(pt1,pt2) {
	var dx = pt1.x - pt2.x;
	var dy = pt1.y - pt2.y;
	return dx * dx + dy * dy;
};
hxClipper_Clipper.distanceFromLineSqrd = function(pt,ln1,ln2) {
	var A = ln1.y - ln2.y;
	var B = ln2.x - ln1.x;
	var C = A * ln1.x + B * ln1.y;
	C = A * pt.x + B * pt.y - C;
	return C * C / (A * A + B * B);
};
hxClipper_Clipper.slopesNearCollinear = function(pt1,pt2,pt3,distSqrd) {
	if(Math.abs(pt1.x - pt2.x) > Math.abs(pt1.y - pt2.y)) {
		if(pt1.x > pt2.x == pt1.x < pt3.x) {
			return hxClipper_Clipper.distanceFromLineSqrd(pt1,pt2,pt3) < distSqrd;
		} else if(pt2.x > pt1.x == pt2.x < pt3.x) {
			return hxClipper_Clipper.distanceFromLineSqrd(pt2,pt1,pt3) < distSqrd;
		} else {
			return hxClipper_Clipper.distanceFromLineSqrd(pt3,pt1,pt2) < distSqrd;
		}
	} else if(pt1.y > pt2.y == pt1.y < pt3.y) {
		return hxClipper_Clipper.distanceFromLineSqrd(pt1,pt2,pt3) < distSqrd;
	} else if(pt2.y > pt1.y == pt2.y < pt3.y) {
		return hxClipper_Clipper.distanceFromLineSqrd(pt2,pt1,pt3) < distSqrd;
	} else {
		return hxClipper_Clipper.distanceFromLineSqrd(pt3,pt1,pt2) < distSqrd;
	}
};
hxClipper_Clipper.pointsAreClose = function(pt1,pt2,distSqrd) {
	var dx = pt1.x - pt2.x;
	var dy = pt1.y - pt2.y;
	return dx * dx + dy * dy <= distSqrd;
};
hxClipper_Clipper.excludeOp = function(op) {
	var result = op.prev;
	result.next = op.next;
	op.next.prev = result;
	result.idx = 0;
	return result;
};
hxClipper_Clipper.cleanPolygon = function(path,distance) {
	if(distance == null) {
		distance = 1.415;
	}
	var cnt = path.length;
	if(cnt == 0) {
		return [];
	}
	var _g = [];
	var _g2 = 0;
	var _g1 = cnt;
	while(_g2 < _g1) {
		++_g2;
		_g.push(new hxClipper__$Clipper_OutPt());
	}
	var _g21 = 0;
	var _g11 = cnt;
	while(_g21 < _g11) {
		var i = _g21++;
		_g[i].pt.copyFrom(path[i]);
		_g[i].next = _g[(i + 1) % cnt];
		_g[i].next.prev = _g[i];
		_g[i].idx = 0;
	}
	var distSqrd = distance * distance;
	var op = _g[0];
	while(op.idx == 0 && op.next != op.prev) if(hxClipper_Clipper.pointsAreClose(op.pt,op.prev.pt,distSqrd)) {
		op = hxClipper_Clipper.excludeOp(op);
		--cnt;
	} else if(hxClipper_Clipper.pointsAreClose(op.prev.pt,op.next.pt,distSqrd)) {
		hxClipper_Clipper.excludeOp(op.next);
		op = hxClipper_Clipper.excludeOp(op);
		cnt -= 2;
	} else if(hxClipper_Clipper.slopesNearCollinear(op.prev.pt,op.pt,op.next.pt,distSqrd)) {
		op = hxClipper_Clipper.excludeOp(op);
		--cnt;
	} else {
		op.idx = 1;
		op = op.next;
	}
	if(cnt < 3) {
		cnt = 0;
	}
	var result = [];
	var _g22 = 0;
	var _g12 = cnt;
	while(_g22 < _g12) {
		++_g22;
		result.push(op.pt);
		op = op.next;
	}
	return result;
};
hxClipper_Clipper.cleanPolygons = function(polys,distance) {
	if(distance == null) {
		distance = 1.415;
	}
	var result = [];
	var _g1 = 0;
	var _g = polys.length;
	while(_g1 < _g) result.push(hxClipper_Clipper.cleanPolygon(polys[_g1++],distance));
	return result;
};
hxClipper_Clipper.minkowski = function(pattern,path,isSum,isClosed) {
	var delta = isClosed ? 1 : 0;
	var polyCnt = pattern.length;
	var pathCnt = path.length;
	var result = [];
	if(isSum) {
		var _g1 = 0;
		while(_g1 < pathCnt) {
			var i = _g1++;
			var p = [];
			var _g2 = 0;
			while(_g2 < pattern.length) {
				var ip = pattern[_g2];
				++_g2;
				p.push(new hxClipper_IntPoint(path[i].x + ip.x,path[i].y + ip.y));
			}
			result.push(p);
		}
	} else {
		var _g11 = 0;
		while(_g11 < pathCnt) {
			var i1 = _g11++;
			var p1 = [];
			var _g21 = 0;
			while(_g21 < pattern.length) {
				var ip1 = pattern[_g21];
				++_g21;
				p1.push(new hxClipper_IntPoint(path[i1].x - ip1.x,path[i1].y - ip1.y));
			}
			result.push(p1);
		}
	}
	var quads = [];
	var _g12 = 0;
	var _g = pathCnt - 1 + delta;
	while(_g12 < _g) {
		var i2 = _g12++;
		var _g3 = 0;
		while(_g3 < polyCnt) {
			var j = _g3++;
			var quad = [];
			quad.push(result[i2 % pathCnt][j % polyCnt]);
			quad.push(result[(i2 + 1) % pathCnt][j % polyCnt]);
			quad.push(result[(i2 + 1) % pathCnt][(j + 1) % polyCnt]);
			quad.push(result[i2 % pathCnt][(j + 1) % polyCnt]);
			if(!hxClipper_Clipper.orientation(quad)) {
				quad.reverse();
			}
			quads.push(quad);
		}
	}
	return quads;
};
hxClipper_Clipper.minkowskiSum = function(pattern,path,pathIsClosed) {
	var paths = hxClipper_Clipper.minkowski(pattern,path,true,pathIsClosed);
	var c = new hxClipper_Clipper();
	c.addPaths(paths,hxClipper_PolyType.PT_SUBJECT,true);
	c.executePaths(hxClipper_ClipType.CT_UNION,paths,hxClipper_PolyFillType.PFT_NON_ZERO,hxClipper_PolyFillType.PFT_NON_ZERO);
	return paths;
};
hxClipper_Clipper.translatePath = function(path,delta) {
	var outPath = [];
	var _g1 = 0;
	var _g = path.length;
	while(_g1 < _g) {
		var i = _g1++;
		outPath.push(new hxClipper_IntPoint(path[i].x + delta.x,path[i].y + delta.y));
	}
	return outPath;
};
hxClipper_Clipper.minkowskiSumPaths = function(pattern,paths,pathIsClosed) {
	var solution = [];
	var c = new hxClipper_Clipper();
	var _g1 = 0;
	var _g = paths.length;
	while(_g1 < _g) {
		var i = _g1++;
		c.addPaths(hxClipper_Clipper.minkowski(pattern,paths[i],true,pathIsClosed),hxClipper_PolyType.PT_SUBJECT,true);
		if(pathIsClosed) {
			c.addPath(hxClipper_Clipper.translatePath(paths[i],pattern[0]),hxClipper_PolyType.PT_CLIP,true);
		}
	}
	c.executePaths(hxClipper_ClipType.CT_UNION,solution,hxClipper_PolyFillType.PFT_NON_ZERO,hxClipper_PolyFillType.PFT_NON_ZERO);
	return solution;
};
hxClipper_Clipper.minkowskiDiff = function(poly1,poly2) {
	var paths = hxClipper_Clipper.minkowski(poly1,poly2,false,true);
	var c = new hxClipper_Clipper();
	c.addPaths(paths,hxClipper_PolyType.PT_SUBJECT,true);
	c.executePaths(hxClipper_ClipType.CT_UNION,paths,hxClipper_PolyFillType.PFT_NON_ZERO,hxClipper_PolyFillType.PFT_NON_ZERO);
	return paths;
};
hxClipper_Clipper.polyTreeToPaths = function(polytree) {
	var result = [];
	hxClipper_Clipper.addPolyNodeToPaths(polytree,hxClipper__$Clipper_NodeType.NT_ANY,result);
	return result;
};
hxClipper_Clipper.addPolyNodeToPaths = function(polynode,nt,paths) {
	var match = true;
	switch(nt[1]) {
	case 1:
		return;
	case 2:
		match = !polynode.isOpen;
		break;
	default:
	}
	if(polynode.mPolygon.length > 0 && match) {
		paths.push(polynode.mPolygon);
	}
	var _g = 0;
	var _g1 = polynode.get_children();
	while(_g < _g1.length) hxClipper_Clipper.addPolyNodeToPaths(_g1[_g++],nt,paths);
};
hxClipper_Clipper.openPathsFromPolyTree = function(polytree) {
	var result = [];
	var _g1 = 0;
	var _g = polytree.get_numChildren();
	while(_g1 < _g) {
		var i = _g1++;
		if(polytree.get_children()[i].isOpen) {
			result.push(polytree.get_children()[i].mPolygon);
		}
	}
	return result;
};
hxClipper_Clipper.closedPathsFromPolyTree = function(polytree) {
	var result = [];
	hxClipper_Clipper.addPolyNodeToPaths(polytree,hxClipper__$Clipper_NodeType.NT_CLOSED,result);
	return result;
};
hxClipper_Clipper.__super__ = hxClipper_ClipperBase;
hxClipper_Clipper.prototype = $extend(hxClipper_ClipperBase.prototype,{
	insertMaxima: function(x) {
		var newMax = new hxClipper__$Clipper_Maxima();
		newMax.x = x;
		if(this.mMaxima == null) {
			this.mMaxima = newMax;
			this.mMaxima.next = null;
			this.mMaxima.prev = null;
		} else if(x < this.mMaxima.x) {
			newMax.next = this.mMaxima;
			newMax.prev = null;
			this.mMaxima = newMax;
		} else {
			var m = this.mMaxima;
			while(m.next != null && x >= m.next.x) m = m.next;
			if(x == m.x) {
				return;
			}
			newMax.next = m.next;
			newMax.prev = m;
			if(m.next != null) {
				m.next.prev = newMax;
			}
			m.next = newMax;
		}
	}
	,executePaths: function(clipType,solution,subjFillType,clipFillType) {
		if(this.mExecuteLocked) {
			return false;
		}
		if(this.mHasOpenPaths) {
			throw new js__$Boot_HaxeError(new hxClipper_ClipperException("Error: PolyTree struct is needed for open path clipping."));
		}
		this.mExecuteLocked = true;
		solution.length = 0;
		this.mSubjFillType = subjFillType;
		this.mClipFillType = clipFillType;
		this.mClipType = clipType;
		this.mUsingPolyTree = false;
		var succeeded = false;
		succeeded = this.executeInternal();
		if(succeeded) {
			this.buildResult(solution);
		}
		this.disposeAllPolyPts();
		this.mExecuteLocked = false;
		this.mJoins.length = 0;
		this.mGhostJoins.length = 0;
		return succeeded;
	}
	,executePolyTree: function(clipType,polytree,subjFillType,clipFillType) {
		if(this.mExecuteLocked) {
			return false;
		}
		this.mExecuteLocked = true;
		this.mSubjFillType = subjFillType;
		this.mClipFillType = clipFillType;
		this.mClipType = clipType;
		this.mUsingPolyTree = true;
		var succeeded = false;
		succeeded = this.executeInternal();
		if(succeeded) {
			this.buildResult2(polytree);
		}
		this.disposeAllPolyPts();
		this.mExecuteLocked = false;
		this.mJoins.length = 0;
		this.mGhostJoins.length = 0;
		return succeeded;
	}
	,execute: function(clipType,solution) {
		if((solution instanceof Array) && solution.__enum__ == null) {
			return this.executePaths(clipType,solution,hxClipper_PolyFillType.PFT_EVEN_ODD,hxClipper_PolyFillType.PFT_EVEN_ODD);
		} else if((solution instanceof hxClipper_PolyTree)) {
			return this.executePolyTree(clipType,solution,hxClipper_PolyFillType.PFT_EVEN_ODD,hxClipper_PolyFillType.PFT_EVEN_ODD);
		} else {
			throw new js__$Boot_HaxeError(new hxClipper_ClipperException("`solution` must be either a Paths or a PolyTree"));
		}
	}
	,fixHoleLinkage: function(outRec) {
		if(outRec.firstLeft == null || outRec.isHole != outRec.firstLeft.isHole && outRec.firstLeft.pts != null) {
			return;
		}
		var orfl = outRec.firstLeft;
		while(orfl != null && (orfl.isHole == outRec.isHole || orfl.pts == null)) orfl = orfl.firstLeft;
		outRec.firstLeft = orfl;
	}
	,executeInternal: function() {
		this.reset();
		this.mSortedEdges = null;
		this.mMaxima = null;
		var topY;
		var popRes = this.popScanbeam();
		var botY = popRes.y;
		if(!popRes.popped) {
			return false;
		}
		this.insertLocalMinimaIntoAEL(botY);
		while(true) {
			popRes = this.popScanbeam();
			topY = popRes.y;
			if(popRes.popped || this.localMinimaPending()) {
				this.processHorizontals();
				this.mGhostJoins.length = 0;
				if(!this.processIntersections(topY)) {
					return false;
				}
				this.processEdgesAtTopOfScanbeam(topY);
				botY = topY;
				this.insertLocalMinimaIntoAEL(topY);
			} else {
				break;
			}
		}
		var _g1 = 0;
		var _g = this.mPolyOuts.length;
		while(_g1 < _g) {
			var outRec = this.mPolyOuts[_g1++];
			if(outRec.pts == null || outRec.isOpen) {
				continue;
			}
			var a = outRec.isHole;
			var b = this.reverseSolution;
			if((a && !b || b && !a) == this.areaOfOutRec(outRec) > 0) {
				this.reversePolyPtLinks(outRec.pts);
			}
		}
		this.joinCommonEdges();
		var _g11 = 0;
		var _g2 = this.mPolyOuts.length;
		while(_g11 < _g2) {
			var outRec1 = this.mPolyOuts[_g11++];
			if(outRec1.pts == null) {
				continue;
			} else if(outRec1.isOpen) {
				this.fixupOutPolyLine(outRec1);
			} else {
				this.fixupOutPolygon(outRec1);
			}
		}
		if(this.strictlySimple) {
			this.doSimplePolygons();
		}
		return true;
	}
	,disposeAllPolyPts: function() {
		var _g1 = 0;
		var _g = this.mPolyOuts.length;
		while(_g1 < _g) this.disposeOutRec(_g1++);
		this.mPolyOuts.length = 0;
	}
	,addJoin: function(op1,op2,offPt) {
		var j = new hxClipper__$Clipper_Join();
		j.outPt1 = op1;
		j.outPt2 = op2;
		j.offPt.copyFrom(offPt);
		this.mJoins.push(j);
	}
	,addGhostJoin: function(op,offPt) {
		var j = new hxClipper__$Clipper_Join();
		j.outPt1 = op;
		j.offPt.copyFrom(offPt);
		this.mGhostJoins.push(j);
	}
	,insertLocalMinimaIntoAEL: function(botY) {
		var current = { lm : null};
		while(this.popLocalMinima(botY,current)) {
			var lm = current.lm;
			var lb = lm.leftBound;
			var rb = lm.rightBound;
			var op1 = null;
			if(lb == null) {
				this.insertEdgeIntoAEL(rb,null);
				this.setWindingCount(rb);
				if(this.isContributing(rb)) {
					op1 = this.addOutPt(rb,rb.bot);
				}
			} else if(rb == null) {
				this.insertEdgeIntoAEL(lb,null);
				this.setWindingCount(lb);
				if(this.isContributing(lb)) {
					op1 = this.addOutPt(lb,lb.bot);
				}
				this.insertScanbeam(lb.top.y);
			} else {
				this.insertEdgeIntoAEL(lb,null);
				this.insertEdgeIntoAEL(rb,lb);
				this.setWindingCount(lb);
				rb.windCnt = lb.windCnt;
				rb.windCnt2 = lb.windCnt2;
				if(this.isContributing(lb)) {
					op1 = this.addLocalMinPoly(lb,rb,lb.bot);
				}
				this.insertScanbeam(lb.top.y);
			}
			if(rb != null) {
				if(hxClipper_ClipperBase.isHorizontal(rb)) {
					if(rb.nextInLML != null) {
						this.insertScanbeam(rb.nextInLML.top.y);
					}
					this.addEdgeToSEL(rb);
				} else {
					this.insertScanbeam(rb.top.y);
				}
			}
			if(lb == null || rb == null) {
				continue;
			}
			if(op1 != null && hxClipper_ClipperBase.isHorizontal(rb) && this.mGhostJoins.length > 0 && rb.windDelta != 0) {
				var _g1 = 0;
				var _g = this.mGhostJoins.length;
				while(_g1 < _g) {
					var j = this.mGhostJoins[_g1++];
					if(this.horzSegmentsOverlap(j.outPt1.pt.x,j.offPt.x,rb.bot.x,rb.top.x)) {
						this.addJoin(j.outPt1,op1,j.offPt);
					}
				}
			}
			if(lb.outIdx >= 0 && lb.prevInAEL != null && lb.prevInAEL.curr.x == lb.bot.x && lb.prevInAEL.outIdx >= 0 && hxClipper_ClipperBase.slopesEqual4(lb.prevInAEL.curr,lb.prevInAEL.top,lb.curr,lb.top,this.mUseFullRange) && lb.windDelta != 0 && lb.prevInAEL.windDelta != 0) {
				this.addJoin(op1,this.addOutPt(lb.prevInAEL,lb.bot),lb.top);
			}
			if(lb.nextInAEL != rb) {
				if(rb.outIdx >= 0 && rb.prevInAEL.outIdx >= 0 && hxClipper_ClipperBase.slopesEqual4(rb.prevInAEL.curr,rb.prevInAEL.top,rb.curr,rb.top,this.mUseFullRange) && rb.windDelta != 0 && rb.prevInAEL.windDelta != 0) {
					this.addJoin(op1,this.addOutPt(rb.prevInAEL,rb.bot),rb.top);
				}
				var e = lb.nextInAEL;
				if(e != null) {
					while(e != rb) {
						this.intersectEdges(rb,e,lb.curr);
						e = e.nextInAEL;
					}
				}
			}
		}
	}
	,insertEdgeIntoAEL: function(edge,startEdge) {
		if(this.mActiveEdges == null) {
			edge.prevInAEL = null;
			edge.nextInAEL = null;
			this.mActiveEdges = edge;
		} else if(startEdge == null && this.e2InsertsBeforeE1(this.mActiveEdges,edge)) {
			edge.prevInAEL = null;
			edge.nextInAEL = this.mActiveEdges;
			this.mActiveEdges.prevInAEL = edge;
			this.mActiveEdges = edge;
		} else {
			if(startEdge == null) {
				startEdge = this.mActiveEdges;
			}
			while(startEdge.nextInAEL != null && !this.e2InsertsBeforeE1(startEdge.nextInAEL,edge)) startEdge = startEdge.nextInAEL;
			edge.nextInAEL = startEdge.nextInAEL;
			if(startEdge.nextInAEL != null) {
				startEdge.nextInAEL.prevInAEL = edge;
			}
			edge.prevInAEL = startEdge;
			startEdge.nextInAEL = edge;
		}
	}
	,e2InsertsBeforeE1: function(e1,e2) {
		if(e2.curr.x == e1.curr.x) {
			if(e2.top.y > e1.top.y) {
				return e2.top.x < hxClipper_Clipper.topX(e1,e2.top.y);
			} else {
				return e1.top.x > hxClipper_Clipper.topX(e2,e1.top.y);
			}
		} else {
			return e2.curr.x < e1.curr.x;
		}
	}
	,isEvenOddFillType: function(edge) {
		if(edge.polyType == hxClipper_PolyType.PT_SUBJECT) {
			return this.mSubjFillType == hxClipper_PolyFillType.PFT_EVEN_ODD;
		} else {
			return this.mClipFillType == hxClipper_PolyFillType.PFT_EVEN_ODD;
		}
	}
	,isEvenOddAltFillType: function(edge) {
		if(edge.polyType == hxClipper_PolyType.PT_SUBJECT) {
			return this.mClipFillType == hxClipper_PolyFillType.PFT_EVEN_ODD;
		} else {
			return this.mSubjFillType == hxClipper_PolyFillType.PFT_EVEN_ODD;
		}
	}
	,isContributing: function(edge) {
		var pft;
		var pft2;
		if(edge.polyType == hxClipper_PolyType.PT_SUBJECT) {
			pft = this.mSubjFillType;
			pft2 = this.mClipFillType;
		} else {
			pft = this.mClipFillType;
			pft2 = this.mSubjFillType;
		}
		switch(pft[1]) {
		case 0:
			if(edge.windDelta == 0 && edge.windCnt != 1) {
				return false;
			}
			break;
		case 1:
			if(Math.abs(edge.windCnt) != 1) {
				return false;
			}
			break;
		case 2:
			if(edge.windCnt != 1) {
				return false;
			}
			break;
		default:
			if(edge.windCnt != -1) {
				return false;
			}
		}
		switch(this.mClipType[1]) {
		case 0:
			switch(pft2[1]) {
			case 0:case 1:
				return edge.windCnt2 != 0;
			case 2:
				return edge.windCnt2 > 0;
			default:
				return edge.windCnt2 < 0;
			}
			break;
		case 1:
			switch(pft2[1]) {
			case 0:case 1:
				return edge.windCnt2 == 0;
			case 2:
				return edge.windCnt2 <= 0;
			default:
				return edge.windCnt2 >= 0;
			}
			break;
		case 2:
			if(edge.polyType == hxClipper_PolyType.PT_SUBJECT) {
				switch(pft2[1]) {
				case 0:case 1:
					return edge.windCnt2 == 0;
				case 2:
					return edge.windCnt2 <= 0;
				default:
					return edge.windCnt2 >= 0;
				}
			} else {
				switch(pft2[1]) {
				case 0:case 1:
					return edge.windCnt2 != 0;
				case 2:
					return edge.windCnt2 > 0;
				default:
					return edge.windCnt2 < 0;
				}
			}
			break;
		case 3:
			if(edge.windDelta == 0) {
				switch(pft2[1]) {
				case 0:case 1:
					return edge.windCnt2 == 0;
				case 2:
					return edge.windCnt2 <= 0;
				default:
					return edge.windCnt2 >= 0;
				}
			} else {
				return true;
			}
			break;
		}
	}
	,setWindingCount: function(edge) {
		var e = edge.prevInAEL;
		while(e != null && (e.polyType != edge.polyType || e.windDelta == 0)) e = e.prevInAEL;
		if(e == null) {
			if(edge.windDelta == 0) {
				edge.windCnt = (edge.polyType == hxClipper_PolyType.PT_SUBJECT ? this.mSubjFillType : this.mClipFillType) == hxClipper_PolyFillType.PFT_NEGATIVE ? -1 : 1;
			} else {
				edge.windCnt = edge.windDelta;
			}
			edge.windCnt2 = 0;
			e = this.mActiveEdges;
		} else if(edge.windDelta == 0 && this.mClipType != hxClipper_ClipType.CT_UNION) {
			edge.windCnt = 1;
			edge.windCnt2 = e.windCnt2;
			e = e.nextInAEL;
		} else if(this.isEvenOddFillType(edge)) {
			if(edge.windDelta == 0) {
				var inside = true;
				var e2 = e.prevInAEL;
				while(e2 != null) {
					if(e2.polyType == e.polyType && e2.windDelta != 0) {
						inside = !inside;
					}
					e2 = e2.prevInAEL;
				}
				edge.windCnt = inside ? 0 : 1;
			} else {
				edge.windCnt = edge.windDelta;
			}
			edge.windCnt2 = e.windCnt2;
			e = e.nextInAEL;
		} else {
			if(e.windCnt * e.windDelta < 0) {
				if(Math.abs(e.windCnt) > 1) {
					if(e.windDelta * edge.windDelta < 0) {
						edge.windCnt = e.windCnt;
					} else {
						edge.windCnt = e.windCnt + edge.windDelta;
					}
				} else {
					edge.windCnt = edge.windDelta == 0 ? 1 : edge.windDelta;
				}
			} else if(edge.windDelta == 0) {
				edge.windCnt = e.windCnt < 0 ? e.windCnt - 1 : e.windCnt + 1;
			} else if(e.windDelta * edge.windDelta < 0) {
				edge.windCnt = e.windCnt;
			} else {
				edge.windCnt = e.windCnt + edge.windDelta;
			}
			edge.windCnt2 = e.windCnt2;
			e = e.nextInAEL;
		}
		if(this.isEvenOddAltFillType(edge)) {
			while(e != edge) {
				if(e.windDelta != 0) {
					edge.windCnt2 = edge.windCnt2 == 0 ? 1 : 0;
				}
				e = e.nextInAEL;
			}
		} else {
			while(e != edge) {
				edge.windCnt2 += e.windDelta;
				e = e.nextInAEL;
			}
		}
	}
	,addEdgeToSEL: function(edge) {
		if(this.mSortedEdges == null) {
			this.mSortedEdges = edge;
			edge.prevInSEL = null;
			edge.nextInSEL = null;
		} else {
			edge.nextInSEL = this.mSortedEdges;
			edge.prevInSEL = null;
			this.mSortedEdges.prevInSEL = edge;
			this.mSortedEdges = edge;
		}
	}
	,popEdgeFromSEL: function() {
		var res = { popped : false, edge : null};
		res.edge = this.mSortedEdges;
		if(res.edge == null) {
			return res;
		}
		var oldE = res.edge;
		this.mSortedEdges = res.edge.nextInSEL;
		if(this.mSortedEdges != null) {
			this.mSortedEdges.prevInSEL = null;
		}
		oldE.nextInSEL = null;
		oldE.prevInSEL = null;
		res.popped = true;
		return res;
	}
	,copyAELToSEL: function() {
		var e = this.mActiveEdges;
		this.mSortedEdges = e;
		while(e != null) {
			e.prevInSEL = e.prevInAEL;
			e.nextInSEL = e.nextInAEL;
			e = e.nextInAEL;
		}
	}
	,swapPositionsInSEL: function(edge1,edge2) {
		if(edge1.nextInSEL == null && edge1.prevInSEL == null) {
			return;
		}
		if(edge2.nextInSEL == null && edge2.prevInSEL == null) {
			return;
		}
		if(edge1.nextInSEL == edge2) {
			var next = edge2.nextInSEL;
			if(next != null) {
				next.prevInSEL = edge1;
			}
			var prev = edge1.prevInSEL;
			if(prev != null) {
				prev.nextInSEL = edge2;
			}
			edge2.prevInSEL = prev;
			edge2.nextInSEL = edge1;
			edge1.prevInSEL = edge2;
			edge1.nextInSEL = next;
		} else if(edge2.nextInSEL == edge1) {
			var next1 = edge1.nextInSEL;
			if(next1 != null) {
				next1.prevInSEL = edge2;
			}
			var prev1 = edge2.prevInSEL;
			if(prev1 != null) {
				prev1.nextInSEL = edge1;
			}
			edge1.prevInSEL = prev1;
			edge1.nextInSEL = edge2;
			edge2.prevInSEL = edge1;
			edge2.nextInSEL = next1;
		} else {
			var next2 = edge1.nextInSEL;
			var prev2 = edge1.prevInSEL;
			edge1.nextInSEL = edge2.nextInSEL;
			if(edge1.nextInSEL != null) {
				edge1.nextInSEL.prevInSEL = edge1;
			}
			edge1.prevInSEL = edge2.prevInSEL;
			if(edge1.prevInSEL != null) {
				edge1.prevInSEL.nextInSEL = edge1;
			}
			edge2.nextInSEL = next2;
			if(edge2.nextInSEL != null) {
				edge2.nextInSEL.prevInSEL = edge2;
			}
			edge2.prevInSEL = prev2;
			if(edge2.prevInSEL != null) {
				edge2.prevInSEL.nextInSEL = edge2;
			}
		}
		if(edge1.prevInSEL == null) {
			this.mSortedEdges = edge1;
		} else if(edge2.prevInSEL == null) {
			this.mSortedEdges = edge2;
		}
	}
	,addLocalMaxPoly: function(e1,e2,pt) {
		this.addOutPt(e1,pt);
		if(e2.windDelta == 0) {
			this.addOutPt(e2,pt);
		}
		if(e1.outIdx == e2.outIdx) {
			e1.outIdx = -1;
			e2.outIdx = -1;
		} else if(e1.outIdx < e2.outIdx) {
			this.appendPolygon(e1,e2);
		} else {
			this.appendPolygon(e2,e1);
		}
	}
	,addLocalMinPoly: function(e1,e2,pt) {
		var result = null;
		var e;
		var prevE;
		if(hxClipper_ClipperBase.isHorizontal(e2) || e1.dx > e2.dx) {
			result = this.addOutPt(e1,pt);
			e2.outIdx = e1.outIdx;
			e1.side = hxClipper__$Clipper_EdgeSide.ES_LEFT;
			e2.side = hxClipper__$Clipper_EdgeSide.ES_RIGHT;
			e = e1;
			if(e1.prevInAEL == e2) {
				prevE = e2.prevInAEL;
			} else {
				prevE = e1.prevInAEL;
			}
		} else {
			result = this.addOutPt(e2,pt);
			e1.outIdx = e2.outIdx;
			e1.side = hxClipper__$Clipper_EdgeSide.ES_RIGHT;
			e2.side = hxClipper__$Clipper_EdgeSide.ES_LEFT;
			e = e2;
			if(e2.prevInAEL == e1) {
				prevE = e1.prevInAEL;
			} else {
				prevE = e2.prevInAEL;
			}
		}
		if(prevE != null && prevE.outIdx >= 0) {
			var xPrev = hxClipper_Clipper.topX(prevE,pt.y);
			var xE = hxClipper_Clipper.topX(e,pt.y);
			if(xPrev == xE && e.windDelta != 0 && prevE.windDelta != 0 && hxClipper_ClipperBase.slopesEqual4(new hxClipper_IntPoint(xPrev,pt.y),prevE.top,new hxClipper_IntPoint(xE,pt.y),e.top,this.mUseFullRange)) {
				this.addJoin(result,this.addOutPt(prevE,pt),e.top);
			}
		}
		return result;
	}
	,addOutPt: function(e,pt) {
		if(e.outIdx < 0) {
			var outRec = this.createOutRec();
			outRec.isOpen = e.windDelta == 0;
			var newOp = new hxClipper__$Clipper_OutPt();
			outRec.pts = newOp;
			newOp.idx = outRec.idx;
			newOp.pt.copyFrom(pt);
			newOp.next = newOp;
			newOp.prev = newOp;
			if(!outRec.isOpen) {
				this.setHoleState(e,outRec);
			}
			e.outIdx = outRec.idx;
			return newOp;
		} else {
			var outRec1 = this.mPolyOuts[e.outIdx];
			var op = outRec1.pts;
			var toFront = e.side == hxClipper__$Clipper_EdgeSide.ES_LEFT;
			if(toFront && pt.equals(op.pt)) {
				return op;
			} else if(!toFront && pt.equals(op.prev.pt)) {
				return op.prev;
			}
			var newOp1 = new hxClipper__$Clipper_OutPt();
			newOp1.idx = outRec1.idx;
			newOp1.pt.copyFrom(pt);
			newOp1.next = op;
			newOp1.prev = op.prev;
			newOp1.prev.next = newOp1;
			op.prev = newOp1;
			if(toFront) {
				outRec1.pts = newOp1;
			}
			return newOp1;
		}
	}
	,getLastOutPt: function(e) {
		var outRec = this.mPolyOuts[e.outIdx];
		if(e.side == hxClipper__$Clipper_EdgeSide.ES_LEFT) {
			return outRec.pts;
		} else {
			return outRec.pts.prev;
		}
	}
	,swapPoints: function(pt1,pt2) {
		var tmp = pt1.clone();
		pt1.copyFrom(pt2);
		pt2.copyFrom(tmp);
	}
	,horzSegmentsOverlap: function(seg1a,seg1b,seg2a,seg2b) {
		if(seg1a > seg1b) {
			var tmp = seg1a;
			seg1a = seg1b;
			seg1b = tmp;
		}
		if(seg2a > seg2b) {
			var tmp1 = seg2a;
			seg2a = seg2b;
			seg2b = tmp1;
		}
		if(seg1a < seg2b) {
			return seg2a < seg1b;
		} else {
			return false;
		}
	}
	,setHoleState: function(e,outRec) {
		var e2 = e.prevInAEL;
		var eTmp = null;
		while(e2 != null) {
			if(e2.outIdx >= 0 && e2.windDelta != 0) {
				if(eTmp == null) {
					eTmp = e2;
				} else if(eTmp.outIdx == e2.outIdx) {
					eTmp = null;
				}
			}
			e2 = e2.prevInAEL;
		}
		if(eTmp == null) {
			outRec.firstLeft = null;
			outRec.isHole = false;
		} else {
			outRec.firstLeft = this.mPolyOuts[eTmp.outIdx];
			outRec.isHole = !outRec.firstLeft.isHole;
		}
	}
	,getDx: function(pt1,pt2) {
		if(pt1.y == pt2.y) {
			return -3.4E+38;
		} else {
			return (pt2.x - pt1.x) / (pt2.y - pt1.y);
		}
	}
	,firstIsBottomPt: function(btmPt1,btmPt2) {
		var p = btmPt1.prev;
		while(p.pt.equals(btmPt1.pt) && p != btmPt1) p = p.prev;
		var dx1p = Math.abs(this.getDx(btmPt1.pt,p.pt));
		p = btmPt1.next;
		while(p.pt.equals(btmPt1.pt) && p != btmPt1) p = p.next;
		var dx1n = Math.abs(this.getDx(btmPt1.pt,p.pt));
		p = btmPt2.prev;
		while(p.pt.equals(btmPt2.pt) && p != btmPt2) p = p.prev;
		var dx2p = Math.abs(this.getDx(btmPt2.pt,p.pt));
		p = btmPt2.next;
		while(p.pt.equals(btmPt2.pt) && p != btmPt2) p = p.next;
		var dx2n = Math.abs(this.getDx(btmPt2.pt,p.pt));
		if(Math.max(dx1p,dx1n) == Math.max(dx2p,dx2n) && Math.min(dx1p,dx1n) == Math.min(dx2p,dx2n)) {
			return this.areaOfOutPt(btmPt1) > 0;
		} else if(!(dx1p >= dx2p && dx1p >= dx2n)) {
			if(dx1n >= dx2p) {
				return dx1n >= dx2n;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,getBottomPt: function(pp) {
		var dups = null;
		var p = pp.next;
		while(p != pp) {
			if(p.pt.y > pp.pt.y) {
				pp = p;
				dups = null;
			} else if(p.pt.y == pp.pt.y && p.pt.x <= pp.pt.x) {
				if(p.pt.x < pp.pt.x) {
					dups = null;
					pp = p;
				} else if(p.next != pp && p.prev != pp) {
					dups = p;
				}
			}
			p = p.next;
		}
		if(dups != null) {
			while(dups != p) {
				if(!this.firstIsBottomPt(p,dups)) {
					pp = dups;
				}
				dups = dups.next;
				while(!dups.pt.equals(pp.pt)) dups = dups.next;
			}
		}
		return pp;
	}
	,getLowermostRec: function(outRec1,outRec2) {
		if(outRec1.bottomPt == null) {
			outRec1.bottomPt = this.getBottomPt(outRec1.pts);
		}
		if(outRec2.bottomPt == null) {
			outRec2.bottomPt = this.getBottomPt(outRec2.pts);
		}
		var bPt1 = outRec1.bottomPt;
		var bPt2 = outRec2.bottomPt;
		if(bPt1.pt.y > bPt2.pt.y) {
			return outRec1;
		} else if(bPt1.pt.y < bPt2.pt.y) {
			return outRec2;
		} else if(bPt1.pt.x < bPt2.pt.x) {
			return outRec1;
		} else if(bPt1.pt.x > bPt2.pt.x) {
			return outRec2;
		} else if(bPt1.next == bPt1) {
			return outRec2;
		} else if(bPt2.next == bPt2) {
			return outRec1;
		} else if(this.firstIsBottomPt(bPt1,bPt2)) {
			return outRec1;
		} else {
			return outRec2;
		}
	}
	,outRec1RightOfOutRec2: function(outRec1,outRec2) {
		while(true) {
			outRec1 = outRec1.firstLeft;
			if(outRec1 == outRec2) {
				return true;
			}
			if(!(outRec1 != null)) {
				break;
			}
		}
		return false;
	}
	,getOutRec: function(idx) {
		var outrec = this.mPolyOuts[idx];
		while(outrec != this.mPolyOuts[outrec.idx]) outrec = this.mPolyOuts[outrec.idx];
		return outrec;
	}
	,appendPolygon: function(e1,e2) {
		var outRec1 = this.mPolyOuts[e1.outIdx];
		var outRec2 = this.mPolyOuts[e2.outIdx];
		var holeStateRec;
		if(this.outRec1RightOfOutRec2(outRec1,outRec2)) {
			holeStateRec = outRec2;
		} else if(this.outRec1RightOfOutRec2(outRec2,outRec1)) {
			holeStateRec = outRec1;
		} else {
			holeStateRec = this.getLowermostRec(outRec1,outRec2);
		}
		var p1_lft = outRec1.pts;
		var p1_rt = p1_lft.prev;
		var p2_lft = outRec2.pts;
		var p2_rt = p2_lft.prev;
		if(e1.side == hxClipper__$Clipper_EdgeSide.ES_LEFT) {
			if(e2.side == hxClipper__$Clipper_EdgeSide.ES_LEFT) {
				this.reversePolyPtLinks(p2_lft);
				p2_lft.next = p1_lft;
				p1_lft.prev = p2_lft;
				p1_rt.next = p2_rt;
				p2_rt.prev = p1_rt;
				outRec1.pts = p2_rt;
			} else {
				p2_rt.next = p1_lft;
				p1_lft.prev = p2_rt;
				p2_lft.prev = p1_rt;
				p1_rt.next = p2_lft;
				outRec1.pts = p2_lft;
			}
		} else if(e2.side == hxClipper__$Clipper_EdgeSide.ES_RIGHT) {
			this.reversePolyPtLinks(p2_lft);
			p1_rt.next = p2_rt;
			p2_rt.prev = p1_rt;
			p2_lft.next = p1_lft;
			p1_lft.prev = p2_lft;
		} else {
			p1_rt.next = p2_lft;
			p2_lft.prev = p1_rt;
			p1_lft.prev = p2_rt;
			p2_rt.next = p1_lft;
		}
		outRec1.bottomPt = null;
		if(holeStateRec == outRec2) {
			if(outRec2.firstLeft != outRec1) {
				outRec1.firstLeft = outRec2.firstLeft;
			}
			outRec1.isHole = outRec2.isHole;
		}
		outRec2.pts = null;
		outRec2.bottomPt = null;
		outRec2.firstLeft = outRec1;
		var OKIdx = e1.outIdx;
		var ObsoleteIdx = e2.outIdx;
		e1.outIdx = -1;
		e2.outIdx = -1;
		var e = this.mActiveEdges;
		while(e != null) {
			if(e.outIdx == ObsoleteIdx) {
				e.outIdx = OKIdx;
				e.side = e1.side;
				break;
			}
			e = e.nextInAEL;
		}
		outRec2.idx = outRec1.idx;
	}
	,reversePolyPtLinks: function(pp) {
		if(pp == null) {
			return;
		}
		var pp2;
		var pp1 = pp;
		while(true) {
			pp2 = pp1.next;
			pp1.next = pp1.prev;
			pp1.prev = pp2;
			pp1 = pp2;
			if(!(pp2 != pp)) {
				break;
			}
		}
	}
	,intersectEdges: function(e1,e2,pt) {
		var e1Contributing = e1.outIdx >= 0;
		var e2Contributing = e2.outIdx >= 0;
		if(e1.polyType == e2.polyType) {
			if(this.isEvenOddFillType(e1)) {
				var oldE1WindCnt = e1.windCnt;
				e1.windCnt = e2.windCnt;
				e2.windCnt = oldE1WindCnt;
			} else {
				if(e1.windCnt + e2.windDelta == 0) {
					e1.windCnt = -e1.windCnt;
				} else {
					e1.windCnt += e2.windDelta;
				}
				if(e2.windCnt - e1.windDelta == 0) {
					e2.windCnt = -e2.windCnt;
				} else {
					e2.windCnt -= e1.windDelta;
				}
			}
		} else {
			if(!this.isEvenOddFillType(e2)) {
				e1.windCnt2 += e2.windDelta;
			} else {
				e1.windCnt2 = e1.windCnt2 == 0 ? 1 : 0;
			}
			if(!this.isEvenOddFillType(e1)) {
				e2.windCnt2 -= e1.windDelta;
			} else {
				e2.windCnt2 = e2.windCnt2 == 0 ? 1 : 0;
			}
		}
		var e1FillType;
		var e2FillType;
		var e1FillType2;
		var e2FillType2;
		if(e1.polyType == hxClipper_PolyType.PT_SUBJECT) {
			e1FillType = this.mSubjFillType;
			e1FillType2 = this.mClipFillType;
		} else {
			e1FillType = this.mClipFillType;
			e1FillType2 = this.mSubjFillType;
		}
		if(e2.polyType == hxClipper_PolyType.PT_SUBJECT) {
			e2FillType = this.mSubjFillType;
			e2FillType2 = this.mClipFillType;
		} else {
			e2FillType = this.mClipFillType;
			e2FillType2 = this.mSubjFillType;
		}
		var e1Wc;
		var e2Wc;
		switch(e1FillType[1]) {
		case 2:
			e1Wc = e1.windCnt;
			break;
		case 3:
			e1Wc = -e1.windCnt;
			break;
		default:
			e1Wc = Math.abs(e1.windCnt) | 0;
		}
		switch(e2FillType[1]) {
		case 2:
			e2Wc = e2.windCnt;
			break;
		case 3:
			e2Wc = -e2.windCnt;
			break;
		default:
			e2Wc = Math.abs(e2.windCnt) | 0;
		}
		if(e1Contributing && e2Contributing) {
			if(e1Wc != 0 && e1Wc != 1 || e2Wc != 0 && e2Wc != 1 || e1.polyType != e2.polyType && this.mClipType != hxClipper_ClipType.CT_XOR) {
				this.addLocalMaxPoly(e1,e2,pt);
			} else {
				this.addOutPt(e1,pt);
				this.addOutPt(e2,pt);
				hxClipper_Clipper.swapSides(e1,e2);
				hxClipper_Clipper.swapPolyIndexes(e1,e2);
			}
		} else if(e1Contributing) {
			if(e2Wc == 0 || e2Wc == 1) {
				this.addOutPt(e1,pt);
				hxClipper_Clipper.swapSides(e1,e2);
				hxClipper_Clipper.swapPolyIndexes(e1,e2);
			}
		} else if(e2Contributing) {
			if(e1Wc == 0 || e1Wc == 1) {
				this.addOutPt(e2,pt);
				hxClipper_Clipper.swapSides(e1,e2);
				hxClipper_Clipper.swapPolyIndexes(e1,e2);
			}
		} else if((e1Wc == 0 || e1Wc == 1) && (e2Wc == 0 || e2Wc == 1)) {
			var e1Wc2;
			var e2Wc2;
			switch(e1FillType2[1]) {
			case 2:
				e1Wc2 = e1.windCnt2;
				break;
			case 3:
				e1Wc2 = -e1.windCnt2;
				break;
			default:
				e1Wc2 = Math.abs(e1.windCnt2) | 0;
			}
			switch(e2FillType2[1]) {
			case 2:
				e2Wc2 = e2.windCnt2;
				break;
			case 3:
				e2Wc2 = -e2.windCnt2;
				break;
			default:
				e2Wc2 = Math.abs(e2.windCnt2) | 0;
			}
			if(e1.polyType != e2.polyType) {
				this.addLocalMinPoly(e1,e2,pt);
			} else if(e1Wc == 1 && e2Wc == 1) {
				switch(this.mClipType[1]) {
				case 0:
					if(e1Wc2 > 0 && e2Wc2 > 0) {
						this.addLocalMinPoly(e1,e2,pt);
					}
					break;
				case 1:
					if(e1Wc2 <= 0 && e2Wc2 <= 0) {
						this.addLocalMinPoly(e1,e2,pt);
					}
					break;
				case 2:
					if(e1.polyType == hxClipper_PolyType.PT_CLIP && e1Wc2 > 0 && e2Wc2 > 0 || e1.polyType == hxClipper_PolyType.PT_SUBJECT && e1Wc2 <= 0 && e2Wc2 <= 0) {
						this.addLocalMinPoly(e1,e2,pt);
					}
					break;
				case 3:
					this.addLocalMinPoly(e1,e2,pt);
					break;
				}
			} else {
				hxClipper_Clipper.swapSides(e1,e2);
			}
		}
	}
	,deleteFromSEL: function(e) {
		var selPrev = e.prevInSEL;
		var selNext = e.nextInSEL;
		if(selPrev == null && selNext == null && e != this.mSortedEdges) {
			return;
		}
		if(selPrev != null) {
			selPrev.nextInSEL = selNext;
		} else {
			this.mSortedEdges = selNext;
		}
		if(selNext != null) {
			selNext.prevInSEL = selPrev;
		}
		e.nextInSEL = null;
		e.prevInSEL = null;
	}
	,processHorizontals: function() {
		var horzEdge = null;
		while(true) {
			var popRes = this.popEdgeFromSEL();
			horzEdge = popRes.edge;
			if(popRes.popped) {
				this.processHorizontal(horzEdge);
			} else {
				break;
			}
		}
	}
	,getHorzDirection: function(horzEdge,outParams) {
		if(horzEdge.bot.x < horzEdge.top.x) {
			outParams.left = horzEdge.bot.x;
			outParams.right = horzEdge.top.x;
			outParams.dir = hxClipper__$Clipper_Direction.D_LEFT_TO_RIGHT;
		} else {
			outParams.left = horzEdge.top.x;
			outParams.right = horzEdge.bot.x;
			outParams.dir = hxClipper__$Clipper_Direction.D_RIGHT_TO_LEFT;
		}
	}
	,processHorizontal: function(horzEdge) {
		var dir = null;
		var horzLeft = 0;
		var horzRight = 0;
		var isOpen = horzEdge.windDelta == 0;
		var outParams = { dir : dir, left : 0, right : 0};
		this.getHorzDirection(horzEdge,outParams);
		dir = outParams.dir;
		horzLeft = outParams.left;
		horzRight = outParams.right;
		var eLastHorz = horzEdge;
		var eMaxPair = null;
		while(eLastHorz.nextInLML != null && hxClipper_ClipperBase.isHorizontal(eLastHorz.nextInLML)) eLastHorz = eLastHorz.nextInLML;
		if(eLastHorz.nextInLML == null) {
			eMaxPair = this.getMaximaPair(eLastHorz);
		}
		var currMax = this.mMaxima;
		if(currMax != null) {
			if(dir == hxClipper__$Clipper_Direction.D_LEFT_TO_RIGHT) {
				while(currMax != null && currMax.x <= horzEdge.bot.x) currMax = currMax.next;
				if(currMax != null && currMax.x >= eLastHorz.top.x) {
					currMax = null;
				}
			} else {
				while(currMax.next != null && currMax.next.x < horzEdge.bot.x) currMax = currMax.next;
				if(currMax.x <= eLastHorz.top.x) {
					currMax = null;
				}
			}
		}
		var op1 = null;
		while(true) {
			var isLastHorz = horzEdge == eLastHorz;
			var e = this.getNextInAEL(horzEdge,dir);
			while(e != null) {
				if(currMax != null) {
					if(dir == hxClipper__$Clipper_Direction.D_LEFT_TO_RIGHT) {
						while(currMax != null && currMax.x < e.curr.x) {
							if(horzEdge.outIdx >= 0 && !isOpen) {
								this.addOutPt(horzEdge,new hxClipper_IntPoint(currMax.x,horzEdge.bot.y));
							}
							currMax = currMax.next;
						}
					} else {
						while(currMax != null && currMax.x > e.curr.x) {
							if(horzEdge.outIdx >= 0 && !isOpen) {
								this.addOutPt(horzEdge,new hxClipper_IntPoint(currMax.x,horzEdge.bot.y));
							}
							currMax = currMax.prev;
						}
					}
				}
				if(dir == hxClipper__$Clipper_Direction.D_LEFT_TO_RIGHT && e.curr.x > horzRight || dir == hxClipper__$Clipper_Direction.D_RIGHT_TO_LEFT && e.curr.x < horzLeft) {
					break;
				}
				if(e.curr.x == horzEdge.top.x && horzEdge.nextInLML != null && e.dx < horzEdge.nextInLML.dx) {
					break;
				}
				if(horzEdge.outIdx >= 0 && !isOpen) {
					op1 = this.addOutPt(horzEdge,e.curr);
					var eNextHorz = this.mSortedEdges;
					while(eNextHorz != null) {
						if(eNextHorz.outIdx >= 0 && this.horzSegmentsOverlap(horzEdge.bot.x,horzEdge.top.x,eNextHorz.bot.x,eNextHorz.top.x)) {
							this.addJoin(this.getLastOutPt(eNextHorz),op1,eNextHorz.top);
						}
						eNextHorz = eNextHorz.nextInSEL;
					}
					this.addGhostJoin(op1,horzEdge.bot);
				}
				if(e == eMaxPair && isLastHorz) {
					if(horzEdge.outIdx >= 0) {
						this.addLocalMaxPoly(horzEdge,eMaxPair,horzEdge.top);
					}
					this.deleteFromAEL(horzEdge);
					this.deleteFromAEL(eMaxPair);
					return;
				}
				if(dir == hxClipper__$Clipper_Direction.D_LEFT_TO_RIGHT) {
					this.intersectEdges(horzEdge,e,new hxClipper_IntPoint(e.curr.x,horzEdge.curr.y));
				} else {
					this.intersectEdges(e,horzEdge,new hxClipper_IntPoint(e.curr.x,horzEdge.curr.y));
				}
				var eNext = this.getNextInAEL(e,dir);
				this.swapPositionsInAEL(horzEdge,e);
				e = eNext;
			}
			if(horzEdge.nextInLML == null || !hxClipper_ClipperBase.isHorizontal(horzEdge.nextInLML)) {
				break;
			}
			horzEdge = this.updateEdgeIntoAEL(horzEdge);
			if(horzEdge.outIdx >= 0) {
				this.addOutPt(horzEdge,horzEdge.bot);
			}
			this.getHorzDirection(horzEdge,outParams);
			dir = outParams.dir;
			horzLeft = outParams.left;
			horzRight = outParams.right;
		}
		if(horzEdge.outIdx >= 0 && op1 == null) {
			op1 = this.getLastOutPt(horzEdge);
			var eNextHorz1 = this.mSortedEdges;
			while(eNextHorz1 != null) {
				if(eNextHorz1.outIdx >= 0 && this.horzSegmentsOverlap(horzEdge.bot.x,horzEdge.top.x,eNextHorz1.bot.x,eNextHorz1.top.x)) {
					this.addJoin(this.getLastOutPt(eNextHorz1),op1,eNextHorz1.top);
				}
				eNextHorz1 = eNextHorz1.nextInSEL;
			}
			this.addGhostJoin(op1,horzEdge.top);
		}
		if(horzEdge.nextInLML != null) {
			if(horzEdge.outIdx >= 0) {
				var op11 = this.addOutPt(horzEdge,horzEdge.top);
				horzEdge = this.updateEdgeIntoAEL(horzEdge);
				if(horzEdge.windDelta == 0) {
					return;
				}
				var ePrev = horzEdge.prevInAEL;
				var eNext1 = horzEdge.nextInAEL;
				if(ePrev != null && ePrev.curr.x == horzEdge.bot.x && ePrev.curr.y == horzEdge.bot.y && ePrev.windDelta != 0 && (ePrev.outIdx >= 0 && ePrev.curr.y > ePrev.top.y && hxClipper_ClipperBase.slopesEqual(horzEdge,ePrev,this.mUseFullRange))) {
					this.addJoin(op11,this.addOutPt(ePrev,horzEdge.bot),horzEdge.top);
				} else if(eNext1 != null && eNext1.curr.x == horzEdge.bot.x && eNext1.curr.y == horzEdge.bot.y && eNext1.windDelta != 0 && eNext1.outIdx >= 0 && eNext1.curr.y > eNext1.top.y && hxClipper_ClipperBase.slopesEqual(horzEdge,eNext1,this.mUseFullRange)) {
					this.addJoin(op11,this.addOutPt(eNext1,horzEdge.bot),horzEdge.top);
				}
			} else {
				horzEdge = this.updateEdgeIntoAEL(horzEdge);
			}
		} else {
			if(horzEdge.outIdx >= 0) {
				this.addOutPt(horzEdge,horzEdge.top);
			}
			this.deleteFromAEL(horzEdge);
		}
	}
	,getNextInAEL: function(e,direction) {
		if(direction == hxClipper__$Clipper_Direction.D_LEFT_TO_RIGHT) {
			return e.nextInAEL;
		} else {
			return e.prevInAEL;
		}
	}
	,isMinima: function(e) {
		if(e != null && e.prev.nextInLML != e) {
			return e.next.nextInLML != e;
		} else {
			return false;
		}
	}
	,isMaxima: function(e,y) {
		if(e != null && e.top.y == y) {
			return e.nextInLML == null;
		} else {
			return false;
		}
	}
	,isIntermediate: function(e,y) {
		if(e.top.y == y) {
			return e.nextInLML != null;
		} else {
			return false;
		}
	}
	,getMaximaPair: function(e) {
		if(e.next.top.equals(e.top) && e.next.nextInLML == null) {
			return e.next;
		} else if(e.prev.top.equals(e.top) && e.prev.nextInLML == null) {
			return e.prev;
		} else {
			return null;
		}
	}
	,getMaximaPairEx: function(e) {
		var result = this.getMaximaPair(e);
		if(result == null || result.outIdx == -2 || result.nextInAEL == result.prevInAEL && !hxClipper_ClipperBase.isHorizontal(result)) {
			return null;
		}
		return result;
	}
	,processIntersections: function(topY) {
		if(this.mActiveEdges == null) {
			return true;
		}
		try {
			this.buildIntersectList(topY);
			if(this.mIntersectList.length == 0) {
				return true;
			}
			if(this.mIntersectList.length == 1 || this.fixupIntersectionOrder()) {
				this.processIntersectList();
			} else {
				return false;
			}
		} catch( e ) {
			this.mSortedEdges = null;
			this.mIntersectList.length = 0;
			throw new js__$Boot_HaxeError(new hxClipper_ClipperException("ProcessIntersections error"));
		}
		this.mSortedEdges = null;
		return true;
	}
	,buildIntersectList: function(topY) {
		if(this.mActiveEdges == null) {
			return;
		}
		var e = this.mActiveEdges;
		this.mSortedEdges = e;
		while(e != null) {
			e.prevInSEL = e.prevInAEL;
			e.nextInSEL = e.nextInAEL;
			e.curr.x = hxClipper_Clipper.topX(e,topY);
			e = e.nextInAEL;
		}
		var isModified = true;
		while(isModified && this.mSortedEdges != null) {
			isModified = false;
			e = this.mSortedEdges;
			while(e.nextInSEL != null) {
				var eNext = e.nextInSEL;
				var pt = new hxClipper_IntPoint();
				if(e.curr.x > eNext.curr.x) {
					this.intersectPoint(e,eNext,pt);
					if(pt.y < topY) {
						pt = new hxClipper_IntPoint(hxClipper_Clipper.topX(e,topY),topY);
					}
					var newNode = new hxClipper_IntersectNode();
					newNode.edge1 = e;
					newNode.edge2 = eNext;
					newNode.pt.copyFrom(pt);
					this.mIntersectList.push(newNode);
					this.swapPositionsInSEL(e,eNext);
					isModified = true;
				} else {
					e = eNext;
				}
			}
			if(e.prevInSEL != null) {
				e.prevInSEL.nextInSEL = null;
			} else {
				break;
			}
		}
		this.mSortedEdges = null;
	}
	,edgesAdjacent: function(inode) {
		if(inode.edge1.nextInSEL != inode.edge2) {
			return inode.edge1.prevInSEL == inode.edge2;
		} else {
			return true;
		}
	}
	,fixupIntersectionOrder: function() {
		haxe_ds_ArraySort.sort(this.mIntersectList,this.mIntersectNodeComparer);
		this.copyAELToSEL();
		var cnt = this.mIntersectList.length;
		var _g1 = 0;
		while(_g1 < cnt) {
			var i = _g1++;
			if(!this.edgesAdjacent(this.mIntersectList[i])) {
				var j = i + 1;
				while(j < cnt && !this.edgesAdjacent(this.mIntersectList[j])) ++j;
				if(j == cnt) {
					return false;
				}
				var tmp = this.mIntersectList[i];
				this.mIntersectList[i] = this.mIntersectList[j];
				this.mIntersectList[j] = tmp;
			}
			this.swapPositionsInSEL(this.mIntersectList[i].edge1,this.mIntersectList[i].edge2);
		}
		return true;
	}
	,processIntersectList: function() {
		var _g1 = 0;
		var _g = this.mIntersectList.length;
		while(_g1 < _g) {
			var iNode = this.mIntersectList[_g1++];
			this.intersectEdges(iNode.edge1,iNode.edge2,iNode.pt);
			this.swapPositionsInAEL(iNode.edge1,iNode.edge2);
		}
		this.mIntersectList.length = 0;
	}
	,intersectPoint: function(edge1,edge2,ip) {
		var b1;
		var b2;
		if(edge1.dx == edge2.dx) {
			ip.y = edge1.curr.y;
			ip.x = hxClipper_Clipper.topX(edge1,ip.y);
			return;
		}
		if(edge1.delta.x == 0) {
			ip.x = edge1.bot.x;
			if(hxClipper_ClipperBase.isHorizontal(edge2)) {
				ip.y = edge2.bot.y;
			} else {
				b2 = edge2.bot.y - edge2.bot.x / edge2.dx;
				ip.y = hxClipper_Clipper.round(ip.x / edge2.dx + b2);
			}
		} else if(edge2.delta.x == 0) {
			ip.x = edge2.bot.x;
			if(hxClipper_ClipperBase.isHorizontal(edge1)) {
				ip.y = edge1.bot.y;
			} else {
				b1 = edge1.bot.y - edge1.bot.x / edge1.dx;
				ip.y = hxClipper_Clipper.round(ip.x / edge1.dx + b1);
			}
		} else {
			b1 = edge1.bot.x - edge1.bot.y * edge1.dx;
			b2 = edge2.bot.x - edge2.bot.y * edge2.dx;
			var q = (b2 - b1) / (edge1.dx - edge2.dx);
			ip.y = hxClipper_Clipper.round(q);
			if(Math.abs(edge1.dx) < Math.abs(edge2.dx)) {
				ip.x = hxClipper_Clipper.round(edge1.dx * q + b1);
			} else {
				ip.x = hxClipper_Clipper.round(edge2.dx * q + b2);
			}
		}
		if(ip.y < edge1.top.y || ip.y < edge2.top.y) {
			if(edge1.top.y > edge2.top.y) {
				ip.y = edge1.top.y;
			} else {
				ip.y = edge2.top.y;
			}
			if(Math.abs(edge1.dx) < Math.abs(edge2.dx)) {
				ip.x = hxClipper_Clipper.topX(edge1,ip.y);
			} else {
				ip.x = hxClipper_Clipper.topX(edge2,ip.y);
			}
		}
		if(ip.y > edge1.curr.y) {
			ip.y = edge1.curr.y;
			if(Math.abs(edge1.dx) > Math.abs(edge2.dx)) {
				ip.x = hxClipper_Clipper.topX(edge2,ip.y);
			} else {
				ip.x = hxClipper_Clipper.topX(edge1,ip.y);
			}
		}
	}
	,processEdgesAtTopOfScanbeam: function(topY) {
		var e = this.mActiveEdges;
		while(e != null) {
			var isMaximaEdge = this.isMaxima(e,topY);
			if(isMaximaEdge) {
				var eMaxPair = this.getMaximaPairEx(e);
				isMaximaEdge = eMaxPair == null || !hxClipper_ClipperBase.isHorizontal(eMaxPair);
			}
			if(isMaximaEdge) {
				if(this.strictlySimple) {
					this.insertMaxima(e.top.x);
				}
				var ePrev = e.prevInAEL;
				this.doMaxima(e);
				if(ePrev == null) {
					e = this.mActiveEdges;
				} else {
					e = ePrev.nextInAEL;
				}
			} else {
				if(this.isIntermediate(e,topY) && hxClipper_ClipperBase.isHorizontal(e.nextInLML)) {
					e = this.updateEdgeIntoAEL(e);
					if(e.outIdx >= 0) {
						this.addOutPt(e,e.bot);
					}
					this.addEdgeToSEL(e);
				} else {
					e.curr.x = hxClipper_Clipper.topX(e,topY);
					e.curr.y = topY;
				}
				if(this.strictlySimple) {
					var ePrev1 = e.prevInAEL;
					if(e.outIdx >= 0 && e.windDelta != 0 && ePrev1 != null && ePrev1.outIdx >= 0 && ePrev1.curr.x == e.curr.x && ePrev1.windDelta != 0) {
						var ip = e.curr.clone();
						this.addJoin(this.addOutPt(ePrev1,ip),this.addOutPt(e,ip),ip);
					}
				}
				e = e.nextInAEL;
			}
		}
		this.processHorizontals();
		this.mMaxima = null;
		e = this.mActiveEdges;
		while(e != null) {
			if(this.isIntermediate(e,topY)) {
				var op = null;
				if(e.outIdx >= 0) {
					op = this.addOutPt(e,e.top);
				}
				e = this.updateEdgeIntoAEL(e);
				var ePrev2 = e.prevInAEL;
				var eNext = e.nextInAEL;
				if(ePrev2 != null && ePrev2.curr.x == e.bot.x && ePrev2.curr.y == e.bot.y && op != null && ePrev2.outIdx >= 0 && ePrev2.curr.y > ePrev2.top.y && hxClipper_ClipperBase.slopesEqual4(e.curr,e.top,ePrev2.curr,ePrev2.top,this.mUseFullRange) && e.windDelta != 0 && ePrev2.windDelta != 0) {
					this.addJoin(op,this.addOutPt(ePrev2,e.bot),e.top);
				} else if(eNext != null && eNext.curr.x == e.bot.x && eNext.curr.y == e.bot.y && op != null && eNext.outIdx >= 0 && eNext.curr.y > eNext.top.y && hxClipper_ClipperBase.slopesEqual4(e.curr,e.top,eNext.curr,eNext.top,this.mUseFullRange) && e.windDelta != 0 && eNext.windDelta != 0) {
					this.addJoin(op,this.addOutPt(eNext,e.bot),e.top);
				}
			}
			e = e.nextInAEL;
		}
	}
	,doMaxima: function(e) {
		var eMaxPair = this.getMaximaPairEx(e);
		if(eMaxPair == null) {
			if(e.outIdx >= 0) {
				this.addOutPt(e,e.top);
			}
			this.deleteFromAEL(e);
			return;
		}
		var eNext = e.nextInAEL;
		while(eNext != null && eNext != eMaxPair) {
			this.intersectEdges(e,eNext,e.top);
			this.swapPositionsInAEL(e,eNext);
			eNext = e.nextInAEL;
		}
		if(e.outIdx == -1 && eMaxPair.outIdx == -1) {
			this.deleteFromAEL(e);
			this.deleteFromAEL(eMaxPair);
		} else if(e.outIdx >= 0 && eMaxPair.outIdx >= 0) {
			if(e.outIdx >= 0) {
				this.addLocalMaxPoly(e,eMaxPair,e.top);
			}
			this.deleteFromAEL(e);
			this.deleteFromAEL(eMaxPair);
		} else {
			throw new js__$Boot_HaxeError(new hxClipper_ClipperException("DoMaxima error"));
		}
	}
	,pointCount: function(pts) {
		if(pts == null) {
			return 0;
		}
		var result = 0;
		var p = pts;
		while(true) {
			++result;
			p = p.next;
			if(!(p != pts)) {
				break;
			}
		}
		return result;
	}
	,buildResult: function(polyg) {
		polyg.length = 0;
		var _g1 = 0;
		var _g = this.mPolyOuts.length;
		while(_g1 < _g) {
			var outRec = this.mPolyOuts[_g1++];
			if(outRec.pts == null) {
				continue;
			}
			var p = outRec.pts.prev;
			var cnt = this.pointCount(p);
			if(cnt < 2) {
				continue;
			}
			var pg = [];
			var _g3 = 0;
			while(_g3 < cnt) {
				++_g3;
				pg.push(p.pt);
				p = p.prev;
			}
			polyg.push(pg);
		}
	}
	,buildResult2: function(polytree) {
		polytree.clear();
		var _g1 = 0;
		var _g = this.mPolyOuts.length;
		while(_g1 < _g) {
			var outRec = this.mPolyOuts[_g1++];
			var cnt = this.pointCount(outRec.pts);
			if(outRec.isOpen && cnt < 2 || !outRec.isOpen && cnt < 3) {
				continue;
			}
			this.fixHoleLinkage(outRec);
			var pn = new hxClipper_PolyNode();
			polytree.mAllPolys.push(pn);
			outRec.polyNode = pn;
			var op = outRec.pts.prev;
			var _g3 = 0;
			while(_g3 < cnt) {
				++_g3;
				pn.mPolygon.push(op.pt);
				op = op.prev;
			}
		}
		var _g11 = 0;
		var _g2 = this.mPolyOuts.length;
		while(_g11 < _g2) {
			var outRec1 = this.mPolyOuts[_g11++];
			if(outRec1.polyNode == null) {
				continue;
			} else if(outRec1.isOpen) {
				outRec1.polyNode.isOpen = true;
				polytree.addChild(outRec1.polyNode);
			} else if(outRec1.firstLeft != null && outRec1.firstLeft.polyNode != null) {
				outRec1.firstLeft.polyNode.addChild(outRec1.polyNode);
			} else {
				polytree.addChild(outRec1.polyNode);
			}
		}
	}
	,fixupOutPolyLine: function(outrec) {
		var pp = outrec.pts;
		var lastPP = pp.prev;
		while(pp != lastPP) {
			pp = pp.next;
			if(pp.pt == pp.prev.pt) {
				if(pp == lastPP) {
					lastPP = pp.prev;
				}
				var tmpPP = pp.prev;
				tmpPP.next = pp.next;
				pp.next.prev = tmpPP;
				pp = tmpPP;
			}
		}
		if(pp == pp.prev) {
			outrec.pts = null;
		}
	}
	,fixupOutPolygon: function(outRec) {
		var lastOK = null;
		outRec.bottomPt = null;
		var pp = outRec.pts;
		var preserveCol = this.preserveCollinear || this.strictlySimple;
		while(true) {
			if(pp.prev == pp || pp.prev == pp.next) {
				outRec.pts = null;
				return;
			}
			if(pp.pt.equals(pp.next.pt) || pp.pt.equals(pp.prev.pt) || hxClipper_ClipperBase.slopesEqual3(pp.prev.pt,pp.pt,pp.next.pt,this.mUseFullRange) && (!preserveCol || !this.pt2IsBetweenPt1AndPt3(pp.prev.pt,pp.pt,pp.next.pt))) {
				lastOK = null;
				pp.prev.next = pp.next;
				pp.next.prev = pp.prev;
				pp = pp.prev;
			} else if(pp == lastOK) {
				break;
			} else {
				if(lastOK == null) {
					lastOK = pp;
				}
				pp = pp.next;
			}
		}
		outRec.pts = pp;
	}
	,dupOutPt: function(outPt,insertAfter) {
		var result = new hxClipper__$Clipper_OutPt();
		result.pt.copyFrom(outPt.pt);
		result.idx = outPt.idx;
		if(insertAfter) {
			result.next = outPt.next;
			result.prev = outPt;
			outPt.next.prev = result;
			outPt.next = result;
		} else {
			result.prev = outPt.prev;
			result.next = outPt;
			outPt.prev.next = result;
			outPt.prev = result;
		}
		return result;
	}
	,getOverlap: function(a1,a2,b1,b2,outParams) {
		if(a1 < a2) {
			if(b1 < b2) {
				outParams.left = Math.max(a1,b1) | 0;
				outParams.right = Math.min(a2,b2) | 0;
			} else {
				outParams.left = Math.max(a1,b2) | 0;
				outParams.right = Math.min(a2,b1) | 0;
			}
		} else if(b1 < b2) {
			outParams.left = Math.max(a2,b1) | 0;
			outParams.right = Math.min(a1,b2) | 0;
		} else {
			outParams.left = Math.max(a2,b2) | 0;
			outParams.right = Math.min(a1,b1) | 0;
		}
		return outParams.left < outParams.right;
	}
	,joinHorz: function(op1,op1b,op2,op2b,pt,discardLeft) {
		var dir1 = op1.pt.x > op1b.pt.x ? hxClipper__$Clipper_Direction.D_RIGHT_TO_LEFT : hxClipper__$Clipper_Direction.D_LEFT_TO_RIGHT;
		var dir2 = op2.pt.x > op2b.pt.x ? hxClipper__$Clipper_Direction.D_RIGHT_TO_LEFT : hxClipper__$Clipper_Direction.D_LEFT_TO_RIGHT;
		if(dir1 == dir2) {
			return false;
		}
		if(dir1 == hxClipper__$Clipper_Direction.D_LEFT_TO_RIGHT) {
			while(op1.next.pt.x <= pt.x && op1.next.pt.x >= op1.pt.x && op1.next.pt.y == pt.y) op1 = op1.next;
			if(discardLeft && op1.pt.x != pt.x) {
				op1 = op1.next;
			}
			op1b = this.dupOutPt(op1,!discardLeft);
			if(!op1b.pt.equals(pt)) {
				op1 = op1b;
				op1.pt.copyFrom(pt);
				op1b = this.dupOutPt(op1,!discardLeft);
			}
		} else {
			while(op1.next.pt.x >= pt.x && op1.next.pt.x <= op1.pt.x && op1.next.pt.y == pt.y) op1 = op1.next;
			if(!discardLeft && op1.pt.x != pt.x) {
				op1 = op1.next;
			}
			op1b = this.dupOutPt(op1,discardLeft);
			if(!op1b.pt.equals(pt)) {
				op1 = op1b;
				op1.pt.copyFrom(pt);
				op1b = this.dupOutPt(op1,discardLeft);
			}
		}
		if(dir2 == hxClipper__$Clipper_Direction.D_LEFT_TO_RIGHT) {
			while(op2.next.pt.x <= pt.x && op2.next.pt.x >= op2.pt.x && op2.next.pt.y == pt.y) op2 = op2.next;
			if(discardLeft && op2.pt.x != pt.x) {
				op2 = op2.next;
			}
			op2b = this.dupOutPt(op2,!discardLeft);
			if(!op2b.pt.equals(pt)) {
				op2 = op2b;
				op2.pt.copyFrom(pt);
				op2b = this.dupOutPt(op2,!discardLeft);
			}
		} else {
			while(op2.next.pt.x >= pt.x && op2.next.pt.x <= op2.pt.x && op2.next.pt.y == pt.y) op2 = op2.next;
			if(!discardLeft && op2.pt.x != pt.x) {
				op2 = op2.next;
			}
			op2b = this.dupOutPt(op2,discardLeft);
			if(!op2b.pt.equals(pt)) {
				op2 = op2b;
				op2.pt.copyFrom(pt);
				op2b = this.dupOutPt(op2,discardLeft);
			}
		}
		if(dir1 == hxClipper__$Clipper_Direction.D_LEFT_TO_RIGHT == discardLeft) {
			op1.prev = op2;
			op2.next = op1;
			op1b.next = op2b;
			op2b.prev = op1b;
		} else {
			op1.next = op2;
			op2.prev = op1;
			op1b.prev = op2b;
			op2b.next = op1b;
		}
		return true;
	}
	,joinPoints: function(j,outRec1,outRec2) {
		var op1 = j.outPt1;
		var op1b;
		var op2 = j.outPt2;
		var op2b;
		var isHorizontal = j.outPt1.pt.y == j.offPt.y;
		if(isHorizontal && j.offPt.equals(j.outPt1.pt) && j.offPt.equals(j.outPt2.pt)) {
			if(outRec1 != outRec2) {
				return false;
			}
			op1b = j.outPt1.next;
			while(op1b != op1 && op1b.pt.equals(j.offPt)) op1b = op1b.next;
			var reverse1 = op1b.pt.y > j.offPt.y;
			op2b = j.outPt2.next;
			while(op2b != op2 && op2b.pt.equals(j.offPt)) op2b = op2b.next;
			if(reverse1 == op2b.pt.y > j.offPt.y) {
				return false;
			}
			if(reverse1) {
				op1b = this.dupOutPt(op1,false);
				op2b = this.dupOutPt(op2,true);
				op1.prev = op2;
				op2.next = op1;
				op1b.next = op2b;
				op2b.prev = op1b;
				j.outPt1 = op1;
				j.outPt2 = op1b;
				return true;
			} else {
				op1b = this.dupOutPt(op1,true);
				op2b = this.dupOutPt(op2,false);
				op1.next = op2;
				op2.prev = op1;
				op1b.prev = op2b;
				op2b.next = op1b;
				j.outPt1 = op1;
				j.outPt2 = op1b;
				return true;
			}
		} else if(isHorizontal) {
			op1b = op1;
			while(op1.prev.pt.y == op1.pt.y && op1.prev != op1b && op1.prev != op2) op1 = op1.prev;
			while(op1b.next.pt.y == op1b.pt.y && op1b.next != op1 && op1b.next != op2) op1b = op1b.next;
			if(op1b.next == op1 || op1b.next == op2) {
				return false;
			}
			op2b = op2;
			while(op2.prev.pt.y == op2.pt.y && op2.prev != op2b && op2.prev != op1b) op2 = op2.prev;
			while(op2b.next.pt.y == op2b.pt.y && op2b.next != op2 && op2b.next != op1) op2b = op2b.next;
			if(op2b.next == op2 || op2b.next == op1) {
				return false;
			}
			var left = 0;
			var right = 0;
			var outParams = { left : 0, right : 0};
			if(!this.getOverlap(op1.pt.x,op1b.pt.x,op2.pt.x,op2b.pt.x,outParams)) {
				return false;
			}
			left = outParams.left;
			right = outParams.right;
			var pt = new hxClipper_IntPoint();
			var discardLeftSide;
			if(op1.pt.x >= left && op1.pt.x <= right) {
				pt.copyFrom(op1.pt);
				discardLeftSide = op1.pt.x > op1b.pt.x;
			} else if(op2.pt.x >= left && op2.pt.x <= right) {
				pt.copyFrom(op2.pt);
				discardLeftSide = op2.pt.x > op2b.pt.x;
			} else if(op1b.pt.x >= left && op1b.pt.x <= right) {
				pt.copyFrom(op1b.pt);
				discardLeftSide = op1b.pt.x > op1.pt.x;
			} else {
				pt.copyFrom(op2b.pt);
				discardLeftSide = op2b.pt.x > op2.pt.x;
			}
			j.outPt1 = op1;
			j.outPt2 = op2;
			return this.joinHorz(op1,op1b,op2,op2b,pt,discardLeftSide);
		} else {
			op1b = op1.next;
			while(op1b.pt.equals(op1.pt) && op1b != op1) op1b = op1b.next;
			var reverse11 = op1b.pt.y > op1.pt.y || !hxClipper_ClipperBase.slopesEqual3(op1.pt,op1b.pt,j.offPt,this.mUseFullRange);
			if(reverse11) {
				op1b = op1.prev;
				while(op1b.pt.equals(op1.pt) && op1b != op1) op1b = op1b.prev;
				if(op1b.pt.y > op1.pt.y || !hxClipper_ClipperBase.slopesEqual3(op1.pt,op1b.pt,j.offPt,this.mUseFullRange)) {
					return false;
				}
			}
			op2b = op2.next;
			while(op2b.pt.equals(op2.pt) && op2b != op2) op2b = op2b.next;
			var reverse2 = op2b.pt.y > op2.pt.y || !hxClipper_ClipperBase.slopesEqual3(op2.pt,op2b.pt,j.offPt,this.mUseFullRange);
			if(reverse2) {
				op2b = op2.prev;
				while(op2b.pt.equals(op2.pt) && op2b != op2) op2b = op2b.prev;
				if(op2b.pt.y > op2.pt.y || !hxClipper_ClipperBase.slopesEqual3(op2.pt,op2b.pt,j.offPt,this.mUseFullRange)) {
					return false;
				}
			}
			if(op1b == op1 || op2b == op2 || op1b == op2b || outRec1 == outRec2 && reverse11 == reverse2) {
				return false;
			}
			if(reverse11) {
				op1b = this.dupOutPt(op1,false);
				op2b = this.dupOutPt(op2,true);
				op1.prev = op2;
				op2.next = op1;
				op1b.next = op2b;
				op2b.prev = op1b;
				j.outPt1 = op1;
				j.outPt2 = op1b;
				return true;
			} else {
				op1b = this.dupOutPt(op1,true);
				op2b = this.dupOutPt(op2,false);
				op1.next = op2;
				op2.prev = op1;
				op1b.prev = op2b;
				op2b.next = op1b;
				j.outPt1 = op1;
				j.outPt2 = op1b;
				return true;
			}
		}
	}
	,fixupFirstLefts1: function(oldOutRec,newOutRec) {
		var _g1 = 0;
		var _g = this.mPolyOuts.length;
		while(_g1 < _g) {
			var outRec = this.mPolyOuts[_g1++];
			if(outRec.pts != null && hxClipper_Clipper.parseFirstLeft(outRec.firstLeft) == oldOutRec) {
				if(hxClipper_Clipper.poly2ContainsPoly1(outRec.pts,newOutRec.pts)) {
					outRec.firstLeft = newOutRec;
				}
			}
		}
	}
	,fixupFirstLefts2: function(innerOutRec,outerOutRec) {
		var orfl = outerOutRec.firstLeft;
		var _g = 0;
		var _g1 = this.mPolyOuts;
		while(_g < _g1.length) {
			var outRec = _g1[_g];
			++_g;
			if(outRec.pts == null || outRec == outerOutRec || outRec == innerOutRec) {
				continue;
			}
			var firstLeft = hxClipper_Clipper.parseFirstLeft(outRec.firstLeft);
			if(firstLeft != orfl && firstLeft != innerOutRec && firstLeft != outerOutRec) {
				continue;
			}
			if(hxClipper_Clipper.poly2ContainsPoly1(outRec.pts,innerOutRec.pts)) {
				outRec.firstLeft = innerOutRec;
			} else if(hxClipper_Clipper.poly2ContainsPoly1(outRec.pts,outerOutRec.pts)) {
				outRec.firstLeft = outerOutRec;
			} else if(outRec.firstLeft == innerOutRec || outRec.firstLeft == outerOutRec) {
				outRec.firstLeft = orfl;
			}
		}
	}
	,fixupFirstLefts3: function(oldOutRec,newOutRec) {
		var _g = 0;
		var _g1 = this.mPolyOuts;
		while(_g < _g1.length) {
			var outRec = _g1[_g];
			++_g;
			if(outRec.pts != null && hxClipper_Clipper.parseFirstLeft(outRec.firstLeft) == oldOutRec) {
				outRec.firstLeft = newOutRec;
			}
		}
	}
	,joinCommonEdges: function() {
		var _g1 = 0;
		var _g = this.mJoins.length;
		while(_g1 < _g) {
			var join = this.mJoins[_g1++];
			var outRec1 = this.getOutRec(join.outPt1.idx);
			var outRec2 = this.getOutRec(join.outPt2.idx);
			if(outRec1.pts == null || outRec2.pts == null) {
				continue;
			}
			if(outRec1.isOpen || outRec2.isOpen) {
				continue;
			}
			var holeStateRec;
			if(outRec1 == outRec2) {
				holeStateRec = outRec1;
			} else if(this.outRec1RightOfOutRec2(outRec1,outRec2)) {
				holeStateRec = outRec2;
			} else if(this.outRec1RightOfOutRec2(outRec2,outRec1)) {
				holeStateRec = outRec1;
			} else {
				holeStateRec = this.getLowermostRec(outRec1,outRec2);
			}
			if(!this.joinPoints(join,outRec1,outRec2)) {
				continue;
			}
			if(outRec1 == outRec2) {
				outRec1.pts = join.outPt1;
				outRec1.bottomPt = null;
				outRec2 = this.createOutRec();
				outRec2.pts = join.outPt2;
				this.updateOutPtIdxs(outRec2);
				if(hxClipper_Clipper.poly2ContainsPoly1(outRec2.pts,outRec1.pts)) {
					outRec2.isHole = !outRec1.isHole;
					outRec2.firstLeft = outRec1;
					if(this.mUsingPolyTree) {
						this.fixupFirstLefts2(outRec2,outRec1);
					}
					var a = outRec2.isHole;
					var b = this.reverseSolution;
					if((a && !b || b && !a) == this.areaOfOutRec(outRec2) > 0) {
						this.reversePolyPtLinks(outRec2.pts);
					}
				} else if(hxClipper_Clipper.poly2ContainsPoly1(outRec1.pts,outRec2.pts)) {
					outRec2.isHole = outRec1.isHole;
					outRec1.isHole = !outRec2.isHole;
					outRec2.firstLeft = outRec1.firstLeft;
					outRec1.firstLeft = outRec2;
					if(this.mUsingPolyTree) {
						this.fixupFirstLefts2(outRec1,outRec2);
					}
					var a1 = outRec1.isHole;
					var b1 = this.reverseSolution;
					if((a1 && !b1 || b1 && !a1) == this.areaOfOutRec(outRec1) > 0) {
						this.reversePolyPtLinks(outRec1.pts);
					}
				} else {
					outRec2.isHole = outRec1.isHole;
					outRec2.firstLeft = outRec1.firstLeft;
					if(this.mUsingPolyTree) {
						this.fixupFirstLefts1(outRec1,outRec2);
					}
				}
			} else {
				outRec2.pts = null;
				outRec2.bottomPt = null;
				outRec2.idx = outRec1.idx;
				outRec1.isHole = holeStateRec.isHole;
				if(holeStateRec == outRec2) {
					outRec1.firstLeft = outRec2.firstLeft;
				}
				outRec2.firstLeft = outRec1;
				if(this.mUsingPolyTree) {
					this.fixupFirstLefts3(outRec2,outRec1);
				}
			}
		}
	}
	,updateOutPtIdxs: function(outrec) {
		var op = outrec.pts;
		while(true) {
			op.idx = outrec.idx;
			op = op.prev;
			if(!(op != outrec.pts)) {
				break;
			}
		}
	}
	,doSimplePolygons: function() {
		var i = 0;
		while(i < this.mPolyOuts.length) {
			var outrec = this.mPolyOuts[i++];
			var op = outrec.pts;
			if(op == null || outrec.isOpen) {
				continue;
			}
			while(true) {
				var op2 = op.next;
				while(op2 != outrec.pts) {
					if(op.pt.equals(op2.pt) && op2.next != op && op2.prev != op) {
						var op3 = op.prev;
						var op4 = op2.prev;
						op.prev = op4;
						op4.next = op;
						op2.prev = op3;
						op3.next = op2;
						outrec.pts = op;
						var outrec2 = this.createOutRec();
						outrec2.pts = op2;
						this.updateOutPtIdxs(outrec2);
						if(hxClipper_Clipper.poly2ContainsPoly1(outrec2.pts,outrec.pts)) {
							outrec2.isHole = !outrec.isHole;
							outrec2.firstLeft = outrec;
							if(this.mUsingPolyTree) {
								this.fixupFirstLefts2(outrec2,outrec);
							}
						} else if(hxClipper_Clipper.poly2ContainsPoly1(outrec.pts,outrec2.pts)) {
							outrec2.isHole = outrec.isHole;
							outrec.isHole = !outrec2.isHole;
							outrec2.firstLeft = outrec.firstLeft;
							outrec.firstLeft = outrec2;
							if(this.mUsingPolyTree) {
								this.fixupFirstLefts2(outrec,outrec2);
							}
						} else {
							outrec2.isHole = outrec.isHole;
							outrec2.firstLeft = outrec.firstLeft;
							if(this.mUsingPolyTree) {
								this.fixupFirstLefts1(outrec,outrec2);
							}
						}
						op2 = op;
					}
					op2 = op2.next;
				}
				op = op.next;
				if(!(op != outrec.pts)) {
					break;
				}
			}
		}
	}
	,areaOfOutRec: function(outRec) {
		return this.areaOfOutPt(outRec.pts);
	}
	,areaOfOutPt: function(op) {
		var opFirst = op;
		if(op == null) {
			return 0;
		}
		var a = 0;
		while(true) {
			a += (op.prev.pt.x + op.pt.x) * (op.prev.pt.y - op.pt.y);
			op = op.next;
			if(!(op != opFirst)) {
				break;
			}
		}
		return a * 0.5;
	}
});
var hxClipper_ClipperOffset = function(miterLimit,arcTolerance) {
	if(arcTolerance == null) {
		arcTolerance = 0.25;
	}
	if(miterLimit == null) {
		miterLimit = 2.0;
	}
	this.mPolyNodes = new hxClipper_PolyNode();
	this.mLowest = new hxClipper_IntPoint();
	this.mNormals = [];
	this.miterLimit = miterLimit;
	this.arcTolerance = arcTolerance;
	this.mLowest.x = -1;
};
hxClipper_ClipperOffset.__name__ = true;
hxClipper_ClipperOffset.round = function(value) {
	return hxClipper_Clipper.round(value);
};
hxClipper_ClipperOffset.getUnitNormal = function(pt1,pt2) {
	var dx = pt2.x - pt1.x;
	var dy = pt2.y - pt1.y;
	if(dx == 0 && dy == 0) {
		return new hxClipper_DoublePoint();
	}
	var f = 1.0 / Math.sqrt(dx * dx + dy * dy);
	dx *= f;
	dy *= f;
	return new hxClipper_DoublePoint(dy,-dx);
};
hxClipper_ClipperOffset.prototype = {
	clear: function() {
		this.mPolyNodes.get_children().length = 0;
		this.mLowest.x = -1;
	}
	,addPath: function(path,joinType,endType) {
		var highI = path.length - 1;
		if(highI < 0) {
			return;
		}
		var newNode = new hxClipper_PolyNode();
		newNode.mJoinType = joinType;
		newNode.mEndtype = endType;
		if(endType == hxClipper_EndType.ET_CLOSED_LINE || endType == hxClipper_EndType.ET_CLOSED_POLYGON) {
			while(highI > 0 && path[0].equals(path[highI])) --highI;
		}
		newNode.mPolygon.push(path[0]);
		var j = 0;
		var k = 0;
		var _g1 = 1;
		var _g = highI + 1;
		while(_g1 < _g) {
			var i = _g1++;
			if(!newNode.mPolygon[j].equals(path[i])) {
				++j;
				newNode.mPolygon.push(path[i]);
				if(path[i].y > newNode.mPolygon[k].y || path[i].y == newNode.mPolygon[k].y && path[i].x < newNode.mPolygon[k].x) {
					k = j;
				}
			}
		}
		if(endType == hxClipper_EndType.ET_CLOSED_POLYGON && j < 2) {
			return;
		}
		this.mPolyNodes.addChild(newNode);
		if(endType != hxClipper_EndType.ET_CLOSED_POLYGON) {
			return;
		}
		if(this.mLowest.x < 0) {
			this.mLowest = new hxClipper_IntPoint(this.mPolyNodes.get_numChildren() - 1,k);
		} else {
			var ip = this.mPolyNodes.get_children()[this.mLowest.x | 0].mPolygon[this.mLowest.y | 0].clone();
			if(newNode.mPolygon[k].y > ip.y || newNode.mPolygon[k].y == ip.y && newNode.mPolygon[k].x < ip.x) {
				this.mLowest = new hxClipper_IntPoint(this.mPolyNodes.get_numChildren() - 1,k);
			}
		}
	}
	,addPaths: function(paths,joinType,endType) {
		var _g = 0;
		while(_g < paths.length) this.addPath(paths[_g++],joinType,endType);
	}
	,fixOrientations: function() {
		if(this.mLowest.x >= 0 && !hxClipper_Clipper.orientation(this.mPolyNodes.get_children()[this.mLowest.x | 0].mPolygon)) {
			var _g1 = 0;
			var _g = this.mPolyNodes.get_numChildren();
			while(_g1 < _g) {
				var node = this.mPolyNodes.get_children()[_g1++];
				if(node.mEndtype == hxClipper_EndType.ET_CLOSED_POLYGON || node.mEndtype == hxClipper_EndType.ET_CLOSED_LINE && hxClipper_Clipper.orientation(node.mPolygon)) {
					node.mPolygon.reverse();
				}
			}
		} else {
			var _g11 = 0;
			var _g2 = this.mPolyNodes.get_numChildren();
			while(_g11 < _g2) {
				var node1 = this.mPolyNodes.get_children()[_g11++];
				if(node1.mEndtype == hxClipper_EndType.ET_CLOSED_LINE && !hxClipper_Clipper.orientation(node1.mPolygon)) {
					node1.mPolygon.reverse();
				}
			}
		}
	}
	,doOffset: function(delta) {
		this.mDestPolys = [];
		this.mDelta = delta;
		if(hxClipper_ClipperBase.nearZero(delta)) {
			var _g1 = 0;
			var _g = this.mPolyNodes.get_numChildren();
			while(_g1 < _g) {
				var node = this.mPolyNodes.get_children()[_g1++];
				if(node.mEndtype == hxClipper_EndType.ET_CLOSED_POLYGON) {
					this.mDestPolys.push(node.mPolygon);
				}
			}
			return;
		}
		if(this.miterLimit > 2) {
			this.mMiterLim = 2 / (this.miterLimit * this.miterLimit);
		} else {
			this.mMiterLim = 0.5;
		}
		var y;
		if(this.arcTolerance <= 0.0) {
			y = 0.25;
		} else if(this.arcTolerance > Math.abs(delta) * 0.25) {
			y = Math.abs(delta) * 0.25;
		} else {
			y = this.arcTolerance;
		}
		var steps = Math.PI / Math.acos(1 - y / Math.abs(delta));
		this.mSin = Math.sin(6.283185307179586476925286766559 / steps);
		this.mCos = Math.cos(6.283185307179586476925286766559 / steps);
		this.mStepsPerRad = steps / 6.283185307179586476925286766559;
		if(delta < 0.0) {
			this.mSin = -this.mSin;
		}
		var _g11 = 0;
		var _g2 = this.mPolyNodes.get_numChildren();
		while(_g11 < _g2) {
			var node1 = this.mPolyNodes.get_children()[_g11++];
			this.mSrcPoly = node1.mPolygon;
			var len = this.mSrcPoly.length;
			if(len == 0 || delta <= 0 && (len < 3 || node1.mEndtype != hxClipper_EndType.ET_CLOSED_POLYGON)) {
				continue;
			}
			this.mDestPoly = [];
			if(len == 1) {
				if(node1.mJoinType == hxClipper_JoinType.JT_ROUND) {
					var x = 1.0;
					var y1 = 0.0;
					var j = 1;
					while(j <= steps) {
						this.mDestPoly.push(new hxClipper_IntPoint(hxClipper_ClipperOffset.round(this.mSrcPoly[0].x + x * delta),hxClipper_ClipperOffset.round(this.mSrcPoly[0].y + y1 * delta)));
						var x2 = x;
						x = x * this.mCos - this.mSin * y1;
						y1 = x2 * this.mSin + y1 * this.mCos;
						++j;
					}
				} else {
					var x1 = -1.0;
					var y2 = -1.0;
					var _g21 = 0;
					while(_g21 < 4) {
						++_g21;
						this.mDestPoly.push(new hxClipper_IntPoint(hxClipper_ClipperOffset.round(this.mSrcPoly[0].x + x1 * delta),hxClipper_ClipperOffset.round(this.mSrcPoly[0].y + y2 * delta)));
						if(x1 < 0) {
							x1 = 1;
						} else if(y2 < 0) {
							y2 = 1;
						} else {
							x1 = -1;
						}
					}
				}
				this.mDestPolys.push(this.mDestPoly);
				continue;
			}
			this.mNormals.length = 0;
			var _g3 = 0;
			var _g22 = len - 1;
			while(_g3 < _g22) {
				var j1 = _g3++;
				this.mNormals.push(hxClipper_ClipperOffset.getUnitNormal(this.mSrcPoly[j1],this.mSrcPoly[j1 + 1]));
			}
			if(node1.mEndtype == hxClipper_EndType.ET_CLOSED_LINE || node1.mEndtype == hxClipper_EndType.ET_CLOSED_POLYGON) {
				this.mNormals.push(hxClipper_ClipperOffset.getUnitNormal(this.mSrcPoly[len - 1],this.mSrcPoly[0]));
			} else {
				this.mNormals.push(this.mNormals[len - 2].clone());
			}
			if(node1.mEndtype == hxClipper_EndType.ET_CLOSED_POLYGON) {
				var k = len - 1;
				var _g31 = 0;
				while(_g31 < len) k = this.offsetPoint(_g31++,k,node1.mJoinType);
				this.mDestPolys.push(this.mDestPoly);
			} else if(node1.mEndtype == hxClipper_EndType.ET_CLOSED_LINE) {
				var k1 = len - 1;
				var _g32 = 0;
				while(_g32 < len) k1 = this.offsetPoint(_g32++,k1,node1.mJoinType);
				this.mDestPolys.push(this.mDestPoly);
				this.mDestPoly = [];
				var n = this.mNormals[len - 1].clone();
				var nj = len - 1;
				while(nj > 0) {
					this.mNormals[nj] = new hxClipper_DoublePoint(-this.mNormals[nj - 1].x,-this.mNormals[nj - 1].y);
					--nj;
				}
				this.mNormals[0] = new hxClipper_DoublePoint(-n.x,-n.y);
				k1 = 0;
				nj = len - 1;
				while(nj >= 0) {
					k1 = this.offsetPoint(nj,k1,node1.mJoinType);
					--nj;
				}
				this.mDestPolys.push(this.mDestPoly);
			} else {
				var k2 = 0;
				var _g33 = 1;
				var _g23 = len - 1;
				while(_g33 < _g23) k2 = this.offsetPoint(_g33++,k2,node1.mJoinType);
				var pt1;
				if(node1.mEndtype == hxClipper_EndType.ET_OPEN_BUTT) {
					var j2 = len - 1;
					pt1 = new hxClipper_IntPoint(hxClipper_ClipperOffset.round(this.mSrcPoly[j2].x + this.mNormals[j2].x * delta),hxClipper_ClipperOffset.round(this.mSrcPoly[j2].y + this.mNormals[j2].y * delta));
					this.mDestPoly.push(pt1);
					pt1 = new hxClipper_IntPoint(hxClipper_ClipperOffset.round(this.mSrcPoly[j2].x - this.mNormals[j2].x * delta),hxClipper_ClipperOffset.round(this.mSrcPoly[j2].y - this.mNormals[j2].y * delta));
					this.mDestPoly.push(pt1);
				} else {
					var j3 = len - 1;
					k2 = len - 2;
					this.mSinA = 0;
					this.mNormals[j3] = new hxClipper_DoublePoint(-this.mNormals[j3].x,-this.mNormals[j3].y);
					if(node1.mEndtype == hxClipper_EndType.ET_OPEN_SQUARE) {
						this.doSquare(j3,k2);
					} else {
						this.doRound(j3,k2);
					}
				}
				var nj1 = len - 1;
				while(nj1 > 0) {
					this.mNormals[nj1] = new hxClipper_DoublePoint(-this.mNormals[nj1 - 1].x,-this.mNormals[nj1 - 1].y);
					--nj1;
				}
				this.mNormals[0] = new hxClipper_DoublePoint(-this.mNormals[1].x,-this.mNormals[1].y);
				k2 = len - 1;
				nj1 = k2 - 1;
				while(nj1 > 0) {
					k2 = this.offsetPoint(nj1,k2,node1.mJoinType);
					--nj1;
				}
				if(node1.mEndtype == hxClipper_EndType.ET_OPEN_BUTT) {
					pt1 = new hxClipper_IntPoint(hxClipper_ClipperOffset.round(this.mSrcPoly[0].x - this.mNormals[0].x * delta),hxClipper_ClipperOffset.round(this.mSrcPoly[0].y - this.mNormals[0].y * delta));
					this.mDestPoly.push(pt1);
					pt1 = new hxClipper_IntPoint(hxClipper_ClipperOffset.round(this.mSrcPoly[0].x + this.mNormals[0].x * delta),hxClipper_ClipperOffset.round(this.mSrcPoly[0].y + this.mNormals[0].y * delta));
					this.mDestPoly.push(pt1);
				} else {
					k2 = 1;
					this.mSinA = 0;
					if(node1.mEndtype == hxClipper_EndType.ET_OPEN_SQUARE) {
						this.doSquare(0,1);
					} else {
						this.doRound(0,1);
					}
				}
				this.mDestPolys.push(this.mDestPoly);
			}
		}
	}
	,execute: function(solution,delta) {
		if((solution instanceof Array) && solution.__enum__ == null) {
			this.executePaths(solution,delta);
			return;
		} else if((solution instanceof hxClipper_PolyTree)) {
			this.executePolyTree(solution,delta);
			return;
		} else {
			throw new js__$Boot_HaxeError(new hxClipper_ClipperException("`solution` must be either a Paths or a PolyTree"));
		}
	}
	,executePaths: function(solution,delta) {
		solution.length = 0;
		this.fixOrientations();
		this.doOffset(delta);
		var clpr = new hxClipper_Clipper();
		clpr.addPaths(this.mDestPolys,hxClipper_PolyType.PT_SUBJECT,true);
		if(delta > 0) {
			clpr.executePaths(hxClipper_ClipType.CT_UNION,solution,hxClipper_PolyFillType.PFT_POSITIVE,hxClipper_PolyFillType.PFT_POSITIVE);
		} else {
			var r = hxClipper_ClipperBase.getBounds(this.mDestPolys);
			var outer = [];
			outer.push(new hxClipper_IntPoint(r.left - 10,r.bottom + 10));
			outer.push(new hxClipper_IntPoint(r.right + 10,r.bottom + 10));
			outer.push(new hxClipper_IntPoint(r.right + 10,r.top - 10));
			outer.push(new hxClipper_IntPoint(r.left - 10,r.top - 10));
			clpr.addPath(outer,hxClipper_PolyType.PT_SUBJECT,true);
			clpr.reverseSolution = true;
			clpr.executePaths(hxClipper_ClipType.CT_UNION,solution,hxClipper_PolyFillType.PFT_NEGATIVE,hxClipper_PolyFillType.PFT_NEGATIVE);
			if(solution.length > 0) {
				solution.shift();
			}
		}
	}
	,executePolyTree: function(solution,delta) {
		solution.clear();
		this.fixOrientations();
		this.doOffset(delta);
		var clpr = new hxClipper_Clipper();
		clpr.addPaths(this.mDestPolys,hxClipper_PolyType.PT_SUBJECT,true);
		if(delta > 0) {
			clpr.executePolyTree(hxClipper_ClipType.CT_UNION,solution,hxClipper_PolyFillType.PFT_POSITIVE,hxClipper_PolyFillType.PFT_POSITIVE);
		} else {
			var r = hxClipper_ClipperBase.getBounds(this.mDestPolys);
			var outer = [];
			outer.push(new hxClipper_IntPoint(r.left - 10,r.bottom + 10));
			outer.push(new hxClipper_IntPoint(r.right + 10,r.bottom + 10));
			outer.push(new hxClipper_IntPoint(r.right + 10,r.top - 10));
			outer.push(new hxClipper_IntPoint(r.left - 10,r.top - 10));
			clpr.addPath(outer,hxClipper_PolyType.PT_SUBJECT,true);
			clpr.reverseSolution = true;
			clpr.executePolyTree(hxClipper_ClipType.CT_UNION,solution,hxClipper_PolyFillType.PFT_NEGATIVE,hxClipper_PolyFillType.PFT_NEGATIVE);
			if(solution.get_numChildren() == 1 && solution.get_children()[0].get_numChildren() > 0) {
				var outerNode = solution.get_children()[0];
				solution.get_children()[0] = outerNode.get_children()[0];
				solution.get_children()[0].mParent = solution;
				var _g1 = 1;
				var _g = outerNode.get_numChildren();
				while(_g1 < _g) solution.addChild(outerNode.get_children()[_g1++]);
			} else {
				solution.clear();
			}
		}
	}
	,offsetPoint: function(j,k,joinType) {
		this.mSinA = this.mNormals[k].x * this.mNormals[j].y - this.mNormals[j].x * this.mNormals[k].y;
		if(Math.abs(this.mSinA * this.mDelta) < 1.0) {
			if(this.mNormals[k].x * this.mNormals[j].x + this.mNormals[j].y * this.mNormals[k].y > 0) {
				this.mDestPoly.push(new hxClipper_IntPoint(hxClipper_ClipperOffset.round(this.mSrcPoly[j].x + this.mNormals[k].x * this.mDelta),hxClipper_ClipperOffset.round(this.mSrcPoly[j].y + this.mNormals[k].y * this.mDelta)));
				return k;
			}
		} else if(this.mSinA > 1.0) {
			this.mSinA = 1.0;
		} else if(this.mSinA < -1.0) {
			this.mSinA = -1.0;
		}
		if(this.mSinA * this.mDelta < 0) {
			this.mDestPoly.push(new hxClipper_IntPoint(hxClipper_ClipperOffset.round(this.mSrcPoly[j].x + this.mNormals[k].x * this.mDelta),hxClipper_ClipperOffset.round(this.mSrcPoly[j].y + this.mNormals[k].y * this.mDelta)));
			this.mDestPoly.push(this.mSrcPoly[j]);
			this.mDestPoly.push(new hxClipper_IntPoint(hxClipper_ClipperOffset.round(this.mSrcPoly[j].x + this.mNormals[j].x * this.mDelta),hxClipper_ClipperOffset.round(this.mSrcPoly[j].y + this.mNormals[j].y * this.mDelta)));
		} else {
			switch(joinType[1]) {
			case 0:
				this.doSquare(j,k);
				break;
			case 1:
				this.doRound(j,k);
				break;
			case 2:
				var r = 1 + (this.mNormals[j].x * this.mNormals[k].x + this.mNormals[j].y * this.mNormals[k].y);
				if(r >= this.mMiterLim) {
					this.doMiter(j,k,r);
				} else {
					this.doSquare(j,k);
				}
				break;
			}
		}
		return j;
	}
	,doSquare: function(j,k) {
		var dx = Math.tan(Math.atan2(this.mSinA,this.mNormals[k].x * this.mNormals[j].x + this.mNormals[k].y * this.mNormals[j].y) / 4);
		this.mDestPoly.push(new hxClipper_IntPoint(hxClipper_ClipperOffset.round(this.mSrcPoly[j].x + this.mDelta * (this.mNormals[k].x - this.mNormals[k].y * dx)),hxClipper_ClipperOffset.round(this.mSrcPoly[j].y + this.mDelta * (this.mNormals[k].y + this.mNormals[k].x * dx))));
		this.mDestPoly.push(new hxClipper_IntPoint(hxClipper_ClipperOffset.round(this.mSrcPoly[j].x + this.mDelta * (this.mNormals[j].x + this.mNormals[j].y * dx)),hxClipper_ClipperOffset.round(this.mSrcPoly[j].y + this.mDelta * (this.mNormals[j].y - this.mNormals[j].x * dx))));
	}
	,doMiter: function(j,k,r) {
		var q = this.mDelta / r;
		this.mDestPoly.push(new hxClipper_IntPoint(hxClipper_ClipperOffset.round(this.mSrcPoly[j].x + (this.mNormals[k].x + this.mNormals[j].x) * q),hxClipper_ClipperOffset.round(this.mSrcPoly[j].y + (this.mNormals[k].y + this.mNormals[j].y) * q)));
	}
	,doRound: function(j,k) {
		var steps = Math.max(hxClipper_ClipperOffset.round(this.mStepsPerRad * Math.abs(Math.atan2(this.mSinA,this.mNormals[k].x * this.mNormals[j].x + this.mNormals[k].y * this.mNormals[j].y))) | 0,1) | 0;
		var x = this.mNormals[k].x;
		var y = this.mNormals[k].y;
		var x2;
		var _g1 = 0;
		while(_g1 < steps) {
			++_g1;
			this.mDestPoly.push(new hxClipper_IntPoint(hxClipper_ClipperOffset.round(this.mSrcPoly[j].x + x * this.mDelta),hxClipper_ClipperOffset.round(this.mSrcPoly[j].y + y * this.mDelta)));
			x2 = x;
			x = x * this.mCos - this.mSin * y;
			y = x2 * this.mSin + y * this.mCos;
		}
		this.mDestPoly.push(new hxClipper_IntPoint(hxClipper_ClipperOffset.round(this.mSrcPoly[j].x + this.mNormals[j].x * this.mDelta),hxClipper_ClipperOffset.round(this.mSrcPoly[j].y + this.mNormals[j].y * this.mDelta)));
	}
};
var hxClipper_ClipperException = function(description) {
	this.desc = description;
};
hxClipper_ClipperException.__name__ = true;
hxClipper_ClipperException.prototype = {
	toString: function() {
		return this.desc;
	}
};
var hxClipper_InternalTools = function() { };
hxClipper_InternalTools.__name__ = true;
hxClipper_InternalTools.clear = function(array) {
	array.length = 0;
};
hxClipper_InternalTools.xor = function(a,b) {
	if(!(a && !b)) {
		if(b) {
			return !a;
		} else {
			return false;
		}
	} else {
		return true;
	}
};
var hxClipper__$Clipper_Ref_$Impl_$ = {};
hxClipper__$Clipper_Ref_$Impl_$.__name__ = true;
hxClipper__$Clipper_Ref_$Impl_$._new = function() {
	return new Array(1);
};
hxClipper__$Clipper_Ref_$Impl_$.get_value = function(this1) {
	return this1[0];
};
hxClipper__$Clipper_Ref_$Impl_$.set_value = function(this1,param) {
	return this1[0] = param;
};
hxClipper__$Clipper_Ref_$Impl_$.toString = function(this1) {
	return "@[" + Std.string(this1[0]) + "]";
};
hxClipper__$Clipper_Ref_$Impl_$.to = function(v) {
	var ret = new Array(1);
	ret[0] = v;
	return ret;
};
var js__$Boot_HaxeError = function(val) {
	Error.call(this);
	this.val = val;
	if(Error.captureStackTrace) {
		Error.captureStackTrace(this,js__$Boot_HaxeError);
	}
};
js__$Boot_HaxeError.__name__ = true;
js__$Boot_HaxeError.wrap = function(val) {
	if((val instanceof Error)) {
		return val;
	} else {
		return new js__$Boot_HaxeError(val);
	}
};
js__$Boot_HaxeError.__super__ = Error;
js__$Boot_HaxeError.prototype = $extend(Error.prototype,{
});
var js_Boot = function() { };
js_Boot.__name__ = true;
js_Boot.__string_rec = function(o,s) {
	if(o == null) {
		return "null";
	}
	if(s.length >= 5) {
		return "<...>";
	}
	var t = typeof(o);
	if(t == "function" && (o.__name__ || o.__ename__)) {
		t = "object";
	}
	switch(t) {
	case "function":
		return "<function>";
	case "object":
		if((o instanceof Array)) {
			if(o.__enum__) {
				if(o.length == 2) {
					return o[0];
				}
				var str = o[0] + "(";
				s += "\t";
				var _g1 = 2;
				var _g = o.length;
				while(_g1 < _g) {
					var i = _g1++;
					if(i != 2) {
						str += "," + js_Boot.__string_rec(o[i],s);
					} else {
						str += js_Boot.__string_rec(o[i],s);
					}
				}
				return str + ")";
			}
			var l = o.length;
			var i1;
			var str1 = "[";
			s += "\t";
			var _g11 = 0;
			var _g2 = l;
			while(_g11 < _g2) {
				var i2 = _g11++;
				str1 += (i2 > 0 ? "," : "") + js_Boot.__string_rec(o[i2],s);
			}
			str1 += "]";
			return str1;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( e ) {
			var e1 = (e instanceof js__$Boot_HaxeError) ? e.val : e;
			return "???";
		}
		if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
			var s2 = o.toString();
			if(s2 != "[object Object]") {
				return s2;
			}
		}
		var k = null;
		var str2 = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		for( var k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str2.length != 2) {
			str2 += ", \n";
		}
		str2 += s + k + " : " + js_Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str2 += "\n" + s + "}";
		return str2;
	case "string":
		return o;
	default:
		return String(o);
	}
};
var postite_StepIterator = function(start,end,step) {
	this.index = start;
	this.end = end;
	this.step = step;
};
postite_StepIterator.__name__ = true;
postite_StepIterator.prototype = {
	hasNext: function() {
		return this.index < this.end;
	}
	,next: function() {
		var tmp = this;
		return (tmp.index += this.step) - this.step;
	}
};
var postite_geom_Calc = function() { };
postite_geom_Calc.__name__ = true;
postite_geom_Calc.getRandomInt = function(min,max) {
	min = Math.ceil(min);
	max = Math.floor(max);
	return Math.floor(Math.random() * (max - min + 1)) + min;
};
var postite_geom__$CoolPoint_Point_$Impl_$ = {};
postite_geom__$CoolPoint_Point_$Impl_$.__name__ = true;
postite_geom__$CoolPoint_Point_$Impl_$._new = function(x,y) {
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	return { x : x, y : y};
};
postite_geom__$CoolPoint_Point_$Impl_$.fromAnonInt = function(a) {
	return postite_geom__$CoolPoint_Point_$Impl_$._new(a.x * 1.0,a.y * 1.0);
};
postite_geom__$CoolPoint_Point_$Impl_$.fromPress = function(p) {
	return postite_geom__$CoolPoint_Point_$Impl_$._new(p.x,p.y);
};
postite_geom__$CoolPoint_Point_$Impl_$.toPress = function(this1) {
	return { x : this1.x, y : this1.y, press : 10};
};
var postite_geom__$CoolPoint_CoolPoint_$Impl_$ = {};
postite_geom__$CoolPoint_CoolPoint_$Impl_$.__name__ = true;
postite_geom__$CoolPoint_CoolPoint_$Impl_$._new = function(x,y,p) {
	return { x : x, y : y, press : p};
};
postite_geom__$CoolPoint_CoolPoint_$Impl_$.fromArray = function(a) {
	return postite_geom__$CoolPoint_CoolPoint_$Impl_$._new(a[0],a[1],a[2]);
};
postite_geom__$CoolPoint_CoolPoint_$Impl_$.fromAnon = function(a) {
	return postite_geom__$CoolPoint_CoolPoint_$Impl_$._new(a.x,a.y);
};
postite_geom__$CoolPoint_CoolPoint_$Impl_$.fromAnonInt = function(a) {
	return postite_geom__$CoolPoint_CoolPoint_$Impl_$._new(a.x * 1.0,a.y * 1.0);
};
postite_geom__$CoolPoint_CoolPoint_$Impl_$.toPoint = function(p) {
	return { x : p.x, y : p.y};
};
var postite_geom_GeomFilters = function() {
};
postite_geom_GeomFilters.__name__ = true;
postite_geom_GeomFilters.rectToArray = function(rect) {
	var a = [];
	a.push({ x : rect.x, y : rect.y});
	a.push({ x : rect.x + rect.width, y : rect.y});
	a.push({ x : rect.x + rect.width, y : rect.y + rect.height});
	a.push({ x : rect.x, y : rect.y + rect.height});
	a.push({ x : rect.x, y : rect.y});
	return a;
};
postite_geom_GeomFilters.clipOff = function(segs,scale) {
	if(scale == null) {
		scale = 10.0;
	}
	var ints = [];
	segs.map(function(seg) {
		ints.push(seg.x | 0);
		ints.push(seg.y | 0);
	});
	var paths = [];
	paths.push(postite_geom_GeomFilters.MakePolygonFromInts(ints));
	var co = new hxClipper_ClipperOffset();
	co.addPaths(paths,hxClipper_JoinType.JT_MITER,hxClipper_EndType.ET_CLOSED_POLYGON);
	var solution = [];
	co.executePaths(solution,scale);
	return solution;
};
postite_geom_GeomFilters.MakePolygonFromInts = function(ints,scale) {
	if(scale == null) {
		scale = 1.0;
	}
	var i = 0;
	var p = [];
	while(i < ints.length) {
		p.push(new hxClipper_IntPoint(ints[i] * scale | 0,ints[i + 1] * scale | 0));
		i += 2;
	}
	return p;
};
postite_geom_GeomFilters.boundRectForPoly = function(poly) {
	var minX = poly[0].x;
	var maxX = poly[0].y;
	var minY = poly[0].y;
	var maxY = poly[0].y;
	var _g = 0;
	while(_g < poly.length) {
		var point = poly[_g];
		++_g;
		minX = Math.min(minX,point.x);
		maxX = Math.max(maxX,point.x);
		minY = Math.min(minY,point.y);
		maxY = Math.max(maxY,point.y);
	}
	return { x : minX, y : minY, width : maxX - minX, height : maxY - minY};
};
postite_geom_GeomFilters.isClosed = function(pts,simplify) {
	if(simplify == null) {
		simplify = true;
	}
	console.log("GeomFilters.hx:78:",pts.length);
	if(simplify) {
		var simplepts = postite_geom_Simplify.simplify(pts,5);
		var begin = new postite_geom_Segment(simplepts[0],simplepts[1]);
		var end = new postite_geom_Ray(simplepts[simplepts.length - 1],simplepts[simplepts.length - 2]);
		console.log("GeomFilters.hx:85:","begin=" + Std.string(begin));
		console.log("GeomFilters.hx:86:"," end=" + Std.string(end));
		var pt = null;
		var inter;
		var p = postite_geom__$CoolPoint_Point_$Impl_$._new(begin.x,begin.y);
		var p1 = postite_geom__$CoolPoint_Point_$Impl_$._new(begin.x + begin.dx,begin.y + begin.dy);
		if((end.dx * (p.y - end.y) - end.dy * (p.x - end.x)) * (end.dx * (p1.y - end.y) - end.dy * (p1.x - end.x)) > 0) {
			inter = null;
		} else {
			var u = (end.dx * (begin.y - end.y) - end.dy * (begin.x - end.x)) / (end.dy * begin.dx - end.dx * begin.dy);
			if(u < 0 || u > 1) {
				inter = null;
			} else {
				pt = postite_geom__$CoolPoint_Point_$Impl_$._new();
				pt.x = begin.x + u * begin.dx;
				pt.y = begin.y + u * begin.dy;
				inter = pt;
			}
		}
		if(inter != null) {
			console.log("GeomFilters.hx:90:",inter);
			console.log("GeomFilters.hx:91:","side=" + (begin.dx * (inter.y - begin.y) - begin.dy * (inter.x - begin.x)));
			return inter;
		}
		return null;
	}
	return null;
};
postite_geom_GeomFilters.isInsideRect = function(p,rect) {
	var minX = rect.x;
	var minY = rect.y;
	if(p.x < minX || p.x > rect.width + minX || p.y < minY || p.y > rect.height + minY) {
		return false;
	}
	return true;
};
postite_geom_GeomFilters.pnPoly = function(pt,pos,verts) {
	var c = false;
	var nvert = verts.length;
	var j = nvert - 1;
	var _g1 = 0;
	while(_g1 < nvert) {
		var i = _g1++;
		if(verts[i].y + pos.y > pt.y != verts[j].y + pos.y > pt.y && pt.x < (verts[j].x + pos.x - (verts[i].x + pos.x)) * (pt.y - (verts[i].y + pos.y)) / (verts[j].y + pos.y - (verts[i].y + pos.y)) + (verts[i].x + pos.x)) {
			c = !c;
		}
		j = i;
	}
	return c;
};
var postite_geom_Geste = function() {
	this.NumUnistrokes = 16;
	this.Unistrokes = [];
	var a = postite_geom_UnistrokePatterns.unimap.keys();
	while(a.hasNext()) {
		var a1 = a.next();
		var _this = postite_geom_UnistrokePatterns.unimap;
		this.Unistrokes.push(new postite_geom_UniStroke(a1,__map_reserved[a1] != null ? _this.getReserved(a1) : _this.h[a1]));
	}
};
postite_geom_Geste.__name__ = true;
postite_geom_Geste.Resample = function(points,n) {
	var I = postite_geom_Geste.PathLength(points) / (n - 1);
	var D = 0.0;
	var newpoints = [points[0]];
	var _g1 = 1;
	var _g = points.length;
	while(_g1 < _g) {
		var i = _g1++;
		var d = postite_geom_Geste.Distance(points[i - 1],points[i]);
		if(D + d >= I) {
			var q = postite_geom__$CoolPoint_Point_$Impl_$._new(points[i - 1].x + (I - D) / d * (points[i].x - points[i - 1].x),points[i - 1].y + (I - D) / d * (points[i].y - points[i - 1].y));
			newpoints[newpoints.length] = q;
			points.splice(i,0,q);
			D = 0.0;
		} else {
			D += d;
		}
	}
	if(newpoints.length == n - 1) {
		newpoints[newpoints.length] = postite_geom__$CoolPoint_Point_$Impl_$._new(points[points.length - 1].x,points[points.length - 1].y);
	}
	return newpoints;
};
postite_geom_Geste.IndicativeAngle = function(points) {
	var c = postite_geom_Geste.Centroid(points);
	return Math.atan2(c.y - points[0].y,c.x - points[0].x);
};
postite_geom_Geste.RotateBy = function(points,radians) {
	var c = postite_geom_Geste.Centroid(points);
	var cos = Math.cos(radians);
	var sin = Math.sin(radians);
	var newpoints = [];
	var point = HxOverrides.iter(points);
	while(point.hasNext()) {
		var point1 = point.next();
		newpoints[newpoints.length] = postite_geom__$CoolPoint_Point_$Impl_$._new((point1.x - c.x) * cos - (point1.y - c.y) * sin + c.x,(point1.x - c.x) * sin + (point1.y - c.y) * cos + c.y);
	}
	return newpoints;
};
postite_geom_Geste.ScaleTo = function(points,size) {
	var B = postite_geom_Geste.BoundingBox(points);
	var newpoints = [];
	var point = HxOverrides.iter(points);
	while(point.hasNext()) {
		var point1 = point.next();
		newpoints[newpoints.length] = postite_geom__$CoolPoint_Point_$Impl_$._new(point1.x * (size / B.width),point1.y * (size / B.height));
	}
	return newpoints;
};
postite_geom_Geste.TranslateTo = function(points,pt) {
	var c = postite_geom_Geste.Centroid(points);
	var newpoints = [];
	var point = HxOverrides.iter(points);
	while(point.hasNext()) {
		var point1 = point.next();
		newpoints[newpoints.length] = postite_geom__$CoolPoint_Point_$Impl_$._new(point1.x + pt.x - c.x,point1.y + pt.y - c.y);
	}
	return newpoints;
};
postite_geom_Geste.Vectorize = function(points) {
	var sum = 0.0;
	var vector = [];
	var point = HxOverrides.iter(points);
	while(point.hasNext()) {
		var point1 = point.next();
		vector[vector.length] = point1.x;
		vector[vector.length] = point1.y;
		sum += point1.x * point1.x + point1.y * point1.y;
	}
	var magnitude = Math.sqrt(sum);
	var _g1 = 0;
	var _g = vector.length;
	while(_g1 < _g) vector[_g1++] /= magnitude;
	return vector;
};
postite_geom_Geste.OptimalCosineDistance = function(v1,v2) {
	var a = 0.0;
	var b = 0.0;
	console.log("Geste.hx:179:",v1.length + "-" + v2.length);
	var end = v1.length;
	var _g_index = 0;
	while(_g_index < end) {
		var i = (_g_index += 2) - 2;
		console.log("Geste.hx:181:",i);
		try {
			console.log("Geste.hx:183:","i+1=" + v1[i + 1]);
			console.log("Geste.hx:184:","v2i+1=" + v2[i + 1]);
			a += v1[i] * v2[i] + v1[i + 1] * v2[i + 1];
			b += v1[i] * v2[i + 1] - v1[i + 1] * v2[i];
		} catch( msg ) {
			console.log("Geste.hx:189:","eer" + Std.string((msg instanceof js__$Boot_HaxeError) ? msg.val : msg));
		}
		console.log("Geste.hx:191:","a=" + a);
		console.log("Geste.hx:192:","b=" + b);
	}
	var angle = Math.atan(b / a);
	return Math.acos(a * Math.cos(angle) + b * Math.sin(angle));
};
postite_geom_Geste.DistanceAtBestAngle = function(points,t,a,b,threshold) {
	var x1 = postite_geom_Geste.Phi * a + (1.0 - postite_geom_Geste.Phi) * b;
	var f1 = postite_geom_Geste.DistanceAtAngle(points,t,x1);
	var x2 = (1.0 - postite_geom_Geste.Phi) * a + postite_geom_Geste.Phi * b;
	var f2 = postite_geom_Geste.DistanceAtAngle(points,t,x2);
	while(Math.abs(b - a) > threshold) if(f1 < f2) {
		b = x2;
		x2 = x1;
		f2 = f1;
		x1 = postite_geom_Geste.Phi * a + (1.0 - postite_geom_Geste.Phi) * b;
		f1 = postite_geom_Geste.DistanceAtAngle(points,t,x1);
	} else {
		a = x1;
		x1 = x2;
		f1 = f2;
		x2 = (1.0 - postite_geom_Geste.Phi) * a + postite_geom_Geste.Phi * b;
		f2 = postite_geom_Geste.DistanceAtAngle(points,t,x2);
	}
	return Math.min(f1,f2);
};
postite_geom_Geste.DistanceAtAngle = function(points,t,radians) {
	return postite_geom_Geste.PathDistance(postite_geom_Geste.RotateBy(points,radians),t.Points);
};
postite_geom_Geste.Centroid = function(points) {
	var x = 0.0;
	var y = 0.0;
	var point = HxOverrides.iter(points);
	while(point.hasNext()) {
		var point1 = point.next();
		x += point1.x;
		y += point1.y;
	}
	x /= points.length;
	y /= points.length;
	return postite_geom__$CoolPoint_Point_$Impl_$._new(x,y);
};
postite_geom_Geste.BoundingBox = function(points) {
	var minX = Infinity;
	var maxX = -Infinity;
	var minY = Infinity;
	var maxY = -Infinity;
	var _g = 0;
	while(_g < points.length) {
		var point = points[_g];
		++_g;
		minX = Math.min(minX,point.x);
		minY = Math.min(minY,point.y);
		maxX = Math.max(maxX,point.x);
		maxY = Math.max(maxY,point.y);
	}
	return { x : minX, y : minY, width : maxX - minX, height : maxY - minY};
};
postite_geom_Geste.PathDistance = function(pts1,pts2) {
	var d = 0.0;
	var _g1 = 0;
	var _g = pts1.length;
	while(_g1 < _g) {
		var i = _g1++;
		d += postite_geom_Geste.Distance(pts1[i],pts2[i]);
	}
	return d / pts1.length;
};
postite_geom_Geste.PathLength = function(points) {
	var d = 0.0;
	var _g1 = 1;
	var _g = points.length;
	while(_g1 < _g) {
		var i = _g1++;
		d += postite_geom_Geste.Distance(points[i - 1],points[i]);
	}
	return d;
};
postite_geom_Geste.Distance = function(p1,p2) {
	var dx = p2.x - p1.x;
	var dy = p2.y - p1.y;
	return Math.sqrt(dx * dx + dy * dy);
};
postite_geom_Geste.Deg2Rad = function(d) {
	return d * Math.PI / 180.0;
};
postite_geom_Geste.prototype = {
	Recognize: function(points,useProtractor) {
		var t0 = new Date();
		points = postite_geom_Geste.Resample(points,postite_geom_Geste.NumPoints);
		points = postite_geom_Geste.RotateBy(points,-postite_geom_Geste.IndicativeAngle(points));
		points = postite_geom_Geste.ScaleTo(points,postite_geom_Geste.SquareSize);
		points = postite_geom_Geste.TranslateTo(points,postite_geom_Geste.Origin);
		var vector = postite_geom_Geste.Vectorize(points);
		var b = Infinity;
		console.log("Geste.hx:36:",this.Unistrokes.length);
		var u = -1;
		var _g1 = 0;
		var _g = this.Unistrokes.length;
		while(_g1 < _g) {
			var i = _g1++;
			console.log("Geste.hx:41:","i=" + i + this.Unistrokes[i].Name);
			var d;
			if(useProtractor) {
				console.log("Geste.hx:45:","victor=" + Std.string(vector));
				d = postite_geom_Geste.OptimalCosineDistance(this.Unistrokes[i].Vector,vector);
				console.log("Geste.hx:47:","d=" + d);
			} else {
				d = postite_geom_Geste.DistanceAtBestAngle(points,this.Unistrokes[i],-postite_geom_Geste.AngleRange,postite_geom_Geste.AngleRange,postite_geom_Geste.AnglePrecision);
				console.log("Geste.hx:51:","d=" + d);
			}
			if(d < b) {
				b = d;
				u = i;
			}
		}
		console.log("Geste.hx:60:","after loop");
		var t1 = new Date();
		var t = -t0.getTime();
		var newdate = new Date(t1.getTime() + t);
		if(u == -1) {
			return new postite_geom_Result("No match.",0.0,newdate);
		} else {
			return new postite_geom_Result(this.Unistrokes[u].Name,useProtractor ? 1.0 / b : 1.0 - b / postite_geom_Geste.HalfDiagonal,newdate);
		}
	}
	,addGesture: function(name,points) {
		this.Unistrokes[this.Unistrokes.length] = new postite_geom_UniStroke(name,points);
		var num = 0;
		var _g1 = 0;
		var _g = this.Unistrokes.length;
		while(_g1 < _g) if(this.Unistrokes[_g1++].Name == name) {
			++num;
		}
		return num;
	}
	,DeleteUserGestures: function() {
		this.Unistrokes = [];
		return this.NumUnistrokes;
	}
};
var postite_geom_UniStroke = function(name,points) {
	this.Name = name;
	this.Points = postite_geom_Geste.Resample(points,postite_geom_Geste.NumPoints);
	var radians = postite_geom_Geste.IndicativeAngle(this.Points);
	this.Points = postite_geom_Geste.RotateBy(this.Points,-radians);
	this.Points = postite_geom_Geste.ScaleTo(this.Points,postite_geom_Geste.SquareSize);
	this.Points = postite_geom_Geste.TranslateTo(this.Points,postite_geom_Geste.Origin);
	this.Vector = postite_geom_Geste.Vectorize(this.Points);
};
postite_geom_UniStroke.__name__ = true;
var postite_geom_Result = function(name,score,ms) {
	this.Name = name;
	this.Score = score;
	this.Time = ms;
};
postite_geom_Result.__name__ = true;
var postite_geom__$PolyGon_Polygon_$Impl_$ = {};
postite_geom__$PolyGon_Polygon_$Impl_$.__name__ = true;
postite_geom__$PolyGon_Polygon_$Impl_$.get_length = function(this1) {
	return this1.length;
};
postite_geom__$PolyGon_Polygon_$Impl_$.get_points = function(this1) {
	return this1;
};
postite_geom__$PolyGon_Polygon_$Impl_$._new = function(points) {
	return points == null ? [] : points;
};
postite_geom__$PolyGon_Polygon_$Impl_$.convexHull = function(this1) {
	if(this1.length < 3) {
		return this1;
	}
	this1.sort(function(a,b) {
		if(a.x == b.x) {
			if(a.y < b.y) {
				return -1;
			} else {
				return 1;
			}
		} else if(a.x < b.x) {
			return -1;
		} else {
			return 1;
		}
	});
	var hull = [];
	var k = 0;
	var _g = 0;
	while(_g < this1.length) {
		var p = this1[_g];
		++_g;
		while(true) {
			var tmp;
			if(k >= 2) {
				var p1 = hull[k - 2];
				var p2 = hull[k - 1];
				tmp = (p2.x - p1.x) * (p.y - p1.y) - (p2.y - p1.y) * (p.x - p1.x) <= 0;
			} else {
				tmp = false;
			}
			if(!tmp) {
				break;
			}
			--k;
		}
		hull[k++] = p;
	}
	var i = this1.length - 2;
	var len = k + 1;
	while(i >= 0) {
		var p3 = this1[i];
		while(true) {
			var tmp1;
			if(k >= len) {
				var p11 = hull[k - 2];
				var p21 = hull[k - 1];
				tmp1 = (p21.x - p11.x) * (p3.y - p11.y) - (p21.y - p11.y) * (p3.x - p11.x) <= 0;
			} else {
				tmp1 = false;
			}
			if(!tmp1) {
				break;
			}
			--k;
		}
		hull[k++] = p3;
		--i;
	}
	while(hull.length >= k) hull.pop();
	return hull;
};
postite_geom__$PolyGon_Polygon_$Impl_$.xSort = function(this1,a,b) {
	if(a.x == b.x) {
		if(a.y < b.y) {
			return -1;
		} else {
			return 1;
		}
	}
	if(a.x < b.x) {
		return -1;
	} else {
		return 1;
	}
};
postite_geom__$PolyGon_Polygon_$Impl_$.contains = function(this1,p,isConvex) {
	if(isConvex == null) {
		isConvex = false;
	}
	if(isConvex) {
		var p1 = this1[this1.length - 1];
		var _g = 0;
		while(_g < this1.length) {
			var p2 = this1[_g];
			++_g;
			if((p2.x - p1.x) * (p.y - p1.y) - (p2.y - p1.y) * (p.x - p1.x) < 0) {
				return false;
			}
			p1 = p2;
		}
		return true;
	} else {
		var w = 0;
		var p11 = this1[this1.length - 1];
		var _g1 = 0;
		while(_g1 < this1.length) {
			var p21 = this1[_g1];
			++_g1;
			if(p21.y <= p.y) {
				if(p11.y > p.y && (p11.x - p21.x) * (p.y - p21.y) - (p11.y - p21.y) * (p.x - p21.x) > 0) {
					++w;
				}
			} else if(p11.y <= p.y && (p11.x - p21.x) * (p.y - p21.y) - (p11.y - p21.y) * (p.x - p21.x) < 0) {
				--w;
			}
			p11 = p21;
		}
		return w != 0;
	}
};
postite_geom__$PolyGon_Polygon_$Impl_$.side = function(this1,p1,p2,t) {
	return (p2.x - p1.x) * (t.y - p1.y) - (p2.y - p1.y) * (t.x - p1.x);
};
var postite_geom_Segment = function(p1,p2) {
	this.x = p1.x;
	this.y = p1.y;
	this.dx = p2.x - this.x;
	this.dy = p2.y - this.y;
	this.lenSq = this.dx * this.dx + this.dy * this.dy;
	this.invLenSq = 1 / this.lenSq;
};
postite_geom_Segment.__name__ = true;
postite_geom_Segment.prototype = {
	setPoints: function(p1,p2) {
		this.x = p1.x;
		this.y = p1.y;
		this.dx = p2.x - this.x;
		this.dy = p2.y - this.y;
		this.lenSq = this.dx * this.dx + this.dy * this.dy;
		this.invLenSq = 1 / this.lenSq;
	}
	,side: function(p) {
		return this.dx * (p.y - this.y) - this.dy * (p.x - this.x);
	}
	,distanceSq: function(p) {
		var px = p.x - this.x;
		var py = p.y - this.y;
		var t = px * this.dx + py * this.dy;
		if(t < 0) {
			return px * px + py * py;
		} else if(t > this.lenSq) {
			var kx = p.x - (this.x + this.dx);
			var ky = p.y - (this.y + this.dy);
			return kx * kx + ky * ky;
		} else {
			var tl2 = t * this.invLenSq;
			var pdx = this.x + tl2 * this.dx - p.x;
			var pdy = this.y + tl2 * this.dy - p.y;
			return pdx * pdx + pdy * pdy;
		}
	}
	,distance: function(p) {
		var px = p.x - this.x;
		var py = p.y - this.y;
		var t = px * this.dx + py * this.dy;
		var tmp;
		if(t < 0) {
			tmp = px * px + py * py;
		} else if(t > this.lenSq) {
			var kx = p.x - (this.x + this.dx);
			var ky = p.y - (this.y + this.dy);
			tmp = kx * kx + ky * ky;
		} else {
			var tl2 = t * this.invLenSq;
			var pdx = this.x + tl2 * this.dx - p.x;
			var pdy = this.y + tl2 * this.dy - p.y;
			tmp = pdx * pdx + pdy * pdy;
		}
		return Math.sqrt(tmp);
	}
	,project: function(p) {
		var t = (p.x - this.x) * this.dx + (p.y - this.y) * this.dy;
		if(t < 0) {
			return postite_geom__$CoolPoint_Point_$Impl_$._new(this.x,this.y);
		} else if(t > this.lenSq) {
			return postite_geom__$CoolPoint_Point_$Impl_$._new(this.x + this.dx,this.y + this.dy);
		} else {
			var tl2 = t * this.invLenSq;
			return postite_geom__$CoolPoint_Point_$Impl_$._new(this.x + tl2 * this.dx,this.y + tl2 * this.dy);
		}
	}
	,lineIntersection: function(r,pt) {
		var p = postite_geom__$CoolPoint_Point_$Impl_$._new(this.x,this.y);
		var p1 = postite_geom__$CoolPoint_Point_$Impl_$._new(this.x + this.dx,this.y + this.dy);
		if((r.dx * (p.y - r.y) - r.dy * (p.x - r.x)) * (r.dx * (p1.y - r.y) - r.dy * (p1.x - r.x)) > 0) {
			return null;
		}
		var u = (r.dx * (this.y - r.y) - r.dy * (this.x - r.x)) / (r.dy * this.dx - r.dx * this.dy);
		if(u < 0 || u > 1) {
			return null;
		}
		if(pt == null) {
			pt = postite_geom__$CoolPoint_Point_$Impl_$._new();
		}
		pt.x = this.x + u * this.dx;
		pt.y = this.y + u * this.dy;
		return pt;
	}
};
var postite_geom_Ray = function(p1,p2) {
	this.x = p1.x;
	this.y = p1.y;
	this.dx = p2.x - this.x;
	this.dy = p2.y - this.y;
};
postite_geom_Ray.__name__ = true;
postite_geom_Ray.prototype = {
	setPoints: function(p1,p2) {
		this.x = p1.x;
		this.y = p1.y;
		this.dx = p2.x - this.x;
		this.dy = p2.y - this.y;
	}
	,side: function(p) {
		return this.dx * (p.y - this.y) - this.dy * (p.x - this.x);
	}
	,getPos: function() {
		return postite_geom__$CoolPoint_Point_$Impl_$._new(this.x,this.y);
	}
	,getDir: function() {
		return postite_geom__$CoolPoint_Point_$Impl_$._new(this.dx,this.dy);
	}
};
var postite_geom_Simplify = function() {
};
postite_geom_Simplify.__name__ = true;
postite_geom_Simplify.getSquareDistance = function(p1,p2) {
	var dx = p1.x - p2.x;
	var dy = p1.y - p2.y;
	return dx * dx + dy * dy;
};
postite_geom_Simplify.getSquareSegmentDistance = function(p,p1,p2) {
	var x = p1.x;
	var y = p1.y;
	var dx = p2.x - x;
	var dy = p2.y - y;
	var t;
	if(dx != 0 || dy != 0) {
		t = ((p.x - x) * dx + (p.y - y) * dy) / (dx * dx + dy * dy);
		if(t > 1) {
			x = p2.x;
			y = p2.y;
		} else if(t > 0) {
			x += dx * t;
			y += dy * t;
		}
	}
	dx = p.x - x;
	dy = p.y - y;
	return dx * dx + dy * dy;
};
postite_geom_Simplify.simplifyRadialDistance = function(points,sqTolerance) {
	var len = points.length;
	var point = null;
	var prevPoint = points[0];
	var newPoints = null;
	newPoints = [prevPoint];
	var _g1 = 0;
	while(_g1 < len) {
		point = points[_g1++];
		if(postite_geom_Simplify.getSquareDistance(point,prevPoint) > sqTolerance) {
			newPoints.push(point);
			prevPoint = point;
		}
	}
	if(prevPoint != point) {
		newPoints.push(point);
	}
	return newPoints;
};
postite_geom_Simplify.simplifyDouglasPeucker = function(points,sqTolerance) {
	var len = points.length;
	var markers = null;
	markers = [];
	var first = 0;
	var last = len - 1;
	var maxSqDist;
	var sqDist;
	var index = 0;
	var firstStack = null;
	firstStack = [];
	var lastStack = null;
	lastStack = [];
	var newPoints = null;
	newPoints = [];
	markers[last] = 1;
	markers[0] = 1;
	while(last != null) {
		maxSqDist = 0;
		var _g1 = first;
		var _g = last;
		while(_g1 < _g) {
			var i = _g1++;
			sqDist = postite_geom_Simplify.getSquareSegmentDistance(points[i],points[first],points[last]);
			if(sqDist > maxSqDist) {
				index = i;
				maxSqDist = sqDist;
			}
		}
		if(maxSqDist > sqTolerance) {
			markers[index] = 1;
			firstStack.push(first);
			lastStack.push(index);
			firstStack.push(index);
			lastStack.push(last);
		}
		first = firstStack.pop();
		last = lastStack.pop();
	}
	var _g11 = 0;
	while(_g11 < len) {
		var i1 = _g11++;
		if(markers[i1] != null) {
			newPoints.push(points[i1]);
		}
	}
	return newPoints;
};
postite_geom_Simplify.simplify = function(points,tolerance,highestQuality) {
	if(highestQuality == null) {
		highestQuality = false;
	}
	if(tolerance == null) {
		tolerance = 1;
	}
	var sqTolerance = tolerance * tolerance;
	if(!highestQuality) {
		points = postite_geom_Simplify.simplifyRadialDistance(points,sqTolerance);
	}
	points = postite_geom_Simplify.simplifyDouglasPeucker(points,sqTolerance);
	return points;
};
var postite_geom_UnistrokePatterns = function() { };
postite_geom_UnistrokePatterns.__name__ = true;
var tink_core_Annex = function(target) {
	this.target = target;
	this.registry = new haxe_ds_ObjectMap();
};
tink_core_Annex.__name__ = true;
var tink_core__$Callback_Callback_$Impl_$ = {};
tink_core__$Callback_Callback_$Impl_$.__name__ = true;
tink_core__$Callback_Callback_$Impl_$._new = function(f) {
	return f;
};
tink_core__$Callback_Callback_$Impl_$.toFunction = function(this1) {
	return this1;
};
tink_core__$Callback_Callback_$Impl_$.invoke = function(this1,data) {
	if(tink_core__$Callback_Callback_$Impl_$.depth < 1000) {
		tink_core__$Callback_Callback_$Impl_$.depth++;
		this1(data);
		tink_core__$Callback_Callback_$Impl_$.depth--;
	} else {
		var _e = this1;
		var f = function(data1) {
			tink_core__$Callback_Callback_$Impl_$.invoke(_e,data1);
		};
		var data2 = data;
		tink_core__$Callback_Callback_$Impl_$.defer(function() {
			f(data2);
		});
	}
};
tink_core__$Callback_Callback_$Impl_$.ignore = function(cb) {
	return function(_) {
		tink_core__$Callback_Callback_$Impl_$.invoke(cb,tink_core_Noise.Noise);
	};
};
tink_core__$Callback_Callback_$Impl_$.fromNiladic = function(f) {
	return f;
};
tink_core__$Callback_Callback_$Impl_$.fromMany = function(callbacks) {
	return function(v) {
		var _g = 0;
		while(_g < callbacks.length) tink_core__$Callback_Callback_$Impl_$.invoke(callbacks[_g++],v);
	};
};
tink_core__$Callback_Callback_$Impl_$.defer = function(f) {
	haxe_Timer.delay(f,0);
};
var tink_core__$Callback_LinkObject = function() { };
tink_core__$Callback_LinkObject.__name__ = true;
var tink_core__$Callback_CallbackLink_$Impl_$ = {};
tink_core__$Callback_CallbackLink_$Impl_$.__name__ = true;
tink_core__$Callback_CallbackLink_$Impl_$._new = function(link) {
	return new tink_core__$Callback_SimpleLink(link);
};
tink_core__$Callback_CallbackLink_$Impl_$.cancel = function(this1) {
	if(this1 != null) {
		this1.cancel();
	}
};
tink_core__$Callback_CallbackLink_$Impl_$.dissolve = function(this1) {
	if(this1 != null) {
		this1.cancel();
	}
};
tink_core__$Callback_CallbackLink_$Impl_$.noop = function() {
};
tink_core__$Callback_CallbackLink_$Impl_$.toFunction = function(this1) {
	if(this1 == null) {
		return tink_core__$Callback_CallbackLink_$Impl_$.noop;
	} else {
		return $bind(this1,this1.cancel);
	}
};
tink_core__$Callback_CallbackLink_$Impl_$.toCallback = function(this1) {
	return function(_) {
		this1.cancel();
	};
};
tink_core__$Callback_CallbackLink_$Impl_$.fromFunction = function(f) {
	return new tink_core__$Callback_SimpleLink(f);
};
tink_core__$Callback_CallbackLink_$Impl_$.join = function(a,b) {
	return new tink_core__$Callback_LinkPair(a,b);
};
tink_core__$Callback_CallbackLink_$Impl_$.fromMany = function(callbacks) {
	return new tink_core__$Callback_SimpleLink(function() {
		var _g = 0;
		while(_g < callbacks.length) {
			var cb = callbacks[_g];
			++_g;
			if(cb != null) {
				cb.cancel();
			}
		}
	});
};
var tink_core__$Callback_SimpleLink = function(f) {
	this.f = f;
};
tink_core__$Callback_SimpleLink.__name__ = true;
tink_core__$Callback_SimpleLink.__interfaces__ = [tink_core__$Callback_LinkObject];
tink_core__$Callback_SimpleLink.prototype = {
	cancel: function() {
		if(this.f != null) {
			this.f();
			this.f = null;
		}
	}
};
var tink_core__$Callback_LinkPair = function(a,b) {
	this.dissolved = false;
	this.a = a;
	this.b = b;
};
tink_core__$Callback_LinkPair.__name__ = true;
tink_core__$Callback_LinkPair.__interfaces__ = [tink_core__$Callback_LinkObject];
tink_core__$Callback_LinkPair.prototype = {
	cancel: function() {
		if(!this.dissolved) {
			this.dissolved = true;
			var this1 = this.a;
			if(this1 != null) {
				this1.cancel();
			}
			var this2 = this.b;
			if(this2 != null) {
				this2.cancel();
			}
			this.a = null;
			this.b = null;
		}
	}
};
var tink_core__$Callback_ListCell = function(cb,list) {
	if(cb == null) {
		throw new js__$Boot_HaxeError("callback expected but null received");
	}
	this.cb = cb;
	this.list = list;
};
tink_core__$Callback_ListCell.__name__ = true;
tink_core__$Callback_ListCell.__interfaces__ = [tink_core__$Callback_LinkObject];
tink_core__$Callback_ListCell.prototype = {
	invoke: function(data) {
		if(this.cb != null) {
			tink_core__$Callback_Callback_$Impl_$.invoke(this.cb,data);
		}
	}
	,clear: function() {
		this.list = null;
		this.cb = null;
	}
	,cancel: function() {
		var _g = this.list;
		if(_g != null) {
			this.clear();
			HxOverrides.remove(_g,this);
		}
	}
};
var tink_core__$Callback_CallbackList_$Impl_$ = {};
tink_core__$Callback_CallbackList_$Impl_$.__name__ = true;
tink_core__$Callback_CallbackList_$Impl_$._new = function() {
	return [];
};
tink_core__$Callback_CallbackList_$Impl_$.get_length = function(this1) {
	return this1.length;
};
tink_core__$Callback_CallbackList_$Impl_$.add = function(this1,cb) {
	var node = new tink_core__$Callback_ListCell(cb,this1);
	this1.push(node);
	return node;
};
tink_core__$Callback_CallbackList_$Impl_$.invoke = function(this1,data) {
	var _g = 0;
	var _g1 = this1.slice();
	while(_g < _g1.length) {
		var cell = _g1[_g];
		++_g;
		if(cell.cb != null) {
			tink_core__$Callback_Callback_$Impl_$.invoke(cell.cb,data);
		}
	}
};
tink_core__$Callback_CallbackList_$Impl_$.clear = function(this1) {
	var _g = 0;
	var _g1 = this1.splice(0,this1.length);
	while(_g < _g1.length) _g1[_g++].clear();
};
tink_core__$Callback_CallbackList_$Impl_$.invokeAndClear = function(this1,data) {
	var _g = 0;
	var _g1 = this1.splice(0,this1.length);
	while(_g < _g1.length) {
		var cell = _g1[_g];
		++_g;
		if(cell.cb != null) {
			tink_core__$Callback_Callback_$Impl_$.invoke(cell.cb,data);
		}
	}
};
var tink_core_TypedError = function(code,message,pos) {
	if(code == null) {
		code = 500;
	}
	this.isTinkError = true;
	this.code = code;
	this.message = message;
	this.pos = pos;
	this.exceptionStack = [];
	this.callStack = [];
};
tink_core_TypedError.__name__ = true;
tink_core_TypedError.withData = function(code,message,data,pos) {
	return tink_core_TypedError.typed(code,message,data,pos);
};
tink_core_TypedError.typed = function(code,message,data,pos) {
	var ret = new tink_core_TypedError(code,message,pos);
	ret.data = data;
	return ret;
};
tink_core_TypedError.ofJsError = function(e,pos) {
	return tink_core_TypedError.withData(500,e.message,e,pos);
};
tink_core_TypedError.asError = function(v) {
	if(v != null && v.isTinkError) {
		return v;
	} else {
		return null;
	}
};
tink_core_TypedError.catchExceptions = function(f,report,pos) {
	try {
		return tink_core_Outcome.Success(f());
	} catch( e ) {
		var e1 = (e instanceof js__$Boot_HaxeError) ? e.val : e;
		var _g = tink_core_TypedError.asError(e1);
		return tink_core_Outcome.Failure(_g == null ? report == null ? tink_core_TypedError.withData(null,"Unexpected Error",e1,pos) : report(e1) : _g);
	}
};
tink_core_TypedError.reporter = function(code,message,pos) {
	return function(e) {
		return tink_core_TypedError.withData(code,message,e,pos);
	};
};
tink_core_TypedError.rethrow = function(any) {
	throw js__$Boot_HaxeError.wrap(any);
};
tink_core_TypedError.tryFinally = function(f,cleanup) {
	try { return f(); } finally { cleanup(); }
	return null;
};
tink_core_TypedError.prototype = {
	printPos: function() {
		return this.pos.className + "." + this.pos.methodName + ":" + this.pos.lineNumber;
	}
	,toString: function() {
		var ret = "Error#" + this.code + ": " + this.message;
		if(this.pos != null) {
			ret += " @ " + this.printPos();
		}
		return ret;
	}
	,throwSelf: function() {
		throw new js__$Boot_HaxeError(this);
	}
};
var tink_core__$Error_Stack_$Impl_$ = {};
tink_core__$Error_Stack_$Impl_$.__name__ = true;
tink_core__$Error_Stack_$Impl_$.toString = function(this1) {
	return "Error stack not available. Compile with -D error_stack.";
};
var tink_core__$Future_FutureObject = function() { };
tink_core__$Future_FutureObject.__name__ = true;
var tink_core__$Future_NeverFuture = function() {
};
tink_core__$Future_NeverFuture.__name__ = true;
tink_core__$Future_NeverFuture.__interfaces__ = [tink_core__$Future_FutureObject];
tink_core__$Future_NeverFuture.prototype = {
	map: function(f) {
		return tink_core__$Future_NeverFuture.inst;
	}
	,flatMap: function(f) {
		return tink_core__$Future_NeverFuture.inst;
	}
	,handle: function(callback) {
		return null;
	}
	,gather: function() {
		return tink_core__$Future_NeverFuture.inst;
	}
	,eager: function() {
		return tink_core__$Future_NeverFuture.inst;
	}
};
var tink_core__$Lazy_LazyObject = function() { };
tink_core__$Lazy_LazyObject.__name__ = true;
var tink_core__$Lazy_LazyConst = function(value) {
	this.value = value;
};
tink_core__$Lazy_LazyConst.__name__ = true;
tink_core__$Lazy_LazyConst.__interfaces__ = [tink_core__$Lazy_LazyObject];
tink_core__$Lazy_LazyConst.prototype = {
	get: function() {
		return this.value;
	}
	,map: function(f) {
		var _gthis = this;
		return new tink_core__$Lazy_LazyFunc(function() {
			return f(_gthis.value);
		});
	}
	,flatMap: function(f) {
		var _gthis = this;
		return new tink_core__$Lazy_LazyFunc(function() {
			return f(_gthis.value).get();
		});
	}
};
var tink_core__$Future_SyncFuture = function(value) {
	this.value = value;
};
tink_core__$Future_SyncFuture.__name__ = true;
tink_core__$Future_SyncFuture.__interfaces__ = [tink_core__$Future_FutureObject];
tink_core__$Future_SyncFuture.prototype = {
	map: function(f) {
		return new tink_core__$Future_SyncFuture(this.value.map(f));
	}
	,flatMap: function(f) {
		var l = this.value.map(f);
		return new tink_core__$Future_SimpleFuture(function(cb) {
			return l.get().handle(cb);
		});
	}
	,handle: function(cb) {
		tink_core__$Callback_Callback_$Impl_$.invoke(cb,this.value.get());
		return null;
	}
	,eager: function() {
		return this;
	}
	,gather: function() {
		return this;
	}
};
var tink_core_Noise = { __ename__ : true, __constructs__ : ["Noise"] };
tink_core_Noise.Noise = ["Noise",0];
tink_core_Noise.Noise.__enum__ = tink_core_Noise;
var tink_core__$Future_Future_$Impl_$ = {};
tink_core__$Future_Future_$Impl_$.__name__ = true;
tink_core__$Future_Future_$Impl_$._new = function(f) {
	return new tink_core__$Future_SimpleFuture(f);
};
tink_core__$Future_Future_$Impl_$.first = function(this1,other) {
	var ret = new tink_core_FutureTrigger();
	var l1 = this1.handle($bind(ret,ret.trigger));
	var l2 = other.handle($bind(ret,ret.trigger));
	var ret1 = ret;
	if(l1 != null) {
		var this2 = l1;
		ret1.handle(function(_) {
			this2.cancel();
		});
	}
	if(l2 != null) {
		var this3 = l2;
		ret1.handle(function(_1) {
			this3.cancel();
		});
	}
	return ret1;
};
tink_core__$Future_Future_$Impl_$.map = function(this1,f,gather) {
	if(gather == null) {
		gather = true;
	}
	var ret = this1.map(f);
	if(gather) {
		return ret.gather();
	} else {
		return ret;
	}
};
tink_core__$Future_Future_$Impl_$.flatMap = function(this1,next,gather) {
	if(gather == null) {
		gather = true;
	}
	var ret = this1.flatMap(next);
	if(gather) {
		return ret.gather();
	} else {
		return ret;
	}
};
tink_core__$Future_Future_$Impl_$.next = function(this1,n) {
	return this1.flatMap(function(v) {
		return n(v);
	});
};
tink_core__$Future_Future_$Impl_$.merge = function(this1,other,merger,gather) {
	if(gather == null) {
		gather = true;
	}
	var ret = this1.flatMap(function(t) {
		return other.map(function(a) {
			return merger(t,a);
		});
	});
	if(gather) {
		return ret.gather();
	} else {
		return ret;
	}
};
tink_core__$Future_Future_$Impl_$.flatten = function(f) {
	return new tink_core__$Future_NestedFuture(f);
};
tink_core__$Future_Future_$Impl_$.ofJsPromise = function(promise) {
	return tink_core__$Future_Future_$Impl_$.async(function(cb) {
		promise.then(function(a) {
			cb(tink_core_Outcome.Success(a));
		})["catch"](function(e) {
			var tmp = tink_core_Outcome.Failure(tink_core_TypedError.withData(null,e.message,e,{ fileName : "tink/core/Future.hx", lineNumber : 78, className : "tink.core._Future.Future_Impl_", methodName : "ofJsPromise"}));
			cb(tmp);
		});
	});
};
tink_core__$Future_Future_$Impl_$.ofAny = function(v) {
	return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(v));
};
tink_core__$Future_Future_$Impl_$.asPromise = function(s) {
	return s;
};
tink_core__$Future_Future_$Impl_$.ofMany = function(futures,gather) {
	if(gather == null) {
		gather = true;
	}
	var ret = new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst([]));
	var _g = 0;
	while(_g < futures.length) ret = ret.flatMap((function(f) {
		return function(results) {
			var ret1 = (function() {
				return function(result) {
					return results.concat([result]);
				};
			})();
			return f[0].map(ret1);
		};
	})([futures[_g++]]));
	if(gather) {
		return ret.gather();
	} else {
		return ret;
	}
};
tink_core__$Future_Future_$Impl_$.fromMany = function(futures) {
	return tink_core__$Future_Future_$Impl_$.ofMany(futures);
};
tink_core__$Future_Future_$Impl_$.lazy = function(l) {
	return new tink_core__$Future_SyncFuture(l);
};
tink_core__$Future_Future_$Impl_$.sync = function(v) {
	return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(v));
};
tink_core__$Future_Future_$Impl_$.async = function(f,lazy) {
	if(lazy == null) {
		lazy = false;
	}
	if(lazy) {
		return new tink_core__$Future_LazyTrigger(f);
	} else {
		var op = new tink_core_FutureTrigger();
		tink_core__$Callback_Callback_$Impl_$.invoke(f,$bind(op,op.trigger));
		return op;
	}
};
tink_core__$Future_Future_$Impl_$.or = function(a,b) {
	return tink_core__$Future_Future_$Impl_$.first(a,b);
};
tink_core__$Future_Future_$Impl_$.either = function(a,b) {
	return tink_core__$Future_Future_$Impl_$.first(a.map(haxe_ds_Either.Left),b.map(haxe_ds_Either.Right));
};
tink_core__$Future_Future_$Impl_$.and = function(a,b) {
	return tink_core__$Future_Future_$Impl_$.merge(a,b,function(a1,b1) {
		return new tink_core_MPair(a1,b1);
	});
};
tink_core__$Future_Future_$Impl_$._tryFailingFlatMap = function(f,map) {
	return f.flatMap(function(o) {
		switch(o[1]) {
		case 0:
			return map(o[2]);
		case 1:
			return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Failure(o[2])));
		}
	}).gather();
};
tink_core__$Future_Future_$Impl_$._tryFlatMap = function(f,map) {
	return f.flatMap(function(o) {
		switch(o[1]) {
		case 0:
			return map(o[2]).map(tink_core_Outcome.Success).gather();
		case 1:
			return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Failure(o[2])));
		}
	}).gather();
};
tink_core__$Future_Future_$Impl_$._tryFailingMap = function(f,map) {
	return f.map(function(o) {
		return tink_core_OutcomeTools.flatMap(o,tink_core__$Outcome_OutcomeMapper_$Impl_$.withSameError(map));
	}).gather();
};
tink_core__$Future_Future_$Impl_$._tryMap = function(f,map) {
	return f.map(function(o) {
		return tink_core_OutcomeTools.map(o,map);
	}).gather();
};
tink_core__$Future_Future_$Impl_$._flatMap = function(f,map) {
	return f.flatMap(map).gather();
};
tink_core__$Future_Future_$Impl_$._map = function(f,map) {
	return f.map(map).gather();
};
tink_core__$Future_Future_$Impl_$.trigger = function() {
	return new tink_core_FutureTrigger();
};
var tink_core__$Future_SimpleFuture = function(f) {
	this.f = f;
};
tink_core__$Future_SimpleFuture.__name__ = true;
tink_core__$Future_SimpleFuture.__interfaces__ = [tink_core__$Future_FutureObject];
tink_core__$Future_SimpleFuture.prototype = {
	handle: function(callback) {
		return this.f(callback);
	}
	,map: function(f) {
		var _gthis = this;
		return new tink_core__$Future_SimpleFuture(function(cb) {
			return _gthis.f(function(v) {
				var tmp = f(v);
				tink_core__$Callback_Callback_$Impl_$.invoke(cb,tmp);
			});
		});
	}
	,flatMap: function(f) {
		var f1 = f;
		var _gthis = this;
		return tink_core__$Future_Future_$Impl_$.flatten(new tink_core__$Future_SimpleFuture(function(cb) {
			return _gthis.f(function(v) {
				var tmp = f1(v);
				tink_core__$Callback_Callback_$Impl_$.invoke(cb,tmp);
			});
		}));
	}
	,gather: function() {
		if(this.gathered != null) {
			return this.gathered;
		} else {
			return this.gathered = tink_core_FutureTrigger.gatherFuture(this);
		}
	}
	,eager: function() {
		var ret = this.gathered != null ? this.gathered : this.gathered = tink_core_FutureTrigger.gatherFuture(this);
		ret.handle(tink_core__$Callback_Callback_$Impl_$.fromNiladic(function() {
		}));
		return ret;
	}
};
var tink_core__$Future_NestedFuture = function(outer) {
	this.outer = outer;
};
tink_core__$Future_NestedFuture.__name__ = true;
tink_core__$Future_NestedFuture.__interfaces__ = [tink_core__$Future_FutureObject];
tink_core__$Future_NestedFuture.prototype = {
	map: function(f) {
		return this.outer.flatMap(function(inner) {
			return inner.map(f).gather();
		}).gather();
	}
	,flatMap: function(f) {
		return this.outer.flatMap(function(inner) {
			return inner.flatMap(f).gather();
		}).gather();
	}
	,gather: function() {
		if(this.gathered != null) {
			return this.gathered;
		} else {
			return this.gathered = tink_core_FutureTrigger.gatherFuture(this);
		}
	}
	,eager: function() {
		var ret = this.gathered != null ? this.gathered : this.gathered = tink_core_FutureTrigger.gatherFuture(this);
		ret.handle(tink_core__$Callback_Callback_$Impl_$.fromNiladic(function() {
		}));
		return ret;
	}
	,handle: function(cb) {
		var ret = null;
		ret = this.outer.handle(function(inner) {
			ret = inner.handle(function(result) {
				tink_core__$Callback_Callback_$Impl_$.invoke(cb,result);
			});
		});
		return ret;
	}
};
var tink_core_FutureTrigger = function() {
	this.list = [];
};
tink_core_FutureTrigger.__name__ = true;
tink_core_FutureTrigger.__interfaces__ = [tink_core__$Future_FutureObject];
tink_core_FutureTrigger.gatherFuture = function(f) {
	var op = null;
	return new tink_core__$Future_SimpleFuture(function(cb) {
		if(op == null) {
			op = new tink_core_FutureTrigger();
			f.handle($bind(op,op.trigger));
			f = null;
		}
		return op.handle(cb);
	});
};
tink_core_FutureTrigger.prototype = {
	handle: function(callback) {
		var _g = this.list;
		if(_g == null) {
			tink_core__$Callback_Callback_$Impl_$.invoke(callback,this.result);
			return null;
		} else {
			return tink_core__$Callback_CallbackList_$Impl_$.add(_g,callback);
		}
	}
	,map: function(f) {
		if(this.list == null) {
			return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(f(this.result)));
		} else {
			var ret = new tink_core_FutureTrigger();
			tink_core__$Callback_CallbackList_$Impl_$.add(this.list,function(v) {
				var tmp = f(v);
				ret.trigger(tmp);
			});
			return ret;
		}
	}
	,flatMap: function(f) {
		if(this.list == null) {
			return f(this.result);
		} else {
			var ret = new tink_core_FutureTrigger();
			tink_core__$Callback_CallbackList_$Impl_$.add(this.list,function(v) {
				f(v).handle($bind(ret,ret.trigger));
			});
			return ret;
		}
	}
	,gather: function() {
		return this;
	}
	,eager: function() {
		return this;
	}
	,asFuture: function() {
		return this;
	}
	,trigger: function(result) {
		if(this.list == null) {
			return false;
		} else {
			var list = this.list;
			this.list = null;
			this.result = result;
			tink_core__$Callback_CallbackList_$Impl_$.invoke(list,result);
			tink_core__$Callback_CallbackList_$Impl_$.clear(list);
			return true;
		}
	}
};
var tink_core__$Future_LazyTrigger = function(op) {
	this.op = op;
	tink_core_FutureTrigger.call(this);
};
tink_core__$Future_LazyTrigger.__name__ = true;
tink_core__$Future_LazyTrigger.__super__ = tink_core_FutureTrigger;
tink_core__$Future_LazyTrigger.prototype = $extend(tink_core_FutureTrigger.prototype,{
	eager: function() {
		if(this.op != null) {
			var op = this.op;
			this.op = null;
			tink_core__$Callback_Callback_$Impl_$.invoke(op,$bind(this,this.trigger));
		}
		return this;
	}
	,map: function(f) {
		var _gthis = this;
		if(this.op == null) {
			return tink_core_FutureTrigger.prototype.map.call(this,f);
		} else {
			return tink_core__$Future_Future_$Impl_$.async(function(cb) {
				_gthis.handle(function(v) {
					var tmp = f(v);
					cb(tmp);
				});
			},true);
		}
	}
	,flatMap: function(f) {
		var _gthis = this;
		if(this.op == null) {
			return tink_core_FutureTrigger.prototype.flatMap.call(this,f);
		} else {
			return tink_core__$Future_Future_$Impl_$.async(function(cb) {
				_gthis.handle(function(v) {
					f(v).handle(cb);
				});
			},true);
		}
	}
	,handle: function(cb) {
		this.eager();
		return tink_core_FutureTrigger.prototype.handle.call(this,cb);
	}
});
var tink_core_JsPromiseTools = function() { };
tink_core_JsPromiseTools.__name__ = true;
tink_core_JsPromiseTools.toSurprise = function(promise) {
	return tink_core__$Future_Future_$Impl_$.ofJsPromise(promise);
};
tink_core_JsPromiseTools.toPromise = function(promise) {
	return tink_core__$Future_Future_$Impl_$.ofJsPromise(promise);
};
var tink_core__$Lazy_Lazy_$Impl_$ = {};
tink_core__$Lazy_Lazy_$Impl_$.__name__ = true;
tink_core__$Lazy_Lazy_$Impl_$.get = function(this1) {
	return this1.get();
};
tink_core__$Lazy_Lazy_$Impl_$.ofFunc = function(f) {
	return new tink_core__$Lazy_LazyFunc(f);
};
tink_core__$Lazy_Lazy_$Impl_$.map = function(this1,f) {
	return this1.map(f);
};
tink_core__$Lazy_Lazy_$Impl_$.flatMap = function(this1,f) {
	return this1.flatMap(f);
};
tink_core__$Lazy_Lazy_$Impl_$.ofConst = function(c) {
	return new tink_core__$Lazy_LazyConst(c);
};
var tink_core__$Lazy_LazyFunc = function(f) {
	this.f = f;
};
tink_core__$Lazy_LazyFunc.__name__ = true;
tink_core__$Lazy_LazyFunc.__interfaces__ = [tink_core__$Lazy_LazyObject];
tink_core__$Lazy_LazyFunc.prototype = {
	get: function() {
		if(this.f != null) {
			this.result = this.f();
			this.f = null;
		}
		return this.result;
	}
	,map: function(f) {
		var _gthis = this;
		return new tink_core__$Lazy_LazyFunc(function() {
			var tmp = _gthis.get();
			return f(tmp);
		});
	}
	,flatMap: function(f) {
		var _gthis = this;
		return new tink_core__$Lazy_LazyFunc(function() {
			var this1 = _gthis.get();
			return f(this1).get();
		});
	}
};
var tink_core_NamedWith = function(name,value) {
	this.name = name;
	this.value = value;
};
tink_core_NamedWith.__name__ = true;
var tink_core_OptionTools = function() { };
tink_core_OptionTools.__name__ = true;
tink_core_OptionTools.force = function(o,pos) {
	if(o[1] == 0) {
		return o[2];
	} else {
		throw new js__$Boot_HaxeError(new tink_core_TypedError(404,"Some value expected but none found",pos));
	}
};
tink_core_OptionTools.or = function(o,l) {
	if(o[1] == 0) {
		return o[2];
	} else {
		return l.get();
	}
};
tink_core_OptionTools.orNull = function(o) {
	if(o[1] == 0) {
		return o[2];
	} else {
		return null;
	}
};
tink_core_OptionTools.filter = function(o,f) {
	if(o[1] == 0) {
		if(f(o[2]) == false) {
			return haxe_ds_Option.None;
		} else {
			return o;
		}
	} else {
		return o;
	}
};
tink_core_OptionTools.satisfies = function(o,f) {
	if(o[1] == 0) {
		return f(o[2]);
	} else {
		return false;
	}
};
tink_core_OptionTools.equals = function(o,v) {
	if(o[1] == 0) {
		return o[2] == v;
	} else {
		return false;
	}
};
tink_core_OptionTools.map = function(o,f) {
	if(o[1] == 0) {
		return haxe_ds_Option.Some(f(o[2]));
	} else {
		return haxe_ds_Option.None;
	}
};
tink_core_OptionTools.flatMap = function(o,f) {
	if(o[1] == 0) {
		return f(o[2]);
	} else {
		return haxe_ds_Option.None;
	}
};
tink_core_OptionTools.iterator = function(o) {
	return new tink_core_OptionIter(o);
};
tink_core_OptionTools.toArray = function(o) {
	if(o[1] == 0) {
		return [o[2]];
	} else {
		return [];
	}
};
var tink_core_OptionIter = function(o) {
	this.alive = true;
	if(o[1] == 0) {
		this.value = o[2];
	} else {
		this.alive = false;
	}
};
tink_core_OptionIter.__name__ = true;
tink_core_OptionIter.prototype = {
	hasNext: function() {
		return this.alive;
	}
	,next: function() {
		this.alive = false;
		return this.value;
	}
};
var tink_core_Outcome = { __ename__ : true, __constructs__ : ["Success","Failure"] };
tink_core_Outcome.Success = function(data) { var $x = ["Success",0,data]; $x.__enum__ = tink_core_Outcome; return $x; };
tink_core_Outcome.Failure = function(failure) { var $x = ["Failure",1,failure]; $x.__enum__ = tink_core_Outcome; return $x; };
var tink_core_OutcomeTools = function() { };
tink_core_OutcomeTools.__name__ = true;
tink_core_OutcomeTools.sure = function(outcome) {
	switch(outcome[1]) {
	case 0:
		return outcome[2];
	case 1:
		var failure = outcome[2];
		var _g = tink_core_TypedError.asError(failure);
		if(_g == null) {
			throw new js__$Boot_HaxeError(failure);
		} else {
			return _g.throwSelf();
		}
		break;
	}
};
tink_core_OutcomeTools.toOption = function(outcome) {
	switch(outcome[1]) {
	case 0:
		return haxe_ds_Option.Some(outcome[2]);
	case 1:
		return haxe_ds_Option.None;
	}
};
tink_core_OutcomeTools.toOutcome = function(option,pos) {
	switch(option[1]) {
	case 0:
		return tink_core_Outcome.Success(option[2]);
	case 1:
		return tink_core_Outcome.Failure(new tink_core_TypedError(404,"Some value expected but none found in " + pos.fileName + "@line " + pos.lineNumber,{ fileName : "tink/core/Outcome.hx", lineNumber : 47, className : "tink.core.OutcomeTools", methodName : "toOutcome"}));
	}
};
tink_core_OutcomeTools.orNull = function(outcome) {
	switch(outcome[1]) {
	case 0:
		return outcome[2];
	case 1:
		return null;
	}
};
tink_core_OutcomeTools.orUse = function(outcome,fallback) {
	switch(outcome[1]) {
	case 0:
		return outcome[2];
	case 1:
		return fallback.get();
	}
};
tink_core_OutcomeTools.orTry = function(outcome,fallback) {
	switch(outcome[1]) {
	case 0:
		return outcome;
	case 1:
		return fallback.get();
	}
};
tink_core_OutcomeTools.equals = function(outcome,to) {
	switch(outcome[1]) {
	case 0:
		return outcome[2] == to;
	case 1:
		return false;
	}
};
tink_core_OutcomeTools.map = function(outcome,transform) {
	switch(outcome[1]) {
	case 0:
		return tink_core_Outcome.Success(transform(outcome[2]));
	case 1:
		return tink_core_Outcome.Failure(outcome[2]);
	}
};
tink_core_OutcomeTools.isSuccess = function(outcome) {
	if(outcome[1] == 0) {
		return true;
	} else {
		return false;
	}
};
tink_core_OutcomeTools.flatMap = function(o,mapper) {
	return tink_core__$Outcome_OutcomeMapper_$Impl_$.apply(mapper,o);
};
tink_core_OutcomeTools.swap = function(outcome,v) {
	switch(outcome[1]) {
	case 0:
		return tink_core_Outcome.Success(v);
	case 1:
		return tink_core_Outcome.Failure(outcome[2]);
	}
};
tink_core_OutcomeTools.attempt = function(f,report) {
	try {
		return tink_core_Outcome.Success(f());
	} catch( e ) {
		return tink_core_Outcome.Failure(report((e instanceof js__$Boot_HaxeError) ? e.val : e));
	}
};
tink_core_OutcomeTools.flatten = function(o) {
	switch(o[1]) {
	case 0:
		switch(o[2][1]) {
		case 0:
			return tink_core_Outcome.Success(o[2][2]);
		case 1:
			return tink_core_Outcome.Failure(o[2][2]);
		}
		break;
	case 1:
		return tink_core_Outcome.Failure(o[2]);
	}
};
var tink_core__$Outcome_OutcomeMapper_$Impl_$ = {};
tink_core__$Outcome_OutcomeMapper_$Impl_$.__name__ = true;
tink_core__$Outcome_OutcomeMapper_$Impl_$._new = function(f) {
	return { f : f};
};
tink_core__$Outcome_OutcomeMapper_$Impl_$.apply = function(this1,o) {
	return this1.f(o);
};
tink_core__$Outcome_OutcomeMapper_$Impl_$.withSameError = function(f) {
	return tink_core__$Outcome_OutcomeMapper_$Impl_$._new(function(o) {
		switch(o[1]) {
		case 0:
			return f(o[2]);
		case 1:
			return tink_core_Outcome.Failure(o[2]);
		}
	});
};
tink_core__$Outcome_OutcomeMapper_$Impl_$.withEitherError = function(f) {
	return tink_core__$Outcome_OutcomeMapper_$Impl_$._new(function(o) {
		switch(o[1]) {
		case 0:
			var _g = f(o[2]);
			switch(_g[1]) {
			case 0:
				return tink_core_Outcome.Success(_g[2]);
			case 1:
				return tink_core_Outcome.Failure(haxe_ds_Either.Right(_g[2]));
			}
			break;
		case 1:
			return tink_core_Outcome.Failure(haxe_ds_Either.Left(o[2]));
		}
	});
};
var tink_core__$Pair_Pair_$Impl_$ = {};
tink_core__$Pair_Pair_$Impl_$.__name__ = true;
tink_core__$Pair_Pair_$Impl_$._new = function(a,b) {
	return new tink_core_MPair(a,b);
};
tink_core__$Pair_Pair_$Impl_$.get_a = function(this1) {
	return this1.a;
};
tink_core__$Pair_Pair_$Impl_$.get_b = function(this1) {
	return this1.b;
};
tink_core__$Pair_Pair_$Impl_$.toBool = function(this1) {
	return this1 != null;
};
tink_core__$Pair_Pair_$Impl_$.isNil = function(this1) {
	return this1 == null;
};
tink_core__$Pair_Pair_$Impl_$.nil = function() {
	return null;
};
var tink_core_MPair = function(a,b) {
	this.a = a;
	this.b = b;
};
tink_core_MPair.__name__ = true;
var tink_core__$Promise_Promise_$Impl_$ = {};
tink_core__$Promise_Promise_$Impl_$.__name__ = true;
tink_core__$Promise_Promise_$Impl_$._new = function(f,lazy) {
	if(lazy == null) {
		lazy = false;
	}
	return tink_core__$Future_Future_$Impl_$.async(function(cb) {
		f(function(v) {
			cb(tink_core_Outcome.Success(v));
		},function(e) {
			cb(tink_core_Outcome.Failure(e));
		});
	},lazy);
};
tink_core__$Promise_Promise_$Impl_$.eager = function(this1) {
	return this1.eager();
};
tink_core__$Promise_Promise_$Impl_$.map = function(this1,f) {
	return this1.map(f).gather();
};
tink_core__$Promise_Promise_$Impl_$.flatMap = function(this1,f) {
	return this1.flatMap(f).gather();
};
tink_core__$Promise_Promise_$Impl_$.tryRecover = function(this1,f) {
	return this1.flatMap(function(o) {
		switch(o[1]) {
		case 0:
			return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(o));
		case 1:
			return f(o[2]);
		}
	}).gather();
};
tink_core__$Promise_Promise_$Impl_$.recover = function(this1,f) {
	return this1.flatMap(function(o) {
		switch(o[1]) {
		case 0:
			return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(o[2]));
		case 1:
			return f(o[2]);
		}
	}).gather();
};
tink_core__$Promise_Promise_$Impl_$.mapError = function(this1,f) {
	return this1.map(function(o) {
		switch(o[1]) {
		case 0:
			return o;
		case 1:
			return tink_core_Outcome.Failure(f(o[2]));
		}
	}).gather();
};
tink_core__$Promise_Promise_$Impl_$.handle = function(this1,cb) {
	return this1.handle(cb);
};
tink_core__$Promise_Promise_$Impl_$.noise = function(this1) {
	return tink_core__$Promise_Promise_$Impl_$.next(this1,function(v) {
		return tink_core__$Promise_Promise_$Impl_$.ofOutcome(tink_core_Outcome.Success(tink_core_Noise.Noise));
	});
};
tink_core__$Promise_Promise_$Impl_$.isSuccess = function(this1) {
	return this1.map(function(o) {
		return tink_core_OutcomeTools.isSuccess(o);
	}).gather();
};
tink_core__$Promise_Promise_$Impl_$.next = function(this1,f,gather) {
	if(gather == null) {
		gather = true;
	}
	var ret = this1.flatMap(function(o) {
		switch(o[1]) {
		case 0:
			return f(o[2]);
		case 1:
			return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Failure(o[2])));
		}
	});
	if(gather) {
		return ret.gather();
	} else {
		return ret;
	}
};
tink_core__$Promise_Promise_$Impl_$.swap = function(this1,v) {
	return tink_core__$Future_Future_$Impl_$._tryMap(this1,function(_) {
		return v;
	});
};
tink_core__$Promise_Promise_$Impl_$.swapError = function(this1,e) {
	return tink_core__$Promise_Promise_$Impl_$.mapError(this1,function(_) {
		return e;
	});
};
tink_core__$Promise_Promise_$Impl_$.merge = function(this1,other,merger,gather) {
	if(gather == null) {
		gather = true;
	}
	return tink_core__$Promise_Promise_$Impl_$.next(this1,function(t) {
		return tink_core__$Promise_Promise_$Impl_$.next(other,function(a) {
			return merger(t,a);
		},false);
	},gather);
};
tink_core__$Promise_Promise_$Impl_$.and = function(a,b) {
	return tink_core__$Promise_Promise_$Impl_$.merge(a,b,function(a1,b1) {
		return tink_core__$Promise_Promise_$Impl_$.ofOutcome(tink_core_Outcome.Success(new tink_core_MPair(a1,b1)));
	});
};
tink_core__$Promise_Promise_$Impl_$.iterate = function(promises,$yield,$finally,lazy) {
	return tink_core__$Future_Future_$Impl_$.async(function(cb) {
		var iter = $getIterator(promises);
		var next = null;
		next = function() {
			if(iter.hasNext()) {
				iter.next().handle(function(o) {
					switch(o[1]) {
					case 0:
						$yield(o[2]).handle(function(o1) {
							switch(o1[1]) {
							case 0:
								switch(o1[2][1]) {
								case 0:
									cb(tink_core_Outcome.Success(o1[2][2]));
									break;
								case 1:
									next();
									break;
								}
								break;
							case 1:
								cb(tink_core_Outcome.Failure(o1[2]));
								break;
							}
						});
						break;
					case 1:
						cb(tink_core_Outcome.Failure(o[2]));
						break;
					}
				});
			} else {
				$finally.handle(cb);
			}
		};
		next();
	},lazy);
};
tink_core__$Promise_Promise_$Impl_$.ofJsPromise = function(promise) {
	return tink_core__$Future_Future_$Impl_$.ofJsPromise(promise);
};
tink_core__$Promise_Promise_$Impl_$.ofSpecific = function(s) {
	return s;
};
tink_core__$Promise_Promise_$Impl_$.ofFuture = function(f) {
	return f.map(tink_core_Outcome.Success).gather();
};
tink_core__$Promise_Promise_$Impl_$.ofOutcome = function(o) {
	return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(o));
};
tink_core__$Promise_Promise_$Impl_$.ofError = function(e) {
	return tink_core__$Promise_Promise_$Impl_$.ofOutcome(tink_core_Outcome.Failure(e));
};
tink_core__$Promise_Promise_$Impl_$.ofData = function(d) {
	return tink_core__$Promise_Promise_$Impl_$.ofOutcome(tink_core_Outcome.Success(d));
};
tink_core__$Promise_Promise_$Impl_$.lazy = function(p) {
	return tink_core__$Future_Future_$Impl_$.async(function(cb) {
		p.get().handle(cb);
	},true);
};
tink_core__$Promise_Promise_$Impl_$.inParallel = function(a,concurrency,lazy) {
	if(a.length == 0) {
		return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Success([])));
	} else {
		return tink_core__$Future_Future_$Impl_$.async(function(cb) {
			var result = [];
			var pending = a.length;
			var links = null;
			var linkArray = [];
			var sync = false;
			var i = 0;
			var iter = HxOverrides.iter(a);
			var next = null;
			var done = function(o) {
				if(links == null) {
					sync = true;
				} else if(links != null) {
					links.cancel();
				}
				cb(o);
			};
			var fail = function(e) {
				pending = 0;
				done(tink_core_Outcome.Failure(e));
			};
			var set = function(index,value) {
				result[index] = value;
				if((pending -= 1) == 0) {
					done(tink_core_Outcome.Success(result));
				} else if(iter.hasNext() && pending > 0) {
					next();
				}
			};
			next = function() {
				i += 1;
				var index1 = i - 1;
				var next1 = iter.next().handle(function(o1) {
					switch(o1[1]) {
					case 0:
						set(index1,o1[2]);
						break;
					case 1:
						fail(o1[2]);
						break;
					}
				});
				linkArray.push(next1);
			};
			while(true) {
				var tmp;
				if(iter.hasNext() && pending > 0) {
					if(concurrency != null) {
						concurrency -= 1;
						tmp = concurrency + 1 > 0;
					} else {
						tmp = true;
					}
				} else {
					tmp = false;
				}
				if(!tmp) {
					break;
				}
				next();
			}
			links = tink_core__$Callback_CallbackLink_$Impl_$.fromMany(linkArray);
			if(sync) {
				if(links != null) {
					links.cancel();
				}
			}
		},lazy);
	}
};
tink_core__$Promise_Promise_$Impl_$.inSequence = function(a) {
	var loop = null;
	loop = function(index) {
		if(index == a.length) {
			return tink_core__$Promise_Promise_$Impl_$.ofOutcome(tink_core_Outcome.Success([]));
		} else {
			return tink_core__$Promise_Promise_$Impl_$.next(a[index],function(head) {
				return tink_core__$Promise_Promise_$Impl_$.next(loop(index + 1),function(tail) {
					return tink_core__$Promise_Promise_$Impl_$.ofOutcome(tink_core_Outcome.Success([head].concat(tail)));
				});
			});
		}
	};
	return loop(0);
};
tink_core__$Promise_Promise_$Impl_$.cache = function(gen) {
	var p = null;
	return function() {
		var ret = p;
		if(ret == null) {
			var sync = false;
			ret = tink_core__$Promise_Promise_$Impl_$.next(gen(),function(o) {
				o.b.handle(function(_) {
					sync = true;
					p = null;
				});
				return tink_core__$Promise_Promise_$Impl_$.ofOutcome(tink_core_Outcome.Success(o.a));
			});
			if(!sync) {
				p = ret;
			}
		}
		return ret.map(function(o1) {
			if(!tink_core_OutcomeTools.isSuccess(o1)) {
				p = null;
			}
			return o1;
		}).gather();
	};
};
tink_core__$Promise_Promise_$Impl_$.lift = function(p) {
	return p;
};
tink_core__$Promise_Promise_$Impl_$.trigger = function() {
	return new tink_core_FutureTrigger();
};
var tink_core__$Promise_Next_$Impl_$ = {};
tink_core__$Promise_Next_$Impl_$.__name__ = true;
tink_core__$Promise_Next_$Impl_$.ofSafe = function(f) {
	return function(x) {
		return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(f(x)));
	};
};
tink_core__$Promise_Next_$Impl_$.ofSync = function(f) {
	return function(x) {
		return f(x).map(tink_core_Outcome.Success).gather();
	};
};
tink_core__$Promise_Next_$Impl_$.ofSafeSync = function(f) {
	return function(x) {
		return tink_core__$Promise_Promise_$Impl_$.ofOutcome(tink_core_Outcome.Success(f(x)));
	};
};
tink_core__$Promise_Next_$Impl_$._chain = function(a,b) {
	return function(v) {
		return tink_core__$Promise_Promise_$Impl_$.next(a(v),b);
	};
};
var tink_core__$Promise_Recover_$Impl_$ = {};
tink_core__$Promise_Recover_$Impl_$.__name__ = true;
tink_core__$Promise_Recover_$Impl_$.ofSync = function(f) {
	return function(e) {
		return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(f(e)));
	};
};
var tink_core__$Promise_Combiner_$Impl_$ = {};
tink_core__$Promise_Combiner_$Impl_$.__name__ = true;
tink_core__$Promise_Combiner_$Impl_$.ofSafe = function(f) {
	return function(x1,x2) {
		return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(f(x1,x2)));
	};
};
tink_core__$Promise_Combiner_$Impl_$.ofSync = function(f) {
	return function(x1,x2) {
		return f(x1,x2).map(tink_core_Outcome.Success).gather();
	};
};
tink_core__$Promise_Combiner_$Impl_$.ofSafeSync = function(f) {
	return function(x1,x2) {
		return tink_core__$Promise_Promise_$Impl_$.ofOutcome(tink_core_Outcome.Success(f(x1,x2)));
	};
};
var tink_core__$Promise_PromiseTrigger_$Impl_$ = {};
tink_core__$Promise_PromiseTrigger_$Impl_$.__name__ = true;
tink_core__$Promise_PromiseTrigger_$Impl_$._new = function() {
	return new tink_core_FutureTrigger();
};
tink_core__$Promise_PromiseTrigger_$Impl_$.resolve = function(this1,v) {
	return this1.trigger(tink_core_Outcome.Success(v));
};
tink_core__$Promise_PromiseTrigger_$Impl_$.reject = function(this1,e) {
	return this1.trigger(tink_core_Outcome.Failure(e));
};
tink_core__$Promise_PromiseTrigger_$Impl_$.asPromise = function(this1) {
	return this1;
};
var tink_core__$Ref_Ref_$Impl_$ = {};
tink_core__$Ref_Ref_$Impl_$.__name__ = true;
tink_core__$Ref_Ref_$Impl_$._new = function() {
	return new Array(1);
};
tink_core__$Ref_Ref_$Impl_$.get_value = function(this1) {
	return this1[0];
};
tink_core__$Ref_Ref_$Impl_$.set_value = function(this1,param) {
	return this1[0] = param;
};
tink_core__$Ref_Ref_$Impl_$.toString = function(this1) {
	return "@[" + Std.string(this1[0]) + "]";
};
tink_core__$Ref_Ref_$Impl_$.to = function(v) {
	var ret = new Array(1);
	ret[0] = v;
	return ret;
};
var tink_core__$Signal_Signal_$Impl_$ = {};
tink_core__$Signal_Signal_$Impl_$.__name__ = true;
tink_core__$Signal_Signal_$Impl_$._new = function(f) {
	return new tink_core__$Signal_SimpleSignal(f);
};
tink_core__$Signal_Signal_$Impl_$.map = function(this1,f,gather) {
	if(gather == null) {
		gather = true;
	}
	var ret = new tink_core__$Signal_SimpleSignal(function(cb) {
		return this1.handle(function(result) {
			var this2 = f(result);
			tink_core__$Callback_Callback_$Impl_$.invoke(cb,this2);
		});
	});
	if(gather) {
		return tink_core__$Signal_Signal_$Impl_$.gather(ret);
	} else {
		return ret;
	}
};
tink_core__$Signal_Signal_$Impl_$.flatMap = function(this1,f,gather) {
	if(gather == null) {
		gather = true;
	}
	var ret = new tink_core__$Signal_SimpleSignal(function(cb) {
		return this1.handle(function(result) {
			f(result).handle(cb);
		});
	});
	if(gather) {
		return tink_core__$Signal_Signal_$Impl_$.gather(ret);
	} else {
		return ret;
	}
};
tink_core__$Signal_Signal_$Impl_$.filter = function(this1,f,gather) {
	if(gather == null) {
		gather = true;
	}
	var ret = new tink_core__$Signal_SimpleSignal(function(cb) {
		return this1.handle(function(result) {
			if(f(result)) {
				tink_core__$Callback_Callback_$Impl_$.invoke(cb,result);
			}
		});
	});
	if(gather) {
		return tink_core__$Signal_Signal_$Impl_$.gather(ret);
	} else {
		return ret;
	}
};
tink_core__$Signal_Signal_$Impl_$.select = function(this1,selector,gather) {
	if(gather == null) {
		gather = true;
	}
	var ret = new tink_core__$Signal_SimpleSignal(function(cb) {
		return this1.handle(function(result) {
			var _g = selector(result);
			switch(_g[1]) {
			case 0:
				tink_core__$Callback_Callback_$Impl_$.invoke(cb,_g[2]);
				break;
			case 1:
				break;
			}
		});
	});
	if(gather) {
		return tink_core__$Signal_Signal_$Impl_$.gather(ret);
	} else {
		return ret;
	}
};
tink_core__$Signal_Signal_$Impl_$.join = function(this1,other,gather) {
	if(gather == null) {
		gather = true;
	}
	var ret = new tink_core__$Signal_SimpleSignal(function(cb) {
		return new tink_core__$Callback_LinkPair(this1.handle(cb),other.handle(cb));
	});
	if(gather) {
		return tink_core__$Signal_Signal_$Impl_$.gather(ret);
	} else {
		return ret;
	}
};
tink_core__$Signal_Signal_$Impl_$.nextTime = function(this1,condition) {
	var ret = new tink_core_FutureTrigger();
	var link = null;
	var immediate = false;
	link = this1.handle(function(v) {
		if(condition == null || condition(v)) {
			ret.trigger(v);
			if(link == null) {
				immediate = true;
			} else if(link != null) {
				link.cancel();
			}
		}
	});
	if(immediate) {
		if(link != null) {
			link.cancel();
		}
	}
	return ret;
};
tink_core__$Signal_Signal_$Impl_$.until = function(this1,end) {
	var ret = new tink_core__$Signal_Suspendable(function($yield) {
		var this2 = this1.handle($yield);
		if(this2 == null) {
			return tink_core__$Callback_CallbackLink_$Impl_$.noop;
		} else {
			return ($_=this2,$bind($_,$_.cancel));
		}
	});
	end.handle(tink_core__$Callback_Callback_$Impl_$.fromNiladic($bind(ret,ret.kill)));
	return ret;
};
tink_core__$Signal_Signal_$Impl_$.next = function(this1,condition) {
	return tink_core__$Signal_Signal_$Impl_$.nextTime(this1,condition);
};
tink_core__$Signal_Signal_$Impl_$.noise = function(this1) {
	return tink_core__$Signal_Signal_$Impl_$.map(this1,function(_) {
		return tink_core_Noise.Noise;
	});
};
tink_core__$Signal_Signal_$Impl_$.gather = function(this1) {
	var ret = tink_core__$Signal_Signal_$Impl_$.trigger();
	this1.handle(function(x) {
		tink_core__$Callback_CallbackList_$Impl_$.invoke(ret.handlers,x);
	});
	return ret;
};
tink_core__$Signal_Signal_$Impl_$.generate = function(generator) {
	var ret = tink_core__$Signal_Signal_$Impl_$.trigger();
	generator($bind(ret,ret.trigger));
	return ret;
};
tink_core__$Signal_Signal_$Impl_$.trigger = function() {
	return new tink_core_SignalTrigger();
};
tink_core__$Signal_Signal_$Impl_$.create = function(create) {
	return new tink_core__$Signal_Suspendable(create);
};
tink_core__$Signal_Signal_$Impl_$.ofClassical = function(add,remove,gather) {
	if(gather == null) {
		gather = true;
	}
	var ret = new tink_core__$Signal_SimpleSignal(function(cb) {
		var f = function(a) {
			tink_core__$Callback_Callback_$Impl_$.invoke(cb,a);
		};
		add(f);
		var f1 = remove;
		var a1 = f;
		return new tink_core__$Callback_SimpleLink(function() {
			f1(a1);
		});
	});
	if(gather) {
		return tink_core__$Signal_Signal_$Impl_$.gather(ret);
	} else {
		return ret;
	}
};
var tink_core_SignalObject = function() { };
tink_core_SignalObject.__name__ = true;
var tink_core__$Signal_SimpleSignal = function(f) {
	this.f = f;
};
tink_core__$Signal_SimpleSignal.__name__ = true;
tink_core__$Signal_SimpleSignal.__interfaces__ = [tink_core_SignalObject];
tink_core__$Signal_SimpleSignal.prototype = {
	handle: function(cb) {
		return this.f(cb);
	}
};
var tink_core__$Signal_Suspendable = function(activate) {
	this.killed = false;
	this.trigger = new tink_core_SignalTrigger();
	this.activate = activate;
};
tink_core__$Signal_Suspendable.__name__ = true;
tink_core__$Signal_Suspendable.__interfaces__ = [tink_core_SignalObject];
tink_core__$Signal_Suspendable.prototype = {
	kill: function() {
		if(!this.killed) {
			this.killed = true;
			this.trigger = null;
		}
	}
	,handle: function(cb) {
		var _gthis = this;
		if(this.killed) {
			return null;
		}
		if(this.trigger.handlers.length == 0) {
			this.suspend = this.activate(($_=this.trigger,$bind($_,$_.trigger)));
		}
		return new tink_core__$Callback_LinkPair(tink_core__$Callback_CallbackList_$Impl_$.add(this.trigger.handlers,cb),new tink_core__$Callback_SimpleLink(function() {
			if(_gthis.trigger.handlers.length == 0) {
				_gthis.suspend();
				_gthis.suspend = null;
			}
		}));
	}
};
var tink_core_SignalTrigger = function() {
	this.handlers = [];
};
tink_core_SignalTrigger.__name__ = true;
tink_core_SignalTrigger.__interfaces__ = [tink_core_SignalObject];
tink_core_SignalTrigger.prototype = {
	trigger: function(event) {
		tink_core__$Callback_CallbackList_$Impl_$.invoke(this.handlers,event);
	}
	,getLength: function() {
		return this.handlers.length;
	}
	,handle: function(cb) {
		return tink_core__$Callback_CallbackList_$Impl_$.add(this.handlers,cb);
	}
	,clear: function() {
		tink_core__$Callback_CallbackList_$Impl_$.clear(this.handlers);
	}
	,asSignal: function() {
		return this;
	}
};
function $getIterator(o) { if( o instanceof Array ) return HxOverrides.iter(o); else return o.iterator(); }
var $_, $fid = 0;
function $bind(o,m) { if( m == null ) return null; if( m.__id__ == null ) m.__id__ = $fid++; var f; if( o.hx__closures__ == null ) o.hx__closures__ = {}; else f = o.hx__closures__[m.__id__]; if( f == null ) { f = m.bind(o); o.hx__closures__[m.__id__] = f; } return f; }
String.__name__ = true;
Array.__name__ = true;
Date.__name__ = ["Date"];
haxe_ds_ObjectMap.count = 0;
var __map_reserved = {};
Object.defineProperty(js__$Boot_HaxeError.prototype,"message",{ get : function() {
	return String(this.val);
}});
Coords.small = postite_geom__$CoolPoint_Points_$Impl_$.fromArrayInt([{ x : 87, y : 150},{ x : 87, y : 148},{ x : 91, y : 140},{ x : 97, y : 133},{ x : 105, y : 127},{ x : 112, y : 124},{ x : 117, y : 124},{ x : 128, y : 124},{ x : 135, y : 135},{ x : 139, y : 144},{ x : 145, y : 161},{ x : 151, y : 175},{ x : 154, y : 187},{ x : 155, y : 199},{ x : 156, y : 210},{ x : 157, y : 215},{ x : 158, y : 222},{ x : 160, y : 226},{ x : 166, y : 230},{ x : 174, y : 234},{ x : 185, y : 237}]);
Coords.closed = [{ x : 294, y : 445, press : -1},{ x : 293, y : 444, press : 1},{ x : 290, y : 439, press : 1},{ x : 287, y : 435, press : 1},{ x : 285, y : 429, press : 1},{ x : 279, y : 420, press : 1},{ x : 276, y : 413, press : 1},{ x : 274, y : 405, press : 1},{ x : 272, y : 396, press : 1},{ x : 271, y : 387, press : 1},{ x : 270, y : 377, press : 1},{ x : 270, y : 370, press : 1},{ x : 270, y : 363, press : 1},{ x : 270, y : 355, press : 1},{ x : 270, y : 348, press : 1},{ x : 270, y : 341, press : 1},{ x : 272, y : 333, press : 1},{ x : 275, y : 326, press : 1},{ x : 278, y : 319, press : 1},{ x : 279, y : 315, press : 1},{ x : 283, y : 308, press : 1},{ x : 286, y : 304, press : 1},{ x : 290, y : 299, press : 1},{ x : 294, y : 293, press : 1},{ x : 300, y : 287, press : 1},{ x : 310, y : 279, press : 1},{ x : 320, y : 272, press : 1},{ x : 333, y : 262, press : 1},{ x : 345, y : 254, press : 1},{ x : 359, y : 244, press : 1},{ x : 396, y : 221, press : 1},{ x : 419, y : 207, press : 1},{ x : 442, y : 194, press : 1},{ x : 465, y : 182, press : 1},{ x : 509, y : 166, press : 1},{ x : 524, y : 164, press : 1},{ x : 539, y : 163, press : 1},{ x : 554, y : 163, press : 1},{ x : 562, y : 170, press : 1},{ x : 571, y : 181, press : 1},{ x : 583, y : 199, press : 1},{ x : 596, y : 219, press : 1},{ x : 607, y : 236, press : 1},{ x : 647, y : 311, press : 1},{ x : 648, y : 314, press : 1},{ x : 649, y : 319, press : 1},{ x : 652, y : 332, press : 1},{ x : 653, y : 355, press : 1},{ x : 652, y : 362, press : 1},{ x : 649, y : 368, press : 1},{ x : 635, y : 385, press : 1},{ x : 627, y : 393, press : 1},{ x : 610, y : 406, press : 1},{ x : 603, y : 410, press : 1},{ x : 590, y : 414, press : 1},{ x : 583, y : 415, press : 1},{ x : 578, y : 416, press : 1},{ x : 573, y : 417, press : 1},{ x : 567, y : 417, press : 1},{ x : 558, y : 417, press : 1},{ x : 553, y : 418, press : 1},{ x : 548, y : 418, press : 1},{ x : 535, y : 418, press : 1},{ x : 528, y : 418, press : 1},{ x : 522, y : 418, press : 1},{ x : 503, y : 418, press : 1},{ x : 497, y : 418, press : 1},{ x : 482, y : 418, press : 1},{ x : 473, y : 418, press : 1},{ x : 448, y : 418, press : 1},{ x : 440, y : 417, press : 1},{ x : 423, y : 414, press : 1},{ x : 415, y : 413, press : 1},{ x : 407, y : 412, press : 1},{ x : 392, y : 410, press : 1},{ x : 373, y : 409, press : 1},{ x : 367, y : 408, press : 1},{ x : 353, y : 408, press : 1},{ x : 347, y : 408, press : 1},{ x : 341, y : 408, press : 1},{ x : 335, y : 408, press : 1},{ x : 322, y : 412, press : 1},{ x : 316, y : 414, press : 1},{ x : 309, y : 416, press : 1},{ x : 301, y : 418, press : 1},{ x : 296, y : 419, press : 1},{ x : 289, y : 420, press : 1},{ x : 284, y : 421, press : 1},{ x : 279, y : 422, press : 1},{ x : 274, y : 423, press : 1},{ x : 270, y : 423, press : 1},{ x : 266, y : 423, press : 1},{ x : 262, y : 423, press : 1},{ x : 259, y : 423, press : 1},{ x : 256, y : 424, press : 1},{ x : 253, y : 425, press : 1},{ x : 251, y : 426, press : 1},{ x : 248, y : 428, press : 1},{ x : 247, y : 429, press : 1},{ x : 246, y : 429, press : 1},{ x : 245, y : 430, press : 1},{ x : 245, y : 431, press : 1},{ x : 245, y : 431, press : -1}];
Coords.path = [{ x : 87, y : 150, press : -1},{ x : 87, y : 148, press : 1},{ x : 91, y : 140, press : 1},{ x : 97, y : 133, press : 1},{ x : 105, y : 127, press : 1},{ x : 112, y : 124, press : 1},{ x : 117, y : 124, press : 1},{ x : 128, y : 124, press : 1},{ x : 135, y : 135, press : 1},{ x : 139, y : 144, press : 1},{ x : 145, y : 161, press : 1},{ x : 151, y : 175, press : 1},{ x : 154, y : 187, press : 1},{ x : 155, y : 199, press : 1},{ x : 156, y : 210, press : 1},{ x : 157, y : 215, press : 1},{ x : 158, y : 222, press : 1},{ x : 160, y : 226, press : 1},{ x : 166, y : 230, press : 1},{ x : 174, y : 234, press : 1},{ x : 185, y : 237, press : 1},{ x : 199, y : 238, press : 1},{ x : 212, y : 238, press : 1},{ x : 224, y : 238, press : 1},{ x : 229, y : 236, press : 1},{ x : 233, y : 231, press : 1},{ x : 234, y : 225, press : 1},{ x : 234, y : 217, press : 1},{ x : 234, y : 209, press : 1},{ x : 235, y : 204, press : 1},{ x : 237, y : 198, press : 1},{ x : 239, y : 195, press : 1},{ x : 244, y : 194, press : 1},{ x : 250, y : 194, press : 1},{ x : 260, y : 203, press : 1},{ x : 271, y : 215, press : 1},{ x : 279, y : 223, press : 1},{ x : 288, y : 234, press : 1},{ x : 294, y : 241, press : 1},{ x : 301, y : 248, press : 1},{ x : 306, y : 249, press : 1},{ x : 310, y : 249, press : 1},{ x : 315, y : 249, press : 1},{ x : 320, y : 249, press : 1},{ x : 325, y : 245, press : 1},{ x : 328, y : 242, press : 1},{ x : 329, y : 238, press : 1},{ x : 330, y : 234, press : 1},{ x : 331, y : 231, press : 1},{ x : 333, y : 228, press : 1},{ x : 335, y : 227, press : 1},{ x : 339, y : 226, press : 1},{ x : 345, y : 226, press : 1},{ x : 352, y : 230, press : 1},{ x : 358, y : 232, press : 1},{ x : 363, y : 233, press : 1},{ x : 366, y : 233, press : 1},{ x : 369, y : 231, press : 1},{ x : 369, y : 224, press : 1},{ x : 369, y : 214, press : 1},{ x : 369, y : 205, press : 1},{ x : 369, y : 197, press : 1},{ x : 370, y : 191, press : 1},{ x : 372, y : 188, press : 1},{ x : 377, y : 188, press : 1},{ x : 385, y : 188, press : 1},{ x : 398, y : 191, press : 1},{ x : 418, y : 204, press : 1},{ x : 428, y : 212, press : 1},{ x : 432, y : 218, press : 1},{ x : 434, y : 222, press : 1},{ x : 436, y : 226, press : 1},{ x : 436, y : 229, press : 1},{ x : 433, y : 234, press : 1},{ x : 425, y : 245, press : 1},{ x : 416, y : 258, press : 1},{ x : 403, y : 273, press : 1},{ x : 386, y : 289, press : 1},{ x : 366, y : 304, press : 1},{ x : 344, y : 315, press : 1},{ x : 323, y : 322, press : 1},{ x : 309, y : 327, press : 1},{ x : 292, y : 334, press : 1},{ x : 281, y : 340, press : 1},{ x : 275, y : 348, press : 1},{ x : 267, y : 360, press : 1},{ x : 260, y : 374, press : 1},{ x : 258, y : 389, press : 1},{ x : 257, y : 398, press : 1},{ x : 257, y : 407, press : 1},{ x : 259, y : 414, press : 1},{ x : 265, y : 417, press : 1},{ x : 275, y : 421, press : 1},{ x : 289, y : 421, press : 1},{ x : 303, y : 421, press : 1},{ x : 327, y : 421, press : 1},{ x : 336, y : 419, press : 1},{ x : 345, y : 416, press : 1},{ x : 351, y : 413, press : 1},{ x : 353, y : 411, press : 1},{ x : 354, y : 410, press : 1},{ x : 355, y : 410, press : 1},{ x : 356, y : 410, press : 1},{ x : 360, y : 410, press : 1},{ x : 367, y : 415, press : 1},{ x : 384, y : 422, press : 1},{ x : 393, y : 425, press : 1},{ x : 401, y : 425, press : 1},{ x : 408, y : 425, press : 1},{ x : 410, y : 421, press : 1},{ x : 410, y : 401, press : 1},{ x : 400, y : 379, press : 1},{ x : 386, y : 358, press : 1},{ x : 375, y : 346, press : 1},{ x : 369, y : 341, press : 1},{ x : 364, y : 335, press : 1},{ x : 360, y : 333, press : 1},{ x : 357, y : 332, press : 1},{ x : 353, y : 332, press : 1},{ x : 351, y : 332, press : 1},{ x : 351, y : 339, press : 1},{ x : 357, y : 348, press : 1},{ x : 367, y : 361, press : 1},{ x : 382, y : 370, press : 1},{ x : 394, y : 376, press : 1},{ x : 408, y : 381, press : 1},{ x : 419, y : 383, press : 1},{ x : 428, y : 383, press : 1},{ x : 435, y : 381, press : 1},{ x : 444, y : 381, press : 1},{ x : 449, y : 381, press : 1},{ x : 453, y : 384, press : 1},{ x : 457, y : 389, press : 1},{ x : 458, y : 393, press : 1},{ x : 459, y : 395, press : 1},{ x : 460, y : 398, press : 1},{ x : 460, y : 401, press : 1},{ x : 460, y : 406, press : 1},{ x : 460, y : 411, press : 1},{ x : 459, y : 417, press : 1},{ x : 453, y : 424, press : 1},{ x : 444, y : 428, press : 1},{ x : 433, y : 430, press : 1},{ x : 421, y : 430, press : 1},{ x : 407, y : 419, press : 1},{ x : 391, y : 408, press : 1},{ x : 374, y : 399, press : 1},{ x : 358, y : 389, press : 1},{ x : 344, y : 386, press : 1},{ x : 331, y : 386, press : 1},{ x : 317, y : 385, press : 1},{ x : 295, y : 385, press : 1},{ x : 278, y : 387, press : 1},{ x : 263, y : 396, press : 1},{ x : 252, y : 405, press : 1},{ x : 241, y : 414, press : 1},{ x : 234, y : 423, press : 1},{ x : 226, y : 433, press : 1},{ x : 221, y : 441, press : 1},{ x : 218, y : 447, press : 1},{ x : 217, y : 450, press : 1},{ x : 214, y : 455, press : 1},{ x : 212, y : 458, press : 1},{ x : 211, y : 460, press : 1},{ x : 211, y : 461, press : 1},{ x : 212, y : 461, press : 1},{ x : 219, y : 461, press : 1},{ x : 224, y : 460, press : 1},{ x : 229, y : 458, press : 1},{ x : 231, y : 457, press : 1},{ x : 232, y : 457, press : 1},{ x : 232, y : 456, press : 1},{ x : 231, y : 456, press : 1},{ x : 218, y : 455, press : 1},{ x : 200, y : 452, press : 1},{ x : 174, y : 447, press : 1},{ x : 156, y : 444, press : 1},{ x : 137, y : 439, press : 1},{ x : 124, y : 436, press : 1},{ x : 112, y : 432, press : 1},{ x : 105, y : 428, press : 1},{ x : 100, y : 425, press : 1},{ x : 95, y : 421, press : 1},{ x : 90, y : 418, press : 1},{ x : 88, y : 413, press : 1},{ x : 85, y : 409, press : 1},{ x : 82, y : 403, press : 1},{ x : 80, y : 394, press : 1},{ x : 79, y : 385, press : 1},{ x : 79, y : 372, press : 1},{ x : 79, y : 365, press : 1},{ x : 80, y : 359, press : 1},{ x : 84, y : 354, press : 1},{ x : 94, y : 347, press : 1},{ x : 99, y : 345, press : 1},{ x : 103, y : 342, press : 1},{ x : 107, y : 339, press : 1},{ x : 109, y : 337, press : 1},{ x : 111, y : 335, press : 1},{ x : 111, y : 331, press : 1},{ x : 111, y : 326, press : 1},{ x : 109, y : 321, press : 1},{ x : 99, y : 309, press : 1},{ x : 93, y : 303, press : 1},{ x : 86, y : 298, press : 1},{ x : 78, y : 294, press : 1},{ x : 70, y : 291, press : 1},{ x : 61, y : 289, press : 1},{ x : 56, y : 287, press : 1},{ x : 56, y : 287, press : -1}];
Dro.fill = "#ooaaff";
MockFlock.offseting = false;
MockFlock.bounding = false;
hxClipper_ClipperBase.HORIZONTAL = -3.4E+38;
hxClipper_ClipperBase.SKIP = -2;
hxClipper_ClipperBase.UNASSIGNED = -1;
hxClipper_ClipperBase.TOLERANCE = 1.0E-20;
hxClipper_ClipperBase.LO_RANGE = 32767;
hxClipper_ClipperBase.HI_RANGE = 32767;
hxClipper_ClipperOffset.TWO_PI = 6.283185307179586476925286766559;
hxClipper_ClipperOffset.DEFAULT_ARC_TOLERANCE = 0.25;
postite_geom_Geste.NumPoints = 64;
postite_geom_Geste.SquareSize = 250.0;
postite_geom_Geste.Origin = postite_geom__$CoolPoint_Point_$Impl_$._new(0,0);
postite_geom_Geste.Diagonal = Math.sqrt(postite_geom_Geste.SquareSize * postite_geom_Geste.SquareSize + postite_geom_Geste.SquareSize * postite_geom_Geste.SquareSize);
postite_geom_Geste.HalfDiagonal = 0.5 * postite_geom_Geste.Diagonal;
postite_geom_Geste.AngleRange = postite_geom_Geste.Deg2Rad(45.0);
postite_geom_Geste.AnglePrecision = postite_geom_Geste.Deg2Rad(2.0);
postite_geom_Geste.Phi = 0.5 * (-1.0 + Math.sqrt(5.0));
postite_geom_UnistrokePatterns.unimap = (function($this) {
	var $r;
	var _g = new haxe_ds_StringMap();
	{
		var value = [postite_geom__$CoolPoint_Point_$Impl_$._new(137,139),postite_geom__$CoolPoint_Point_$Impl_$._new(135,141),postite_geom__$CoolPoint_Point_$Impl_$._new(133,144),postite_geom__$CoolPoint_Point_$Impl_$._new(132,146),postite_geom__$CoolPoint_Point_$Impl_$._new(130,149),postite_geom__$CoolPoint_Point_$Impl_$._new(128,151),postite_geom__$CoolPoint_Point_$Impl_$._new(126,155),postite_geom__$CoolPoint_Point_$Impl_$._new(123,160),postite_geom__$CoolPoint_Point_$Impl_$._new(120,166),postite_geom__$CoolPoint_Point_$Impl_$._new(116,171),postite_geom__$CoolPoint_Point_$Impl_$._new(112,177),postite_geom__$CoolPoint_Point_$Impl_$._new(107,183),postite_geom__$CoolPoint_Point_$Impl_$._new(102,188),postite_geom__$CoolPoint_Point_$Impl_$._new(100,191),postite_geom__$CoolPoint_Point_$Impl_$._new(95,195),postite_geom__$CoolPoint_Point_$Impl_$._new(90,199),postite_geom__$CoolPoint_Point_$Impl_$._new(86,203),postite_geom__$CoolPoint_Point_$Impl_$._new(82,206),postite_geom__$CoolPoint_Point_$Impl_$._new(80,209),postite_geom__$CoolPoint_Point_$Impl_$._new(75,213),postite_geom__$CoolPoint_Point_$Impl_$._new(73,213),postite_geom__$CoolPoint_Point_$Impl_$._new(70,216),postite_geom__$CoolPoint_Point_$Impl_$._new(67,219),postite_geom__$CoolPoint_Point_$Impl_$._new(64,221),postite_geom__$CoolPoint_Point_$Impl_$._new(61,223),postite_geom__$CoolPoint_Point_$Impl_$._new(60,225),postite_geom__$CoolPoint_Point_$Impl_$._new(62,226),postite_geom__$CoolPoint_Point_$Impl_$._new(65,225),postite_geom__$CoolPoint_Point_$Impl_$._new(67,226),postite_geom__$CoolPoint_Point_$Impl_$._new(74,226),postite_geom__$CoolPoint_Point_$Impl_$._new(77,227),postite_geom__$CoolPoint_Point_$Impl_$._new(85,229),postite_geom__$CoolPoint_Point_$Impl_$._new(91,230),postite_geom__$CoolPoint_Point_$Impl_$._new(99,231),postite_geom__$CoolPoint_Point_$Impl_$._new(108,232),postite_geom__$CoolPoint_Point_$Impl_$._new(116,233),postite_geom__$CoolPoint_Point_$Impl_$._new(125,233),postite_geom__$CoolPoint_Point_$Impl_$._new(134,234),postite_geom__$CoolPoint_Point_$Impl_$._new(145,233),postite_geom__$CoolPoint_Point_$Impl_$._new(153,232),postite_geom__$CoolPoint_Point_$Impl_$._new(160,233),postite_geom__$CoolPoint_Point_$Impl_$._new(170,234),postite_geom__$CoolPoint_Point_$Impl_$._new(177,235),postite_geom__$CoolPoint_Point_$Impl_$._new(179,236),postite_geom__$CoolPoint_Point_$Impl_$._new(186,237),postite_geom__$CoolPoint_Point_$Impl_$._new(193,238),postite_geom__$CoolPoint_Point_$Impl_$._new(198,239),postite_geom__$CoolPoint_Point_$Impl_$._new(200,237),postite_geom__$CoolPoint_Point_$Impl_$._new(202,239),postite_geom__$CoolPoint_Point_$Impl_$._new(204,238),postite_geom__$CoolPoint_Point_$Impl_$._new(206,234),postite_geom__$CoolPoint_Point_$Impl_$._new(205,230),postite_geom__$CoolPoint_Point_$Impl_$._new(202,222),postite_geom__$CoolPoint_Point_$Impl_$._new(197,216),postite_geom__$CoolPoint_Point_$Impl_$._new(192,207),postite_geom__$CoolPoint_Point_$Impl_$._new(186,198),postite_geom__$CoolPoint_Point_$Impl_$._new(179,189),postite_geom__$CoolPoint_Point_$Impl_$._new(174,183),postite_geom__$CoolPoint_Point_$Impl_$._new(170,178),postite_geom__$CoolPoint_Point_$Impl_$._new(164,171),postite_geom__$CoolPoint_Point_$Impl_$._new(161,168),postite_geom__$CoolPoint_Point_$Impl_$._new(154,160),postite_geom__$CoolPoint_Point_$Impl_$._new(148,155),postite_geom__$CoolPoint_Point_$Impl_$._new(143,150),postite_geom__$CoolPoint_Point_$Impl_$._new(138,148),postite_geom__$CoolPoint_Point_$Impl_$._new(136,148)];
		if(__map_reserved["triangle"] != null) {
			_g.setReserved("triangle",value);
		} else {
			_g.h["triangle"] = value;
		}
	}
	{
		var value1 = [postite_geom__$CoolPoint_Point_$Impl_$._new(87,142),postite_geom__$CoolPoint_Point_$Impl_$._new(89,145),postite_geom__$CoolPoint_Point_$Impl_$._new(91,148),postite_geom__$CoolPoint_Point_$Impl_$._new(93,151),postite_geom__$CoolPoint_Point_$Impl_$._new(96,155),postite_geom__$CoolPoint_Point_$Impl_$._new(98,157),postite_geom__$CoolPoint_Point_$Impl_$._new(100,160),postite_geom__$CoolPoint_Point_$Impl_$._new(102,162),postite_geom__$CoolPoint_Point_$Impl_$._new(106,167),postite_geom__$CoolPoint_Point_$Impl_$._new(108,169),postite_geom__$CoolPoint_Point_$Impl_$._new(110,171),postite_geom__$CoolPoint_Point_$Impl_$._new(115,177),postite_geom__$CoolPoint_Point_$Impl_$._new(119,183),postite_geom__$CoolPoint_Point_$Impl_$._new(123,189),postite_geom__$CoolPoint_Point_$Impl_$._new(127,193),postite_geom__$CoolPoint_Point_$Impl_$._new(129,196),postite_geom__$CoolPoint_Point_$Impl_$._new(133,200),postite_geom__$CoolPoint_Point_$Impl_$._new(137,206),postite_geom__$CoolPoint_Point_$Impl_$._new(140,209),postite_geom__$CoolPoint_Point_$Impl_$._new(143,212),postite_geom__$CoolPoint_Point_$Impl_$._new(146,215),postite_geom__$CoolPoint_Point_$Impl_$._new(151,220),postite_geom__$CoolPoint_Point_$Impl_$._new(153,222),postite_geom__$CoolPoint_Point_$Impl_$._new(155,223),postite_geom__$CoolPoint_Point_$Impl_$._new(157,225),postite_geom__$CoolPoint_Point_$Impl_$._new(158,223),postite_geom__$CoolPoint_Point_$Impl_$._new(157,218),postite_geom__$CoolPoint_Point_$Impl_$._new(155,211),postite_geom__$CoolPoint_Point_$Impl_$._new(154,208),postite_geom__$CoolPoint_Point_$Impl_$._new(152,200),postite_geom__$CoolPoint_Point_$Impl_$._new(150,189),postite_geom__$CoolPoint_Point_$Impl_$._new(148,179),postite_geom__$CoolPoint_Point_$Impl_$._new(147,170),postite_geom__$CoolPoint_Point_$Impl_$._new(147,158),postite_geom__$CoolPoint_Point_$Impl_$._new(147,148),postite_geom__$CoolPoint_Point_$Impl_$._new(147,141),postite_geom__$CoolPoint_Point_$Impl_$._new(147,136),postite_geom__$CoolPoint_Point_$Impl_$._new(144,135),postite_geom__$CoolPoint_Point_$Impl_$._new(142,137),postite_geom__$CoolPoint_Point_$Impl_$._new(140,139),postite_geom__$CoolPoint_Point_$Impl_$._new(135,145),postite_geom__$CoolPoint_Point_$Impl_$._new(131,152),postite_geom__$CoolPoint_Point_$Impl_$._new(124,163),postite_geom__$CoolPoint_Point_$Impl_$._new(116,177),postite_geom__$CoolPoint_Point_$Impl_$._new(108,191),postite_geom__$CoolPoint_Point_$Impl_$._new(100,206),postite_geom__$CoolPoint_Point_$Impl_$._new(94,217),postite_geom__$CoolPoint_Point_$Impl_$._new(91,222),postite_geom__$CoolPoint_Point_$Impl_$._new(89,225),postite_geom__$CoolPoint_Point_$Impl_$._new(87,226),postite_geom__$CoolPoint_Point_$Impl_$._new(87,224)];
		if(__map_reserved["x"] != null) {
			_g.setReserved("x",value1);
		} else {
			_g.h["x"] = value1;
		}
	}
	{
		var value2 = [postite_geom__$CoolPoint_Point_$Impl_$._new(78,149),postite_geom__$CoolPoint_Point_$Impl_$._new(78,153),postite_geom__$CoolPoint_Point_$Impl_$._new(78,157),postite_geom__$CoolPoint_Point_$Impl_$._new(78,160),postite_geom__$CoolPoint_Point_$Impl_$._new(79,162),postite_geom__$CoolPoint_Point_$Impl_$._new(79,164),postite_geom__$CoolPoint_Point_$Impl_$._new(79,167),postite_geom__$CoolPoint_Point_$Impl_$._new(79,169),postite_geom__$CoolPoint_Point_$Impl_$._new(79,173),postite_geom__$CoolPoint_Point_$Impl_$._new(79,178),postite_geom__$CoolPoint_Point_$Impl_$._new(79,183),postite_geom__$CoolPoint_Point_$Impl_$._new(80,189),postite_geom__$CoolPoint_Point_$Impl_$._new(80,193),postite_geom__$CoolPoint_Point_$Impl_$._new(80,198),postite_geom__$CoolPoint_Point_$Impl_$._new(80,202),postite_geom__$CoolPoint_Point_$Impl_$._new(81,208),postite_geom__$CoolPoint_Point_$Impl_$._new(81,210),postite_geom__$CoolPoint_Point_$Impl_$._new(81,216),postite_geom__$CoolPoint_Point_$Impl_$._new(82,222),postite_geom__$CoolPoint_Point_$Impl_$._new(82,224),postite_geom__$CoolPoint_Point_$Impl_$._new(82,227),postite_geom__$CoolPoint_Point_$Impl_$._new(83,229),postite_geom__$CoolPoint_Point_$Impl_$._new(83,231),postite_geom__$CoolPoint_Point_$Impl_$._new(85,230),postite_geom__$CoolPoint_Point_$Impl_$._new(88,232),postite_geom__$CoolPoint_Point_$Impl_$._new(90,233),postite_geom__$CoolPoint_Point_$Impl_$._new(92,232),postite_geom__$CoolPoint_Point_$Impl_$._new(94,233),postite_geom__$CoolPoint_Point_$Impl_$._new(99,232),postite_geom__$CoolPoint_Point_$Impl_$._new(102,233),postite_geom__$CoolPoint_Point_$Impl_$._new(106,233),postite_geom__$CoolPoint_Point_$Impl_$._new(109,234),postite_geom__$CoolPoint_Point_$Impl_$._new(117,235),postite_geom__$CoolPoint_Point_$Impl_$._new(123,236),postite_geom__$CoolPoint_Point_$Impl_$._new(126,236),postite_geom__$CoolPoint_Point_$Impl_$._new(135,237),postite_geom__$CoolPoint_Point_$Impl_$._new(142,238),postite_geom__$CoolPoint_Point_$Impl_$._new(145,238),postite_geom__$CoolPoint_Point_$Impl_$._new(152,238),postite_geom__$CoolPoint_Point_$Impl_$._new(154,239),postite_geom__$CoolPoint_Point_$Impl_$._new(165,238),postite_geom__$CoolPoint_Point_$Impl_$._new(174,237),postite_geom__$CoolPoint_Point_$Impl_$._new(179,236),postite_geom__$CoolPoint_Point_$Impl_$._new(186,235),postite_geom__$CoolPoint_Point_$Impl_$._new(191,235),postite_geom__$CoolPoint_Point_$Impl_$._new(195,233),postite_geom__$CoolPoint_Point_$Impl_$._new(197,233),postite_geom__$CoolPoint_Point_$Impl_$._new(200,233),postite_geom__$CoolPoint_Point_$Impl_$._new(201,235),postite_geom__$CoolPoint_Point_$Impl_$._new(201,233),postite_geom__$CoolPoint_Point_$Impl_$._new(199,231),postite_geom__$CoolPoint_Point_$Impl_$._new(198,226),postite_geom__$CoolPoint_Point_$Impl_$._new(198,220),postite_geom__$CoolPoint_Point_$Impl_$._new(196,207),postite_geom__$CoolPoint_Point_$Impl_$._new(195,195),postite_geom__$CoolPoint_Point_$Impl_$._new(195,181),postite_geom__$CoolPoint_Point_$Impl_$._new(195,173),postite_geom__$CoolPoint_Point_$Impl_$._new(195,163),postite_geom__$CoolPoint_Point_$Impl_$._new(194,155),postite_geom__$CoolPoint_Point_$Impl_$._new(192,145),postite_geom__$CoolPoint_Point_$Impl_$._new(192,143),postite_geom__$CoolPoint_Point_$Impl_$._new(192,138),postite_geom__$CoolPoint_Point_$Impl_$._new(191,135),postite_geom__$CoolPoint_Point_$Impl_$._new(191,133),postite_geom__$CoolPoint_Point_$Impl_$._new(191,130),postite_geom__$CoolPoint_Point_$Impl_$._new(190,128),postite_geom__$CoolPoint_Point_$Impl_$._new(188,129),postite_geom__$CoolPoint_Point_$Impl_$._new(186,129),postite_geom__$CoolPoint_Point_$Impl_$._new(181,132),postite_geom__$CoolPoint_Point_$Impl_$._new(173,131),postite_geom__$CoolPoint_Point_$Impl_$._new(162,131),postite_geom__$CoolPoint_Point_$Impl_$._new(151,132),postite_geom__$CoolPoint_Point_$Impl_$._new(149,132),postite_geom__$CoolPoint_Point_$Impl_$._new(138,132),postite_geom__$CoolPoint_Point_$Impl_$._new(136,132),postite_geom__$CoolPoint_Point_$Impl_$._new(122,131),postite_geom__$CoolPoint_Point_$Impl_$._new(120,131),postite_geom__$CoolPoint_Point_$Impl_$._new(109,130),postite_geom__$CoolPoint_Point_$Impl_$._new(107,130),postite_geom__$CoolPoint_Point_$Impl_$._new(90,132),postite_geom__$CoolPoint_Point_$Impl_$._new(81,133),postite_geom__$CoolPoint_Point_$Impl_$._new(76,133)];
		if(__map_reserved["rectangle"] != null) {
			_g.setReserved("rectangle",value2);
		} else {
			_g.h["rectangle"] = value2;
		}
	}
	{
		var value3 = [postite_geom__$CoolPoint_Point_$Impl_$._new(127,141),postite_geom__$CoolPoint_Point_$Impl_$._new(124,140),postite_geom__$CoolPoint_Point_$Impl_$._new(120,139),postite_geom__$CoolPoint_Point_$Impl_$._new(118,139),postite_geom__$CoolPoint_Point_$Impl_$._new(116,139),postite_geom__$CoolPoint_Point_$Impl_$._new(111,140),postite_geom__$CoolPoint_Point_$Impl_$._new(109,141),postite_geom__$CoolPoint_Point_$Impl_$._new(104,144),postite_geom__$CoolPoint_Point_$Impl_$._new(100,147),postite_geom__$CoolPoint_Point_$Impl_$._new(96,152),postite_geom__$CoolPoint_Point_$Impl_$._new(93,157),postite_geom__$CoolPoint_Point_$Impl_$._new(90,163),postite_geom__$CoolPoint_Point_$Impl_$._new(87,169),postite_geom__$CoolPoint_Point_$Impl_$._new(85,175),postite_geom__$CoolPoint_Point_$Impl_$._new(83,181),postite_geom__$CoolPoint_Point_$Impl_$._new(82,190),postite_geom__$CoolPoint_Point_$Impl_$._new(82,195),postite_geom__$CoolPoint_Point_$Impl_$._new(83,200),postite_geom__$CoolPoint_Point_$Impl_$._new(84,205),postite_geom__$CoolPoint_Point_$Impl_$._new(88,213),postite_geom__$CoolPoint_Point_$Impl_$._new(91,216),postite_geom__$CoolPoint_Point_$Impl_$._new(96,219),postite_geom__$CoolPoint_Point_$Impl_$._new(103,222),postite_geom__$CoolPoint_Point_$Impl_$._new(108,224),postite_geom__$CoolPoint_Point_$Impl_$._new(111,224),postite_geom__$CoolPoint_Point_$Impl_$._new(120,224),postite_geom__$CoolPoint_Point_$Impl_$._new(133,223),postite_geom__$CoolPoint_Point_$Impl_$._new(142,222),postite_geom__$CoolPoint_Point_$Impl_$._new(152,218),postite_geom__$CoolPoint_Point_$Impl_$._new(160,214),postite_geom__$CoolPoint_Point_$Impl_$._new(167,210),postite_geom__$CoolPoint_Point_$Impl_$._new(173,204),postite_geom__$CoolPoint_Point_$Impl_$._new(178,198),postite_geom__$CoolPoint_Point_$Impl_$._new(179,196),postite_geom__$CoolPoint_Point_$Impl_$._new(182,188),postite_geom__$CoolPoint_Point_$Impl_$._new(182,177),postite_geom__$CoolPoint_Point_$Impl_$._new(178,167),postite_geom__$CoolPoint_Point_$Impl_$._new(170,150),postite_geom__$CoolPoint_Point_$Impl_$._new(163,138),postite_geom__$CoolPoint_Point_$Impl_$._new(152,130),postite_geom__$CoolPoint_Point_$Impl_$._new(143,129),postite_geom__$CoolPoint_Point_$Impl_$._new(140,131),postite_geom__$CoolPoint_Point_$Impl_$._new(129,136),postite_geom__$CoolPoint_Point_$Impl_$._new(126,139)];
		if(__map_reserved["circle"] != null) {
			_g.setReserved("circle",value3);
		} else {
			_g.h["circle"] = value3;
		}
	}
	{
		var value4 = [postite_geom__$CoolPoint_Point_$Impl_$._new(91,185),postite_geom__$CoolPoint_Point_$Impl_$._new(93,185),postite_geom__$CoolPoint_Point_$Impl_$._new(95,185),postite_geom__$CoolPoint_Point_$Impl_$._new(97,185),postite_geom__$CoolPoint_Point_$Impl_$._new(100,188),postite_geom__$CoolPoint_Point_$Impl_$._new(102,189),postite_geom__$CoolPoint_Point_$Impl_$._new(104,190),postite_geom__$CoolPoint_Point_$Impl_$._new(106,193),postite_geom__$CoolPoint_Point_$Impl_$._new(108,195),postite_geom__$CoolPoint_Point_$Impl_$._new(110,198),postite_geom__$CoolPoint_Point_$Impl_$._new(112,201),postite_geom__$CoolPoint_Point_$Impl_$._new(114,204),postite_geom__$CoolPoint_Point_$Impl_$._new(115,207),postite_geom__$CoolPoint_Point_$Impl_$._new(117,210),postite_geom__$CoolPoint_Point_$Impl_$._new(118,212),postite_geom__$CoolPoint_Point_$Impl_$._new(120,214),postite_geom__$CoolPoint_Point_$Impl_$._new(121,217),postite_geom__$CoolPoint_Point_$Impl_$._new(122,219),postite_geom__$CoolPoint_Point_$Impl_$._new(123,222),postite_geom__$CoolPoint_Point_$Impl_$._new(124,224),postite_geom__$CoolPoint_Point_$Impl_$._new(126,226),postite_geom__$CoolPoint_Point_$Impl_$._new(127,229),postite_geom__$CoolPoint_Point_$Impl_$._new(129,231),postite_geom__$CoolPoint_Point_$Impl_$._new(130,233),postite_geom__$CoolPoint_Point_$Impl_$._new(129,231),postite_geom__$CoolPoint_Point_$Impl_$._new(129,228),postite_geom__$CoolPoint_Point_$Impl_$._new(129,226),postite_geom__$CoolPoint_Point_$Impl_$._new(129,224),postite_geom__$CoolPoint_Point_$Impl_$._new(129,221),postite_geom__$CoolPoint_Point_$Impl_$._new(129,218),postite_geom__$CoolPoint_Point_$Impl_$._new(129,212),postite_geom__$CoolPoint_Point_$Impl_$._new(129,208),postite_geom__$CoolPoint_Point_$Impl_$._new(130,198),postite_geom__$CoolPoint_Point_$Impl_$._new(132,189),postite_geom__$CoolPoint_Point_$Impl_$._new(134,182),postite_geom__$CoolPoint_Point_$Impl_$._new(137,173),postite_geom__$CoolPoint_Point_$Impl_$._new(143,164),postite_geom__$CoolPoint_Point_$Impl_$._new(147,157),postite_geom__$CoolPoint_Point_$Impl_$._new(151,151),postite_geom__$CoolPoint_Point_$Impl_$._new(155,144),postite_geom__$CoolPoint_Point_$Impl_$._new(161,137),postite_geom__$CoolPoint_Point_$Impl_$._new(165,131),postite_geom__$CoolPoint_Point_$Impl_$._new(171,122),postite_geom__$CoolPoint_Point_$Impl_$._new(174,118),postite_geom__$CoolPoint_Point_$Impl_$._new(176,114),postite_geom__$CoolPoint_Point_$Impl_$._new(177,112),postite_geom__$CoolPoint_Point_$Impl_$._new(177,114),postite_geom__$CoolPoint_Point_$Impl_$._new(175,116),postite_geom__$CoolPoint_Point_$Impl_$._new(173,118)];
		if(__map_reserved["check"] != null) {
			_g.setReserved("check",value4);
		} else {
			_g.h["check"] = value4;
		}
	}
	{
		var value5 = [postite_geom__$CoolPoint_Point_$Impl_$._new(79,245),postite_geom__$CoolPoint_Point_$Impl_$._new(79,242),postite_geom__$CoolPoint_Point_$Impl_$._new(79,239),postite_geom__$CoolPoint_Point_$Impl_$._new(80,237),postite_geom__$CoolPoint_Point_$Impl_$._new(80,234),postite_geom__$CoolPoint_Point_$Impl_$._new(81,232),postite_geom__$CoolPoint_Point_$Impl_$._new(82,230),postite_geom__$CoolPoint_Point_$Impl_$._new(84,224),postite_geom__$CoolPoint_Point_$Impl_$._new(86,220),postite_geom__$CoolPoint_Point_$Impl_$._new(86,218),postite_geom__$CoolPoint_Point_$Impl_$._new(87,216),postite_geom__$CoolPoint_Point_$Impl_$._new(88,213),postite_geom__$CoolPoint_Point_$Impl_$._new(90,207),postite_geom__$CoolPoint_Point_$Impl_$._new(91,202),postite_geom__$CoolPoint_Point_$Impl_$._new(92,200),postite_geom__$CoolPoint_Point_$Impl_$._new(93,194),postite_geom__$CoolPoint_Point_$Impl_$._new(94,192),postite_geom__$CoolPoint_Point_$Impl_$._new(96,189),postite_geom__$CoolPoint_Point_$Impl_$._new(97,186),postite_geom__$CoolPoint_Point_$Impl_$._new(100,179),postite_geom__$CoolPoint_Point_$Impl_$._new(102,173),postite_geom__$CoolPoint_Point_$Impl_$._new(105,165),postite_geom__$CoolPoint_Point_$Impl_$._new(107,160),postite_geom__$CoolPoint_Point_$Impl_$._new(109,158),postite_geom__$CoolPoint_Point_$Impl_$._new(112,151),postite_geom__$CoolPoint_Point_$Impl_$._new(115,144),postite_geom__$CoolPoint_Point_$Impl_$._new(117,139),postite_geom__$CoolPoint_Point_$Impl_$._new(119,136),postite_geom__$CoolPoint_Point_$Impl_$._new(119,134),postite_geom__$CoolPoint_Point_$Impl_$._new(120,132),postite_geom__$CoolPoint_Point_$Impl_$._new(121,129),postite_geom__$CoolPoint_Point_$Impl_$._new(122,127),postite_geom__$CoolPoint_Point_$Impl_$._new(124,125),postite_geom__$CoolPoint_Point_$Impl_$._new(126,124),postite_geom__$CoolPoint_Point_$Impl_$._new(129,125),postite_geom__$CoolPoint_Point_$Impl_$._new(131,127),postite_geom__$CoolPoint_Point_$Impl_$._new(132,130),postite_geom__$CoolPoint_Point_$Impl_$._new(136,139),postite_geom__$CoolPoint_Point_$Impl_$._new(141,154),postite_geom__$CoolPoint_Point_$Impl_$._new(145,166),postite_geom__$CoolPoint_Point_$Impl_$._new(151,182),postite_geom__$CoolPoint_Point_$Impl_$._new(156,193),postite_geom__$CoolPoint_Point_$Impl_$._new(157,196),postite_geom__$CoolPoint_Point_$Impl_$._new(161,209),postite_geom__$CoolPoint_Point_$Impl_$._new(162,211),postite_geom__$CoolPoint_Point_$Impl_$._new(167,223),postite_geom__$CoolPoint_Point_$Impl_$._new(169,229),postite_geom__$CoolPoint_Point_$Impl_$._new(170,231),postite_geom__$CoolPoint_Point_$Impl_$._new(173,237),postite_geom__$CoolPoint_Point_$Impl_$._new(176,242),postite_geom__$CoolPoint_Point_$Impl_$._new(177,244),postite_geom__$CoolPoint_Point_$Impl_$._new(179,250),postite_geom__$CoolPoint_Point_$Impl_$._new(181,255),postite_geom__$CoolPoint_Point_$Impl_$._new(182,257)];
		if(__map_reserved["caret"] != null) {
			_g.setReserved("caret",value5);
		} else {
			_g.h["caret"] = value5;
		}
	}
	{
		var value6 = [postite_geom__$CoolPoint_Point_$Impl_$._new(68,222),postite_geom__$CoolPoint_Point_$Impl_$._new(70,220),postite_geom__$CoolPoint_Point_$Impl_$._new(73,218),postite_geom__$CoolPoint_Point_$Impl_$._new(75,217),postite_geom__$CoolPoint_Point_$Impl_$._new(77,215),postite_geom__$CoolPoint_Point_$Impl_$._new(80,213),postite_geom__$CoolPoint_Point_$Impl_$._new(82,212),postite_geom__$CoolPoint_Point_$Impl_$._new(84,210),postite_geom__$CoolPoint_Point_$Impl_$._new(87,209),postite_geom__$CoolPoint_Point_$Impl_$._new(89,208),postite_geom__$CoolPoint_Point_$Impl_$._new(92,206),postite_geom__$CoolPoint_Point_$Impl_$._new(95,204),postite_geom__$CoolPoint_Point_$Impl_$._new(101,201),postite_geom__$CoolPoint_Point_$Impl_$._new(106,198),postite_geom__$CoolPoint_Point_$Impl_$._new(112,194),postite_geom__$CoolPoint_Point_$Impl_$._new(118,191),postite_geom__$CoolPoint_Point_$Impl_$._new(124,187),postite_geom__$CoolPoint_Point_$Impl_$._new(127,186),postite_geom__$CoolPoint_Point_$Impl_$._new(132,183),postite_geom__$CoolPoint_Point_$Impl_$._new(138,181),postite_geom__$CoolPoint_Point_$Impl_$._new(141,180),postite_geom__$CoolPoint_Point_$Impl_$._new(146,178),postite_geom__$CoolPoint_Point_$Impl_$._new(154,173),postite_geom__$CoolPoint_Point_$Impl_$._new(159,171),postite_geom__$CoolPoint_Point_$Impl_$._new(161,170),postite_geom__$CoolPoint_Point_$Impl_$._new(166,167),postite_geom__$CoolPoint_Point_$Impl_$._new(168,167),postite_geom__$CoolPoint_Point_$Impl_$._new(171,166),postite_geom__$CoolPoint_Point_$Impl_$._new(174,164),postite_geom__$CoolPoint_Point_$Impl_$._new(177,162),postite_geom__$CoolPoint_Point_$Impl_$._new(180,160),postite_geom__$CoolPoint_Point_$Impl_$._new(182,158),postite_geom__$CoolPoint_Point_$Impl_$._new(183,156),postite_geom__$CoolPoint_Point_$Impl_$._new(181,154),postite_geom__$CoolPoint_Point_$Impl_$._new(178,153),postite_geom__$CoolPoint_Point_$Impl_$._new(171,153),postite_geom__$CoolPoint_Point_$Impl_$._new(164,153),postite_geom__$CoolPoint_Point_$Impl_$._new(160,153),postite_geom__$CoolPoint_Point_$Impl_$._new(150,154),postite_geom__$CoolPoint_Point_$Impl_$._new(147,155),postite_geom__$CoolPoint_Point_$Impl_$._new(141,157),postite_geom__$CoolPoint_Point_$Impl_$._new(137,158),postite_geom__$CoolPoint_Point_$Impl_$._new(135,158),postite_geom__$CoolPoint_Point_$Impl_$._new(137,158),postite_geom__$CoolPoint_Point_$Impl_$._new(140,157),postite_geom__$CoolPoint_Point_$Impl_$._new(143,156),postite_geom__$CoolPoint_Point_$Impl_$._new(151,154),postite_geom__$CoolPoint_Point_$Impl_$._new(160,152),postite_geom__$CoolPoint_Point_$Impl_$._new(170,149),postite_geom__$CoolPoint_Point_$Impl_$._new(179,147),postite_geom__$CoolPoint_Point_$Impl_$._new(185,145),postite_geom__$CoolPoint_Point_$Impl_$._new(192,144),postite_geom__$CoolPoint_Point_$Impl_$._new(196,144),postite_geom__$CoolPoint_Point_$Impl_$._new(198,144),postite_geom__$CoolPoint_Point_$Impl_$._new(200,144),postite_geom__$CoolPoint_Point_$Impl_$._new(201,147),postite_geom__$CoolPoint_Point_$Impl_$._new(199,149),postite_geom__$CoolPoint_Point_$Impl_$._new(194,157),postite_geom__$CoolPoint_Point_$Impl_$._new(191,160),postite_geom__$CoolPoint_Point_$Impl_$._new(186,167),postite_geom__$CoolPoint_Point_$Impl_$._new(180,176),postite_geom__$CoolPoint_Point_$Impl_$._new(177,179),postite_geom__$CoolPoint_Point_$Impl_$._new(171,187),postite_geom__$CoolPoint_Point_$Impl_$._new(169,189),postite_geom__$CoolPoint_Point_$Impl_$._new(165,194),postite_geom__$CoolPoint_Point_$Impl_$._new(164,196)];
		if(__map_reserved["arrow"] != null) {
			_g.setReserved("arrow",value6);
		} else {
			_g.h["arrow"] = value6;
		}
	}
	{
		var value7 = [postite_geom__$CoolPoint_Point_$Impl_$._new(140,124),postite_geom__$CoolPoint_Point_$Impl_$._new(138,123),postite_geom__$CoolPoint_Point_$Impl_$._new(135,122),postite_geom__$CoolPoint_Point_$Impl_$._new(133,123),postite_geom__$CoolPoint_Point_$Impl_$._new(130,123),postite_geom__$CoolPoint_Point_$Impl_$._new(128,124),postite_geom__$CoolPoint_Point_$Impl_$._new(125,125),postite_geom__$CoolPoint_Point_$Impl_$._new(122,124),postite_geom__$CoolPoint_Point_$Impl_$._new(120,124),postite_geom__$CoolPoint_Point_$Impl_$._new(118,124),postite_geom__$CoolPoint_Point_$Impl_$._new(116,125),postite_geom__$CoolPoint_Point_$Impl_$._new(113,125),postite_geom__$CoolPoint_Point_$Impl_$._new(111,125),postite_geom__$CoolPoint_Point_$Impl_$._new(108,124),postite_geom__$CoolPoint_Point_$Impl_$._new(106,125),postite_geom__$CoolPoint_Point_$Impl_$._new(104,125),postite_geom__$CoolPoint_Point_$Impl_$._new(102,124),postite_geom__$CoolPoint_Point_$Impl_$._new(100,123),postite_geom__$CoolPoint_Point_$Impl_$._new(98,123),postite_geom__$CoolPoint_Point_$Impl_$._new(95,124),postite_geom__$CoolPoint_Point_$Impl_$._new(93,123),postite_geom__$CoolPoint_Point_$Impl_$._new(90,124),postite_geom__$CoolPoint_Point_$Impl_$._new(88,124),postite_geom__$CoolPoint_Point_$Impl_$._new(85,125),postite_geom__$CoolPoint_Point_$Impl_$._new(83,126),postite_geom__$CoolPoint_Point_$Impl_$._new(81,127),postite_geom__$CoolPoint_Point_$Impl_$._new(81,129),postite_geom__$CoolPoint_Point_$Impl_$._new(82,131),postite_geom__$CoolPoint_Point_$Impl_$._new(82,134),postite_geom__$CoolPoint_Point_$Impl_$._new(83,138),postite_geom__$CoolPoint_Point_$Impl_$._new(84,141),postite_geom__$CoolPoint_Point_$Impl_$._new(84,144),postite_geom__$CoolPoint_Point_$Impl_$._new(85,148),postite_geom__$CoolPoint_Point_$Impl_$._new(85,151),postite_geom__$CoolPoint_Point_$Impl_$._new(86,156),postite_geom__$CoolPoint_Point_$Impl_$._new(86,160),postite_geom__$CoolPoint_Point_$Impl_$._new(86,164),postite_geom__$CoolPoint_Point_$Impl_$._new(86,168),postite_geom__$CoolPoint_Point_$Impl_$._new(87,171),postite_geom__$CoolPoint_Point_$Impl_$._new(87,175),postite_geom__$CoolPoint_Point_$Impl_$._new(87,179),postite_geom__$CoolPoint_Point_$Impl_$._new(87,182),postite_geom__$CoolPoint_Point_$Impl_$._new(87,186),postite_geom__$CoolPoint_Point_$Impl_$._new(88,188),postite_geom__$CoolPoint_Point_$Impl_$._new(88,195),postite_geom__$CoolPoint_Point_$Impl_$._new(88,198),postite_geom__$CoolPoint_Point_$Impl_$._new(88,201),postite_geom__$CoolPoint_Point_$Impl_$._new(88,207),postite_geom__$CoolPoint_Point_$Impl_$._new(89,211),postite_geom__$CoolPoint_Point_$Impl_$._new(89,213),postite_geom__$CoolPoint_Point_$Impl_$._new(89,217),postite_geom__$CoolPoint_Point_$Impl_$._new(89,222),postite_geom__$CoolPoint_Point_$Impl_$._new(88,225),postite_geom__$CoolPoint_Point_$Impl_$._new(88,229),postite_geom__$CoolPoint_Point_$Impl_$._new(88,231),postite_geom__$CoolPoint_Point_$Impl_$._new(88,233),postite_geom__$CoolPoint_Point_$Impl_$._new(88,235),postite_geom__$CoolPoint_Point_$Impl_$._new(89,237),postite_geom__$CoolPoint_Point_$Impl_$._new(89,240),postite_geom__$CoolPoint_Point_$Impl_$._new(89,242),postite_geom__$CoolPoint_Point_$Impl_$._new(91,241),postite_geom__$CoolPoint_Point_$Impl_$._new(94,241),postite_geom__$CoolPoint_Point_$Impl_$._new(96,240),postite_geom__$CoolPoint_Point_$Impl_$._new(98,239),postite_geom__$CoolPoint_Point_$Impl_$._new(105,240),postite_geom__$CoolPoint_Point_$Impl_$._new(109,240),postite_geom__$CoolPoint_Point_$Impl_$._new(113,239),postite_geom__$CoolPoint_Point_$Impl_$._new(116,240),postite_geom__$CoolPoint_Point_$Impl_$._new(121,239),postite_geom__$CoolPoint_Point_$Impl_$._new(130,240),postite_geom__$CoolPoint_Point_$Impl_$._new(136,237),postite_geom__$CoolPoint_Point_$Impl_$._new(139,237),postite_geom__$CoolPoint_Point_$Impl_$._new(144,238),postite_geom__$CoolPoint_Point_$Impl_$._new(151,237),postite_geom__$CoolPoint_Point_$Impl_$._new(157,236),postite_geom__$CoolPoint_Point_$Impl_$._new(159,237)];
		if(__map_reserved["left square bracket"] != null) {
			_g.setReserved("left square bracket",value7);
		} else {
			_g.h["left square bracket"] = value7;
		}
	}
	{
		var value8 = [postite_geom__$CoolPoint_Point_$Impl_$._new(112,138),postite_geom__$CoolPoint_Point_$Impl_$._new(112,136),postite_geom__$CoolPoint_Point_$Impl_$._new(115,136),postite_geom__$CoolPoint_Point_$Impl_$._new(118,137),postite_geom__$CoolPoint_Point_$Impl_$._new(120,136),postite_geom__$CoolPoint_Point_$Impl_$._new(123,136),postite_geom__$CoolPoint_Point_$Impl_$._new(125,136),postite_geom__$CoolPoint_Point_$Impl_$._new(128,136),postite_geom__$CoolPoint_Point_$Impl_$._new(131,136),postite_geom__$CoolPoint_Point_$Impl_$._new(134,135),postite_geom__$CoolPoint_Point_$Impl_$._new(137,135),postite_geom__$CoolPoint_Point_$Impl_$._new(140,134),postite_geom__$CoolPoint_Point_$Impl_$._new(143,133),postite_geom__$CoolPoint_Point_$Impl_$._new(145,132),postite_geom__$CoolPoint_Point_$Impl_$._new(147,132),postite_geom__$CoolPoint_Point_$Impl_$._new(149,132),postite_geom__$CoolPoint_Point_$Impl_$._new(152,132),postite_geom__$CoolPoint_Point_$Impl_$._new(153,134),postite_geom__$CoolPoint_Point_$Impl_$._new(154,137),postite_geom__$CoolPoint_Point_$Impl_$._new(155,141),postite_geom__$CoolPoint_Point_$Impl_$._new(156,144),postite_geom__$CoolPoint_Point_$Impl_$._new(157,152),postite_geom__$CoolPoint_Point_$Impl_$._new(158,161),postite_geom__$CoolPoint_Point_$Impl_$._new(160,170),postite_geom__$CoolPoint_Point_$Impl_$._new(162,182),postite_geom__$CoolPoint_Point_$Impl_$._new(164,192),postite_geom__$CoolPoint_Point_$Impl_$._new(166,200),postite_geom__$CoolPoint_Point_$Impl_$._new(167,209),postite_geom__$CoolPoint_Point_$Impl_$._new(168,214),postite_geom__$CoolPoint_Point_$Impl_$._new(168,216),postite_geom__$CoolPoint_Point_$Impl_$._new(169,221),postite_geom__$CoolPoint_Point_$Impl_$._new(169,223),postite_geom__$CoolPoint_Point_$Impl_$._new(169,228),postite_geom__$CoolPoint_Point_$Impl_$._new(169,231),postite_geom__$CoolPoint_Point_$Impl_$._new(166,233),postite_geom__$CoolPoint_Point_$Impl_$._new(164,234),postite_geom__$CoolPoint_Point_$Impl_$._new(161,235),postite_geom__$CoolPoint_Point_$Impl_$._new(155,236),postite_geom__$CoolPoint_Point_$Impl_$._new(147,235),postite_geom__$CoolPoint_Point_$Impl_$._new(140,233),postite_geom__$CoolPoint_Point_$Impl_$._new(131,233),postite_geom__$CoolPoint_Point_$Impl_$._new(124,233),postite_geom__$CoolPoint_Point_$Impl_$._new(117,235),postite_geom__$CoolPoint_Point_$Impl_$._new(114,238),postite_geom__$CoolPoint_Point_$Impl_$._new(112,238)];
		if(__map_reserved["right square bracket"] != null) {
			_g.setReserved("right square bracket",value8);
		} else {
			_g.h["right square bracket"] = value8;
		}
	}
	{
		var value9 = [postite_geom__$CoolPoint_Point_$Impl_$._new(89,164),postite_geom__$CoolPoint_Point_$Impl_$._new(90,162),postite_geom__$CoolPoint_Point_$Impl_$._new(92,162),postite_geom__$CoolPoint_Point_$Impl_$._new(94,164),postite_geom__$CoolPoint_Point_$Impl_$._new(95,166),postite_geom__$CoolPoint_Point_$Impl_$._new(96,169),postite_geom__$CoolPoint_Point_$Impl_$._new(97,171),postite_geom__$CoolPoint_Point_$Impl_$._new(99,175),postite_geom__$CoolPoint_Point_$Impl_$._new(101,178),postite_geom__$CoolPoint_Point_$Impl_$._new(103,182),postite_geom__$CoolPoint_Point_$Impl_$._new(106,189),postite_geom__$CoolPoint_Point_$Impl_$._new(108,194),postite_geom__$CoolPoint_Point_$Impl_$._new(111,199),postite_geom__$CoolPoint_Point_$Impl_$._new(114,204),postite_geom__$CoolPoint_Point_$Impl_$._new(117,209),postite_geom__$CoolPoint_Point_$Impl_$._new(119,214),postite_geom__$CoolPoint_Point_$Impl_$._new(122,218),postite_geom__$CoolPoint_Point_$Impl_$._new(124,222),postite_geom__$CoolPoint_Point_$Impl_$._new(126,225),postite_geom__$CoolPoint_Point_$Impl_$._new(128,228),postite_geom__$CoolPoint_Point_$Impl_$._new(130,229),postite_geom__$CoolPoint_Point_$Impl_$._new(133,233),postite_geom__$CoolPoint_Point_$Impl_$._new(134,236),postite_geom__$CoolPoint_Point_$Impl_$._new(136,239),postite_geom__$CoolPoint_Point_$Impl_$._new(138,240),postite_geom__$CoolPoint_Point_$Impl_$._new(139,242),postite_geom__$CoolPoint_Point_$Impl_$._new(140,244),postite_geom__$CoolPoint_Point_$Impl_$._new(142,242),postite_geom__$CoolPoint_Point_$Impl_$._new(142,240),postite_geom__$CoolPoint_Point_$Impl_$._new(142,237),postite_geom__$CoolPoint_Point_$Impl_$._new(143,235),postite_geom__$CoolPoint_Point_$Impl_$._new(143,233),postite_geom__$CoolPoint_Point_$Impl_$._new(145,229),postite_geom__$CoolPoint_Point_$Impl_$._new(146,226),postite_geom__$CoolPoint_Point_$Impl_$._new(148,217),postite_geom__$CoolPoint_Point_$Impl_$._new(149,208),postite_geom__$CoolPoint_Point_$Impl_$._new(149,205),postite_geom__$CoolPoint_Point_$Impl_$._new(151,196),postite_geom__$CoolPoint_Point_$Impl_$._new(151,193),postite_geom__$CoolPoint_Point_$Impl_$._new(153,182),postite_geom__$CoolPoint_Point_$Impl_$._new(155,172),postite_geom__$CoolPoint_Point_$Impl_$._new(157,165),postite_geom__$CoolPoint_Point_$Impl_$._new(159,160),postite_geom__$CoolPoint_Point_$Impl_$._new(162,155),postite_geom__$CoolPoint_Point_$Impl_$._new(164,150),postite_geom__$CoolPoint_Point_$Impl_$._new(165,148),postite_geom__$CoolPoint_Point_$Impl_$._new(166,146)];
		if(__map_reserved["v"] != null) {
			_g.setReserved("v",value9);
		} else {
			_g.h["v"] = value9;
		}
	}
	{
		var value10 = [postite_geom__$CoolPoint_Point_$Impl_$._new(123,129),postite_geom__$CoolPoint_Point_$Impl_$._new(123,131),postite_geom__$CoolPoint_Point_$Impl_$._new(124,133),postite_geom__$CoolPoint_Point_$Impl_$._new(125,136),postite_geom__$CoolPoint_Point_$Impl_$._new(127,140),postite_geom__$CoolPoint_Point_$Impl_$._new(129,142),postite_geom__$CoolPoint_Point_$Impl_$._new(133,148),postite_geom__$CoolPoint_Point_$Impl_$._new(137,154),postite_geom__$CoolPoint_Point_$Impl_$._new(143,158),postite_geom__$CoolPoint_Point_$Impl_$._new(145,161),postite_geom__$CoolPoint_Point_$Impl_$._new(148,164),postite_geom__$CoolPoint_Point_$Impl_$._new(153,170),postite_geom__$CoolPoint_Point_$Impl_$._new(158,176),postite_geom__$CoolPoint_Point_$Impl_$._new(160,178),postite_geom__$CoolPoint_Point_$Impl_$._new(164,183),postite_geom__$CoolPoint_Point_$Impl_$._new(168,188),postite_geom__$CoolPoint_Point_$Impl_$._new(171,191),postite_geom__$CoolPoint_Point_$Impl_$._new(175,196),postite_geom__$CoolPoint_Point_$Impl_$._new(178,200),postite_geom__$CoolPoint_Point_$Impl_$._new(180,202),postite_geom__$CoolPoint_Point_$Impl_$._new(181,205),postite_geom__$CoolPoint_Point_$Impl_$._new(184,208),postite_geom__$CoolPoint_Point_$Impl_$._new(186,210),postite_geom__$CoolPoint_Point_$Impl_$._new(187,213),postite_geom__$CoolPoint_Point_$Impl_$._new(188,215),postite_geom__$CoolPoint_Point_$Impl_$._new(186,212),postite_geom__$CoolPoint_Point_$Impl_$._new(183,211),postite_geom__$CoolPoint_Point_$Impl_$._new(177,208),postite_geom__$CoolPoint_Point_$Impl_$._new(169,206),postite_geom__$CoolPoint_Point_$Impl_$._new(162,205),postite_geom__$CoolPoint_Point_$Impl_$._new(154,207),postite_geom__$CoolPoint_Point_$Impl_$._new(145,209),postite_geom__$CoolPoint_Point_$Impl_$._new(137,210),postite_geom__$CoolPoint_Point_$Impl_$._new(129,214),postite_geom__$CoolPoint_Point_$Impl_$._new(122,217),postite_geom__$CoolPoint_Point_$Impl_$._new(118,218),postite_geom__$CoolPoint_Point_$Impl_$._new(111,221),postite_geom__$CoolPoint_Point_$Impl_$._new(109,222),postite_geom__$CoolPoint_Point_$Impl_$._new(110,219),postite_geom__$CoolPoint_Point_$Impl_$._new(112,217),postite_geom__$CoolPoint_Point_$Impl_$._new(118,209),postite_geom__$CoolPoint_Point_$Impl_$._new(120,207),postite_geom__$CoolPoint_Point_$Impl_$._new(128,196),postite_geom__$CoolPoint_Point_$Impl_$._new(135,187),postite_geom__$CoolPoint_Point_$Impl_$._new(138,183),postite_geom__$CoolPoint_Point_$Impl_$._new(148,167),postite_geom__$CoolPoint_Point_$Impl_$._new(157,153),postite_geom__$CoolPoint_Point_$Impl_$._new(163,145),postite_geom__$CoolPoint_Point_$Impl_$._new(165,142),postite_geom__$CoolPoint_Point_$Impl_$._new(172,133),postite_geom__$CoolPoint_Point_$Impl_$._new(177,127),postite_geom__$CoolPoint_Point_$Impl_$._new(179,127),postite_geom__$CoolPoint_Point_$Impl_$._new(180,125)];
		if(__map_reserved["delete"] != null) {
			_g.setReserved("delete",value10);
		} else {
			_g.h["delete"] = value10;
		}
	}
	{
		var value11 = [postite_geom__$CoolPoint_Point_$Impl_$._new(117,132),postite_geom__$CoolPoint_Point_$Impl_$._new(115,132),postite_geom__$CoolPoint_Point_$Impl_$._new(115,129),postite_geom__$CoolPoint_Point_$Impl_$._new(117,129),postite_geom__$CoolPoint_Point_$Impl_$._new(119,128),postite_geom__$CoolPoint_Point_$Impl_$._new(122,127),postite_geom__$CoolPoint_Point_$Impl_$._new(125,127),postite_geom__$CoolPoint_Point_$Impl_$._new(127,127),postite_geom__$CoolPoint_Point_$Impl_$._new(130,127),postite_geom__$CoolPoint_Point_$Impl_$._new(133,129),postite_geom__$CoolPoint_Point_$Impl_$._new(136,129),postite_geom__$CoolPoint_Point_$Impl_$._new(138,130),postite_geom__$CoolPoint_Point_$Impl_$._new(140,131),postite_geom__$CoolPoint_Point_$Impl_$._new(143,134),postite_geom__$CoolPoint_Point_$Impl_$._new(144,136),postite_geom__$CoolPoint_Point_$Impl_$._new(145,139),postite_geom__$CoolPoint_Point_$Impl_$._new(145,142),postite_geom__$CoolPoint_Point_$Impl_$._new(145,145),postite_geom__$CoolPoint_Point_$Impl_$._new(145,147),postite_geom__$CoolPoint_Point_$Impl_$._new(145,149),postite_geom__$CoolPoint_Point_$Impl_$._new(144,152),postite_geom__$CoolPoint_Point_$Impl_$._new(142,157),postite_geom__$CoolPoint_Point_$Impl_$._new(141,160),postite_geom__$CoolPoint_Point_$Impl_$._new(139,163),postite_geom__$CoolPoint_Point_$Impl_$._new(137,166),postite_geom__$CoolPoint_Point_$Impl_$._new(135,167),postite_geom__$CoolPoint_Point_$Impl_$._new(133,169),postite_geom__$CoolPoint_Point_$Impl_$._new(131,172),postite_geom__$CoolPoint_Point_$Impl_$._new(128,173),postite_geom__$CoolPoint_Point_$Impl_$._new(126,176),postite_geom__$CoolPoint_Point_$Impl_$._new(125,178),postite_geom__$CoolPoint_Point_$Impl_$._new(125,180),postite_geom__$CoolPoint_Point_$Impl_$._new(125,182),postite_geom__$CoolPoint_Point_$Impl_$._new(126,184),postite_geom__$CoolPoint_Point_$Impl_$._new(128,187),postite_geom__$CoolPoint_Point_$Impl_$._new(130,187),postite_geom__$CoolPoint_Point_$Impl_$._new(132,188),postite_geom__$CoolPoint_Point_$Impl_$._new(135,189),postite_geom__$CoolPoint_Point_$Impl_$._new(140,189),postite_geom__$CoolPoint_Point_$Impl_$._new(145,189),postite_geom__$CoolPoint_Point_$Impl_$._new(150,187),postite_geom__$CoolPoint_Point_$Impl_$._new(155,186),postite_geom__$CoolPoint_Point_$Impl_$._new(157,185),postite_geom__$CoolPoint_Point_$Impl_$._new(159,184),postite_geom__$CoolPoint_Point_$Impl_$._new(156,185),postite_geom__$CoolPoint_Point_$Impl_$._new(154,185),postite_geom__$CoolPoint_Point_$Impl_$._new(149,185),postite_geom__$CoolPoint_Point_$Impl_$._new(145,187),postite_geom__$CoolPoint_Point_$Impl_$._new(141,188),postite_geom__$CoolPoint_Point_$Impl_$._new(136,191),postite_geom__$CoolPoint_Point_$Impl_$._new(134,191),postite_geom__$CoolPoint_Point_$Impl_$._new(131,192),postite_geom__$CoolPoint_Point_$Impl_$._new(129,193),postite_geom__$CoolPoint_Point_$Impl_$._new(129,195),postite_geom__$CoolPoint_Point_$Impl_$._new(129,197),postite_geom__$CoolPoint_Point_$Impl_$._new(131,200),postite_geom__$CoolPoint_Point_$Impl_$._new(133,202),postite_geom__$CoolPoint_Point_$Impl_$._new(136,206),postite_geom__$CoolPoint_Point_$Impl_$._new(139,211),postite_geom__$CoolPoint_Point_$Impl_$._new(142,215),postite_geom__$CoolPoint_Point_$Impl_$._new(145,220),postite_geom__$CoolPoint_Point_$Impl_$._new(147,225),postite_geom__$CoolPoint_Point_$Impl_$._new(148,231),postite_geom__$CoolPoint_Point_$Impl_$._new(147,239),postite_geom__$CoolPoint_Point_$Impl_$._new(144,244),postite_geom__$CoolPoint_Point_$Impl_$._new(139,248),postite_geom__$CoolPoint_Point_$Impl_$._new(134,250),postite_geom__$CoolPoint_Point_$Impl_$._new(126,253),postite_geom__$CoolPoint_Point_$Impl_$._new(119,253),postite_geom__$CoolPoint_Point_$Impl_$._new(115,253)];
		if(__map_reserved["right curly brace"] != null) {
			_g.setReserved("right curly brace",value11);
		} else {
			_g.h["right curly brace"] = value11;
		}
	}
	{
		var value12 = [postite_geom__$CoolPoint_Point_$Impl_$._new(75,250),postite_geom__$CoolPoint_Point_$Impl_$._new(75,247),postite_geom__$CoolPoint_Point_$Impl_$._new(77,244),postite_geom__$CoolPoint_Point_$Impl_$._new(78,242),postite_geom__$CoolPoint_Point_$Impl_$._new(79,239),postite_geom__$CoolPoint_Point_$Impl_$._new(80,237),postite_geom__$CoolPoint_Point_$Impl_$._new(82,234),postite_geom__$CoolPoint_Point_$Impl_$._new(82,232),postite_geom__$CoolPoint_Point_$Impl_$._new(84,229),postite_geom__$CoolPoint_Point_$Impl_$._new(85,225),postite_geom__$CoolPoint_Point_$Impl_$._new(87,222),postite_geom__$CoolPoint_Point_$Impl_$._new(88,219),postite_geom__$CoolPoint_Point_$Impl_$._new(89,216),postite_geom__$CoolPoint_Point_$Impl_$._new(91,212),postite_geom__$CoolPoint_Point_$Impl_$._new(92,208),postite_geom__$CoolPoint_Point_$Impl_$._new(94,204),postite_geom__$CoolPoint_Point_$Impl_$._new(95,201),postite_geom__$CoolPoint_Point_$Impl_$._new(96,196),postite_geom__$CoolPoint_Point_$Impl_$._new(97,194),postite_geom__$CoolPoint_Point_$Impl_$._new(98,191),postite_geom__$CoolPoint_Point_$Impl_$._new(100,185),postite_geom__$CoolPoint_Point_$Impl_$._new(102,178),postite_geom__$CoolPoint_Point_$Impl_$._new(104,173),postite_geom__$CoolPoint_Point_$Impl_$._new(104,171),postite_geom__$CoolPoint_Point_$Impl_$._new(105,164),postite_geom__$CoolPoint_Point_$Impl_$._new(106,158),postite_geom__$CoolPoint_Point_$Impl_$._new(107,156),postite_geom__$CoolPoint_Point_$Impl_$._new(107,152),postite_geom__$CoolPoint_Point_$Impl_$._new(108,145),postite_geom__$CoolPoint_Point_$Impl_$._new(109,141),postite_geom__$CoolPoint_Point_$Impl_$._new(110,139),postite_geom__$CoolPoint_Point_$Impl_$._new(112,133),postite_geom__$CoolPoint_Point_$Impl_$._new(113,131),postite_geom__$CoolPoint_Point_$Impl_$._new(116,127),postite_geom__$CoolPoint_Point_$Impl_$._new(117,125),postite_geom__$CoolPoint_Point_$Impl_$._new(119,122),postite_geom__$CoolPoint_Point_$Impl_$._new(121,121),postite_geom__$CoolPoint_Point_$Impl_$._new(123,120),postite_geom__$CoolPoint_Point_$Impl_$._new(125,122),postite_geom__$CoolPoint_Point_$Impl_$._new(125,125),postite_geom__$CoolPoint_Point_$Impl_$._new(127,130),postite_geom__$CoolPoint_Point_$Impl_$._new(128,133),postite_geom__$CoolPoint_Point_$Impl_$._new(131,143),postite_geom__$CoolPoint_Point_$Impl_$._new(136,153),postite_geom__$CoolPoint_Point_$Impl_$._new(140,163),postite_geom__$CoolPoint_Point_$Impl_$._new(144,172),postite_geom__$CoolPoint_Point_$Impl_$._new(145,175),postite_geom__$CoolPoint_Point_$Impl_$._new(151,189),postite_geom__$CoolPoint_Point_$Impl_$._new(156,201),postite_geom__$CoolPoint_Point_$Impl_$._new(161,213),postite_geom__$CoolPoint_Point_$Impl_$._new(166,225),postite_geom__$CoolPoint_Point_$Impl_$._new(169,233),postite_geom__$CoolPoint_Point_$Impl_$._new(171,236),postite_geom__$CoolPoint_Point_$Impl_$._new(174,243),postite_geom__$CoolPoint_Point_$Impl_$._new(177,247),postite_geom__$CoolPoint_Point_$Impl_$._new(178,249),postite_geom__$CoolPoint_Point_$Impl_$._new(179,251),postite_geom__$CoolPoint_Point_$Impl_$._new(180,253),postite_geom__$CoolPoint_Point_$Impl_$._new(180,255),postite_geom__$CoolPoint_Point_$Impl_$._new(179,257),postite_geom__$CoolPoint_Point_$Impl_$._new(177,257),postite_geom__$CoolPoint_Point_$Impl_$._new(174,255),postite_geom__$CoolPoint_Point_$Impl_$._new(169,250),postite_geom__$CoolPoint_Point_$Impl_$._new(164,247),postite_geom__$CoolPoint_Point_$Impl_$._new(160,245),postite_geom__$CoolPoint_Point_$Impl_$._new(149,238),postite_geom__$CoolPoint_Point_$Impl_$._new(138,230),postite_geom__$CoolPoint_Point_$Impl_$._new(127,221),postite_geom__$CoolPoint_Point_$Impl_$._new(124,220),postite_geom__$CoolPoint_Point_$Impl_$._new(112,212),postite_geom__$CoolPoint_Point_$Impl_$._new(110,210),postite_geom__$CoolPoint_Point_$Impl_$._new(96,201),postite_geom__$CoolPoint_Point_$Impl_$._new(84,195),postite_geom__$CoolPoint_Point_$Impl_$._new(74,190),postite_geom__$CoolPoint_Point_$Impl_$._new(64,182),postite_geom__$CoolPoint_Point_$Impl_$._new(55,175),postite_geom__$CoolPoint_Point_$Impl_$._new(51,172),postite_geom__$CoolPoint_Point_$Impl_$._new(49,170),postite_geom__$CoolPoint_Point_$Impl_$._new(51,169),postite_geom__$CoolPoint_Point_$Impl_$._new(56,169),postite_geom__$CoolPoint_Point_$Impl_$._new(66,169),postite_geom__$CoolPoint_Point_$Impl_$._new(78,168),postite_geom__$CoolPoint_Point_$Impl_$._new(92,166),postite_geom__$CoolPoint_Point_$Impl_$._new(107,164),postite_geom__$CoolPoint_Point_$Impl_$._new(123,161),postite_geom__$CoolPoint_Point_$Impl_$._new(140,162),postite_geom__$CoolPoint_Point_$Impl_$._new(156,162),postite_geom__$CoolPoint_Point_$Impl_$._new(171,160),postite_geom__$CoolPoint_Point_$Impl_$._new(173,160),postite_geom__$CoolPoint_Point_$Impl_$._new(186,160),postite_geom__$CoolPoint_Point_$Impl_$._new(195,160),postite_geom__$CoolPoint_Point_$Impl_$._new(198,161),postite_geom__$CoolPoint_Point_$Impl_$._new(203,163),postite_geom__$CoolPoint_Point_$Impl_$._new(208,163),postite_geom__$CoolPoint_Point_$Impl_$._new(206,164),postite_geom__$CoolPoint_Point_$Impl_$._new(200,167),postite_geom__$CoolPoint_Point_$Impl_$._new(187,172),postite_geom__$CoolPoint_Point_$Impl_$._new(174,179),postite_geom__$CoolPoint_Point_$Impl_$._new(172,181),postite_geom__$CoolPoint_Point_$Impl_$._new(153,192),postite_geom__$CoolPoint_Point_$Impl_$._new(137,201),postite_geom__$CoolPoint_Point_$Impl_$._new(123,211),postite_geom__$CoolPoint_Point_$Impl_$._new(112,220),postite_geom__$CoolPoint_Point_$Impl_$._new(99,229),postite_geom__$CoolPoint_Point_$Impl_$._new(90,237),postite_geom__$CoolPoint_Point_$Impl_$._new(80,244),postite_geom__$CoolPoint_Point_$Impl_$._new(73,250),postite_geom__$CoolPoint_Point_$Impl_$._new(69,254),postite_geom__$CoolPoint_Point_$Impl_$._new(69,252)];
		if(__map_reserved["star"] != null) {
			_g.setReserved("star",value12);
		} else {
			_g.h["star"] = value12;
		}
	}
	{
		var value13 = [postite_geom__$CoolPoint_Point_$Impl_$._new(81,219),postite_geom__$CoolPoint_Point_$Impl_$._new(84,218),postite_geom__$CoolPoint_Point_$Impl_$._new(86,220),postite_geom__$CoolPoint_Point_$Impl_$._new(88,220),postite_geom__$CoolPoint_Point_$Impl_$._new(90,220),postite_geom__$CoolPoint_Point_$Impl_$._new(92,219),postite_geom__$CoolPoint_Point_$Impl_$._new(95,220),postite_geom__$CoolPoint_Point_$Impl_$._new(97,219),postite_geom__$CoolPoint_Point_$Impl_$._new(99,220),postite_geom__$CoolPoint_Point_$Impl_$._new(102,218),postite_geom__$CoolPoint_Point_$Impl_$._new(105,217),postite_geom__$CoolPoint_Point_$Impl_$._new(107,216),postite_geom__$CoolPoint_Point_$Impl_$._new(110,216),postite_geom__$CoolPoint_Point_$Impl_$._new(113,214),postite_geom__$CoolPoint_Point_$Impl_$._new(116,212),postite_geom__$CoolPoint_Point_$Impl_$._new(118,210),postite_geom__$CoolPoint_Point_$Impl_$._new(121,208),postite_geom__$CoolPoint_Point_$Impl_$._new(124,205),postite_geom__$CoolPoint_Point_$Impl_$._new(126,202),postite_geom__$CoolPoint_Point_$Impl_$._new(129,199),postite_geom__$CoolPoint_Point_$Impl_$._new(132,196),postite_geom__$CoolPoint_Point_$Impl_$._new(136,191),postite_geom__$CoolPoint_Point_$Impl_$._new(139,187),postite_geom__$CoolPoint_Point_$Impl_$._new(142,182),postite_geom__$CoolPoint_Point_$Impl_$._new(144,179),postite_geom__$CoolPoint_Point_$Impl_$._new(146,174),postite_geom__$CoolPoint_Point_$Impl_$._new(148,170),postite_geom__$CoolPoint_Point_$Impl_$._new(149,168),postite_geom__$CoolPoint_Point_$Impl_$._new(151,162),postite_geom__$CoolPoint_Point_$Impl_$._new(152,160),postite_geom__$CoolPoint_Point_$Impl_$._new(152,157),postite_geom__$CoolPoint_Point_$Impl_$._new(152,155),postite_geom__$CoolPoint_Point_$Impl_$._new(152,151),postite_geom__$CoolPoint_Point_$Impl_$._new(152,149),postite_geom__$CoolPoint_Point_$Impl_$._new(152,146),postite_geom__$CoolPoint_Point_$Impl_$._new(149,142),postite_geom__$CoolPoint_Point_$Impl_$._new(148,139),postite_geom__$CoolPoint_Point_$Impl_$._new(145,137),postite_geom__$CoolPoint_Point_$Impl_$._new(141,135),postite_geom__$CoolPoint_Point_$Impl_$._new(139,135),postite_geom__$CoolPoint_Point_$Impl_$._new(134,136),postite_geom__$CoolPoint_Point_$Impl_$._new(130,140),postite_geom__$CoolPoint_Point_$Impl_$._new(128,142),postite_geom__$CoolPoint_Point_$Impl_$._new(126,145),postite_geom__$CoolPoint_Point_$Impl_$._new(122,150),postite_geom__$CoolPoint_Point_$Impl_$._new(119,158),postite_geom__$CoolPoint_Point_$Impl_$._new(117,163),postite_geom__$CoolPoint_Point_$Impl_$._new(115,170),postite_geom__$CoolPoint_Point_$Impl_$._new(114,175),postite_geom__$CoolPoint_Point_$Impl_$._new(117,184),postite_geom__$CoolPoint_Point_$Impl_$._new(120,190),postite_geom__$CoolPoint_Point_$Impl_$._new(125,199),postite_geom__$CoolPoint_Point_$Impl_$._new(129,203),postite_geom__$CoolPoint_Point_$Impl_$._new(133,208),postite_geom__$CoolPoint_Point_$Impl_$._new(138,213),postite_geom__$CoolPoint_Point_$Impl_$._new(145,215),postite_geom__$CoolPoint_Point_$Impl_$._new(155,218),postite_geom__$CoolPoint_Point_$Impl_$._new(164,219),postite_geom__$CoolPoint_Point_$Impl_$._new(166,219),postite_geom__$CoolPoint_Point_$Impl_$._new(177,219),postite_geom__$CoolPoint_Point_$Impl_$._new(182,218),postite_geom__$CoolPoint_Point_$Impl_$._new(192,216),postite_geom__$CoolPoint_Point_$Impl_$._new(196,213),postite_geom__$CoolPoint_Point_$Impl_$._new(199,212),postite_geom__$CoolPoint_Point_$Impl_$._new(201,211)];
		if(__map_reserved["pigtail"] != null) {
			_g.setReserved("pigtail",value13);
		} else {
			_g.h["pigtail"] = value13;
		}
	}
	$r = _g;
	return $r;
}(this));
tink_core__$Callback_Callback_$Impl_$.depth = 0;
tink_core__$Callback_Callback_$Impl_$.MAX_DEPTH = 1000;
tink_core__$Future_NeverFuture.inst = new tink_core__$Future_NeverFuture();
tink_core__$Future_Future_$Impl_$.NULL = new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(null));
tink_core__$Future_Future_$Impl_$.NOISE = new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Noise.Noise));
tink_core__$Future_Future_$Impl_$.NEVER = new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core__$Future_NeverFuture.inst));
tink_core__$Promise_Promise_$Impl_$.NULL = new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Success(null)));
tink_core__$Promise_Promise_$Impl_$.NOISE = new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Success(tink_core_Noise.Noise)));
tink_core__$Promise_Promise_$Impl_$.NEVER = tink_core__$Future_Future_$Impl_$.NEVER.map(tink_core_Outcome.Success).gather();
Main.main();
})();
