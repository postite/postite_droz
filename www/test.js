// Generated by Haxe 4.0.0-rc.2+77068e1
(function ($global) { "use strict";
var $estr = function() { return js_Boot.__string_rec(this,''); },$hxEnums = $hxEnums || {},$_;
function $extend(from, fields) {
	var proto = Object.create(from);
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
var EReg = function(r,opt) {
	this.r = new RegExp(r,opt.split("u").join(""));
};
EReg.__name__ = "EReg";
EReg.prototype = {
	r: null
	,match: function(s) {
		if(this.r.global) {
			this.r.lastIndex = 0;
		}
		this.r.m = this.r.exec(s);
		this.r.s = s;
		return this.r.m != null;
	}
	,matched: function(n) {
		if(this.r.m != null && n >= 0 && n < this.r.m.length) {
			return this.r.m[n];
		} else {
			throw new js__$Boot_HaxeError("EReg::matched");
		}
	}
	,__class__: EReg
};
var HxOverrides = function() { };
HxOverrides.__name__ = "HxOverrides";
HxOverrides.dateStr = function(date) {
	var m = date.getMonth() + 1;
	var d = date.getDate();
	var h = date.getHours();
	var mi = date.getMinutes();
	var s = date.getSeconds();
	return date.getFullYear() + "-" + (m < 10 ? "0" + m : "" + m) + "-" + (d < 10 ? "0" + d : "" + d) + " " + (h < 10 ? "0" + h : "" + h) + ":" + (mi < 10 ? "0" + mi : "" + mi) + ":" + (s < 10 ? "0" + s : "" + s);
};
HxOverrides.cca = function(s,index) {
	var x = s.charCodeAt(index);
	if(x != x) {
		return undefined;
	}
	return x;
};
HxOverrides.substr = function(s,pos,len) {
	if(len == null) {
		len = s.length;
	} else if(len < 0) {
		if(pos == 0) {
			len = s.length + len;
		} else {
			return "";
		}
	}
	return s.substr(pos,len);
};
HxOverrides.remove = function(a,obj) {
	var i = a.indexOf(obj);
	if(i == -1) {
		return false;
	}
	a.splice(i,1);
	return true;
};
HxOverrides.iter = function(a) {
	return { cur : 0, arr : a, hasNext : function() {
		return this.cur < this.arr.length;
	}, next : function() {
		return this.arr[this.cur++];
	}};
};
var Lambda = function() { };
Lambda.__name__ = "Lambda";
Lambda.array = function(it) {
	var a = [];
	var i = $getIterator(it);
	while(i.hasNext()) {
		var i1 = i.next();
		a.push(i1);
	}
	return a;
};
Lambda.has = function(it,elt) {
	var x = $getIterator(it);
	while(x.hasNext()) {
		var x1 = x.next();
		if(x1 == elt) {
			return true;
		}
	}
	return false;
};
Lambda.fold = function(it,f,first) {
	var x = $getIterator(it);
	while(x.hasNext()) {
		var x1 = x.next();
		first = f(x1,first);
	}
	return first;
};
Math.__name__ = "Math";
var Reflect = function() { };
Reflect.__name__ = "Reflect";
Reflect.field = function(o,field) {
	try {
		return o[field];
	} catch( e ) {
		haxe_CallStack.lastException = e;
		return null;
	}
};
Reflect.getProperty = function(o,field) {
	var tmp;
	if(o == null) {
		return null;
	} else {
		var tmp1;
		if(o.__properties__) {
			tmp = o.__properties__["get_" + field];
			tmp1 = tmp;
		} else {
			tmp1 = false;
		}
		if(tmp1) {
			return o[tmp]();
		} else {
			return o[field];
		}
	}
};
Reflect.fields = function(o) {
	var a = [];
	if(o != null) {
		var hasOwnProperty = Object.prototype.hasOwnProperty;
		for( var f in o ) {
		if(f != "__id__" && f != "hx__closures__" && hasOwnProperty.call(o,f)) {
			a.push(f);
		}
		}
	}
	return a;
};
Reflect.isFunction = function(f) {
	if(typeof(f) == "function") {
		return !(f.__name__ || f.__ename__);
	} else {
		return false;
	}
};
Reflect.compare = function(a,b) {
	if(a == b) {
		return 0;
	} else if(a > b) {
		return 1;
	} else {
		return -1;
	}
};
Reflect.compareMethods = function(f1,f2) {
	if(f1 == f2) {
		return true;
	}
	if(!Reflect.isFunction(f1) || !Reflect.isFunction(f2)) {
		return false;
	}
	if(f1.scope == f2.scope && f1.method == f2.method) {
		return f1.method != null;
	} else {
		return false;
	}
};
Reflect.isObject = function(v) {
	if(v == null) {
		return false;
	}
	var t = typeof(v);
	if(!(t == "string" || t == "object" && v.__enum__ == null)) {
		if(t == "function") {
			return (v.__name__ || v.__ename__) != null;
		} else {
			return false;
		}
	} else {
		return true;
	}
};
var Std = function() { };
Std.__name__ = "Std";
Std.string = function(s) {
	return js_Boot.__string_rec(s,"");
};
Std.parseInt = function(x) {
	var v = parseInt(x, x && x[0]=="0" && (x[1]=="x" || x[1]=="X") ? 16 : 10);
	if(isNaN(v)) {
		return null;
	}
	return v;
};
Std.random = function(x) {
	if(x <= 0) {
		return 0;
	} else {
		return Math.floor(Math.random() * x);
	}
};
var StringBuf = function() {
	this.b = "";
};
StringBuf.__name__ = "StringBuf";
StringBuf.prototype = {
	b: null
	,__class__: StringBuf
};
var StringTools = function() { };
StringTools.__name__ = "StringTools";
StringTools.htmlEscape = function(s,quotes) {
	var buf_b = "";
	var _g_offset = 0;
	var _g_s = s;
	while(_g_offset < _g_s.length) {
		var c = _g_s.charCodeAt(_g_offset++);
		if(c >= 55296 && c < 56319) {
			c = c - 55232 << 10 | _g_s.charCodeAt(_g_offset++) & 1023;
		}
		var code = c;
		switch(code) {
		case 34:
			if(quotes) {
				buf_b += "&quot;";
			} else {
				buf_b += String.fromCodePoint(code);
			}
			break;
		case 38:
			buf_b += "&amp;";
			break;
		case 39:
			if(quotes) {
				buf_b += "&#039;";
			} else {
				buf_b += String.fromCodePoint(code);
			}
			break;
		case 60:
			buf_b += "&lt;";
			break;
		case 62:
			buf_b += "&gt;";
			break;
		default:
			buf_b += String.fromCodePoint(code);
		}
	}
	return buf_b;
};
StringTools.startsWith = function(s,start) {
	if(s.length >= start.length) {
		return HxOverrides.substr(s,0,start.length) == start;
	} else {
		return false;
	}
};
StringTools.isSpace = function(s,pos) {
	var c = HxOverrides.cca(s,pos);
	if(!(c > 8 && c < 14)) {
		return c == 32;
	} else {
		return true;
	}
};
StringTools.ltrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,r)) ++r;
	if(r > 0) {
		return HxOverrides.substr(s,r,l - r);
	} else {
		return s;
	}
};
StringTools.rtrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,l - r - 1)) ++r;
	if(r > 0) {
		return HxOverrides.substr(s,0,l - r);
	} else {
		return s;
	}
};
StringTools.trim = function(s) {
	return StringTools.ltrim(StringTools.rtrim(s));
};
StringTools.lpad = function(s,c,l) {
	if(c.length <= 0) {
		return s;
	}
	var buf_b = "";
	l -= s.length;
	while(buf_b.length < l) buf_b += c == null ? "null" : "" + c;
	buf_b += s == null ? "null" : "" + s;
	return buf_b;
};
StringTools.replace = function(s,sub,by) {
	return s.split(sub).join(by);
};
StringTools.hex = function(n,digits) {
	var s = "";
	while(true) {
		s = "0123456789ABCDEF".charAt(n & 15) + s;
		n >>>= 4;
		if(!(n > 0)) {
			break;
		}
	}
	if(digits != null) {
		while(s.length < digits) s = "0" + s;
	}
	return s;
};
var ValueType = $hxEnums["ValueType"] = { __ename__ : "ValueType", __constructs__ : ["TNull","TInt","TFloat","TBool","TObject","TFunction","TClass","TEnum","TUnknown"]
	,TNull: {_hx_index:0,__enum__:"ValueType",toString:$estr}
	,TInt: {_hx_index:1,__enum__:"ValueType",toString:$estr}
	,TFloat: {_hx_index:2,__enum__:"ValueType",toString:$estr}
	,TBool: {_hx_index:3,__enum__:"ValueType",toString:$estr}
	,TObject: {_hx_index:4,__enum__:"ValueType",toString:$estr}
	,TFunction: {_hx_index:5,__enum__:"ValueType",toString:$estr}
	,TClass: ($_=function(c) { return {_hx_index:6,c:c,__enum__:"ValueType",toString:$estr}; },$_.__params__ = ["c"],$_)
	,TEnum: ($_=function(e) { return {_hx_index:7,e:e,__enum__:"ValueType",toString:$estr}; },$_.__params__ = ["e"],$_)
	,TUnknown: {_hx_index:8,__enum__:"ValueType",toString:$estr}
};
var Type = function() { };
Type.__name__ = "Type";
Type.getEnum = function(o) {
	if(o == null) {
		return null;
	}
	return $hxEnums[o.__enum__];
};
Type.getInstanceFields = function(c) {
	var a = [];
	for(var i in c.prototype) a.push(i);
	HxOverrides.remove(a,"__class__");
	HxOverrides.remove(a,"__properties__");
	return a;
};
Type.typeof = function(v) {
	switch(typeof(v)) {
	case "boolean":
		return ValueType.TBool;
	case "function":
		if(v.__name__ || v.__ename__) {
			return ValueType.TObject;
		}
		return ValueType.TFunction;
	case "number":
		if(Math.ceil(v) == v % 2147483648.0) {
			return ValueType.TInt;
		}
		return ValueType.TFloat;
	case "object":
		if(v == null) {
			return ValueType.TNull;
		}
		var e = v.__enum__;
		if(e != null) {
			return ValueType.TEnum($hxEnums[e]);
		}
		var c = js_Boot.getClass(v);
		if(c != null) {
			return ValueType.TClass(c);
		}
		return ValueType.TObject;
	case "string":
		return ValueType.TClass(String);
	case "undefined":
		return ValueType.TNull;
	default:
		return ValueType.TUnknown;
	}
};
Type.enumParameters = function(e) {
	var enm = $hxEnums[e.__enum__];
	var ctorName = enm.__constructs__[e._hx_index];
	var params = enm[ctorName].__params__;
	if(params != null) {
		var _g = [];
		var _g1 = 0;
		while(_g1 < params.length) {
			var p = params[_g1];
			++_g1;
			_g.push(e[p]);
		}
		return _g;
	} else {
		return [];
	}
};
var _$UInt_UInt_$Impl_$ = {};
_$UInt_UInt_$Impl_$.__name__ = "_UInt.UInt_Impl_";
_$UInt_UInt_$Impl_$.toFloat = function(this1) {
	if(this1 < 0) {
		return 4294967296.0 + this1;
	} else {
		return this1 + 0.0;
	}
};
var geom__$Vector2d_Vector2d_$Impl_$ = {};
geom__$Vector2d_Vector2d_$Impl_$.__name__ = "geom._Vector2d.Vector2d_Impl_";
geom__$Vector2d_Vector2d_$Impl_$.__properties__ = {set_magnitude:"set_magnitude",get_magnitude:"get_magnitude",set_length:"set_length",get_length:"get_length",get_self:"get_self"};
geom__$Vector2d_Vector2d_$Impl_$._new = function(x,y) {
	if(y == null) {
		y = 0.0;
	}
	if(x == null) {
		x = 0.0;
	}
	var this1 = { x : x, y : y};
	return this1;
};
geom__$Vector2d_Vector2d_$Impl_$.get_self = function(this1) {
	return this1;
};
geom__$Vector2d_Vector2d_$Impl_$.set = function(this1,x,y) {
	this1.x = x;
	this1.y = y == null ? x : y;
	return this1;
};
geom__$Vector2d_Vector2d_$Impl_$.clone = function(this1) {
	var this2 = { x : this1.x, y : this1.y};
	return this2;
};
geom__$Vector2d_Vector2d_$Impl_$.copy = function(this1,target) {
	this1.x = target.x;
	this1.y = target.y;
	return this1;
};
geom__$Vector2d_Vector2d_$Impl_$.round = function(this1) {
	this1.x = Math.round(this1.x);
	this1.y = Math.round(this1.y);
	return this1;
};
geom__$Vector2d_Vector2d_$Impl_$.floor = function(this1) {
	this1.x = Math.floor(this1.x);
	this1.y = Math.floor(this1.y);
	return this1;
};
geom__$Vector2d_Vector2d_$Impl_$.ceil = function(this1) {
	this1.x = Math.ceil(this1.x);
	this1.y = Math.ceil(this1.y);
	return this1;
};
geom__$Vector2d_Vector2d_$Impl_$.abs = function(this1) {
	this1.x = Math.abs(this1.x);
	this1.y = Math.abs(this1.y);
	return this1;
};
geom__$Vector2d_Vector2d_$Impl_$.get_length = function(this1) {
	return this1.x * this1.x + this1.y * this1.y;
};
geom__$Vector2d_Vector2d_$Impl_$.set_length = function(this1,value) {
	var length = this1.x * this1.x + this1.y * this1.y;
	if(length == 0) {
		return 0;
	}
	var l = value / length;
	this1.x *= l;
	this1.y *= l;
	return value;
};
geom__$Vector2d_Vector2d_$Impl_$.inRange = function(this1,vector,range) {
	var x = this1.x;
	var y = this1.y;
	var this_x = x;
	var this_y = y;
	this_x = x - vector.x;
	this_y = y - vector.y;
	return this_x * this_x + this_y * this_y < range * range;
};
geom__$Vector2d_Vector2d_$Impl_$.distanceTo = function(this1,vector) {
	var x = this1.x;
	var y = this1.y;
	var this_x = x;
	var this_y = y;
	this_x = x - vector.x;
	this_y = y - vector.y;
	return Math.sqrt(this_x * this_x + this_y * this_y);
};
geom__$Vector2d_Vector2d_$Impl_$.distanceOf = function(a,b) {
	return geom__$Vector2d_Vector2d_$Impl_$.distanceTo(a,b);
};
geom__$Vector2d_Vector2d_$Impl_$.dot = function(this1,vector) {
	var x = this1.x;
	var y = this1.y;
	var component_x = x;
	var component_y = y;
	component_x = x * vector.x;
	component_y = y * vector.y;
	return component_x + component_y;
};
geom__$Vector2d_Vector2d_$Impl_$.vector = function(this1,vector) {
	return this1.x * vector.y - this1.y * vector.x;
};
geom__$Vector2d_Vector2d_$Impl_$.normalize = function(this1) {
	var value = Math.sqrt(this1.x * this1.x + this1.y * this1.y);
	var this2 = { x : this1.x, y : this1.y};
	this2.x /= value;
	this2.y /= value;
	return this2;
};
geom__$Vector2d_Vector2d_$Impl_$.projection = function(this1,to) {
	var this2 = to;
	var value = Math.sqrt(to.x * to.x + to.y * to.y);
	var x = this2.x;
	var y = this2.y;
	var vector_x = x;
	var vector_y = y;
	vector_x = x / value;
	vector_y = y / value;
	var x1 = this1.x;
	var y1 = this1.y;
	var component_x = x1;
	var component_y = y1;
	component_x = x1 * vector_x;
	component_y = y1 * vector_y;
	return component_x + component_y;
};
geom__$Vector2d_Vector2d_$Impl_$.angle = function(this1) {
	return Math.atan2(this1.y,this1.x);
};
geom__$Vector2d_Vector2d_$Impl_$.angleTo = function(this1,to) {
	var value = Math.sqrt(this1.x * this1.x + this1.y * this1.y);
	var x = this1.x;
	var y = this1.y;
	var this_x = x;
	var this_y = y;
	this_x = x / value;
	this_y = y / value;
	var this2 = to;
	var value1 = Math.sqrt(to.x * to.x + to.y * to.y);
	var x1 = this2.x;
	var y1 = this2.y;
	var norm2_x = x1;
	var norm2_y = y1;
	norm2_x = x1 / value1;
	norm2_y = y1 / value1;
	var x2 = this_x;
	var y2 = this_y;
	var component_x = x2;
	var component_y = y2;
	component_x = x2 * norm2_x;
	component_y = y2 * norm2_y;
	var product = component_x + component_y;
	product = Math.min(1,product);
	var angle = Math.acos(product);
	if(this1.x * to.y - this1.y * to.x < 0) {
		angle *= -1;
	}
	return angle;
};
geom__$Vector2d_Vector2d_$Impl_$.rotateAroundAngle = function(this1,angle) {
	var x = this1.x;
	var y = this1.y;
	this1.x = x * Math.cos(angle) - y * Math.sin(angle);
	this1.y = y * Math.cos(angle) + x * Math.sin(angle);
	return this1;
};
geom__$Vector2d_Vector2d_$Impl_$.moveTo = function(this1,angle,distance) {
	this1.x += Math.cos(angle) * distance;
	this1.y += Math.sin(angle) * distance;
	return this1;
};
geom__$Vector2d_Vector2d_$Impl_$.minOf = function(a,b) {
	var this1 = { x : a.x, y : a.y};
	return geom__$Vector2d_Vector2d_$Impl_$.min(this1,b);
};
geom__$Vector2d_Vector2d_$Impl_$.maxOf = function(a,b) {
	var this1 = { x : a.x, y : a.y};
	return geom__$Vector2d_Vector2d_$Impl_$.max(this1,b);
};
geom__$Vector2d_Vector2d_$Impl_$.min = function(this1,v) {
	this1.x = Math.min(this1.x,v.x);
	this1.y = Math.min(this1.y,v.y);
	return this1;
};
geom__$Vector2d_Vector2d_$Impl_$.max = function(this1,v) {
	this1.x = Math.max(this1.x,v.x);
	this1.y = Math.max(this1.y,v.y);
	return this1;
};
geom__$Vector2d_Vector2d_$Impl_$.polar = function(this1,magnitude,angle) {
	this1.x = magnitude * Math.cos(angle);
	this1.y = magnitude * Math.sin(angle);
};
geom__$Vector2d_Vector2d_$Impl_$.get_magnitude = function(this1) {
	return Math.sqrt(this1.x * this1.x + this1.y * this1.y);
};
geom__$Vector2d_Vector2d_$Impl_$.set_magnitude = function(this1,magnitude) {
	var angle = geom__$Vector2d_Vector2d_$Impl_$.angle(this1);
	this1.x = magnitude * Math.cos(angle);
	this1.y = magnitude * Math.sin(angle);
	return magnitude;
};
geom__$Vector2d_Vector2d_$Impl_$.invertX = function(this1) {
	this1.x *= -1;
};
geom__$Vector2d_Vector2d_$Impl_$.invertY = function(this1) {
	this1.y *= -1;
};
geom__$Vector2d_Vector2d_$Impl_$.invertAssign = function(this1) {
	this1.x *= -1;
	this1.y *= -1;
	return this1;
};
geom__$Vector2d_Vector2d_$Impl_$.invert = function(this1) {
	var this2 = { x : this1.x, y : this1.y};
	this2.x *= -1;
	this2.y *= -1;
	return this2;
};
geom__$Vector2d_Vector2d_$Impl_$.addAssign = function(this1,by) {
	this1.x += by.x;
	this1.y += by.y;
	return this1;
};
geom__$Vector2d_Vector2d_$Impl_$.substractAssign = function(this1,by) {
	this1.x -= by.x;
	this1.y -= by.y;
	return this1;
};
geom__$Vector2d_Vector2d_$Impl_$.multiplyAssign = function(this1,by) {
	this1.x *= by.x;
	this1.y *= by.y;
	return this1;
};
geom__$Vector2d_Vector2d_$Impl_$.divideAssign = function(this1,by) {
	this1.x /= by.x;
	this1.y /= by.y;
	return this1;
};
geom__$Vector2d_Vector2d_$Impl_$.moduloAssign = function(this1,by) {
	this1.x %= by.x;
	this1.y %= by.y;
	return this1;
};
geom__$Vector2d_Vector2d_$Impl_$.add = function(this1,vector) {
	var this2 = { x : this1.x, y : this1.y};
	this2.x += vector.x;
	this2.y += vector.y;
	return this2;
};
geom__$Vector2d_Vector2d_$Impl_$.substract = function(this1,vector) {
	var this2 = { x : this1.x, y : this1.y};
	this2.x -= vector.x;
	this2.y -= vector.y;
	return this2;
};
geom__$Vector2d_Vector2d_$Impl_$.multiply = function(this1,vector) {
	var this2 = { x : this1.x, y : this1.y};
	this2.x *= vector.x;
	this2.y *= vector.y;
	return this2;
};
geom__$Vector2d_Vector2d_$Impl_$.devide = function(this1,vector) {
	var this2 = { x : this1.x, y : this1.y};
	this2.x /= vector.x;
	this2.y /= vector.y;
	return this2;
};
geom__$Vector2d_Vector2d_$Impl_$.modulo = function(this1,vector) {
	var this2 = { x : this1.x, y : this1.y};
	this2.x %= vector.x;
	this2.y %= vector.y;
	return this2;
};
geom__$Vector2d_Vector2d_$Impl_$.addFloatAssign = function(this1,v) {
	this1.x += v;
	this1.y += v;
	return this1;
};
geom__$Vector2d_Vector2d_$Impl_$.substractFloatAssign = function(this1,v) {
	this1.x -= v;
	this1.y -= v;
	return this1;
};
geom__$Vector2d_Vector2d_$Impl_$.multiplyFloatAssign = function(this1,v) {
	this1.x *= v;
	this1.y *= v;
	return this1;
};
geom__$Vector2d_Vector2d_$Impl_$.devideFloatAssign = function(this1,v) {
	this1.x /= v;
	this1.y /= v;
	return this1;
};
geom__$Vector2d_Vector2d_$Impl_$.moduloFloatAssign = function(this1,v) {
	this1.x %= v;
	this1.y %= v;
	return this1;
};
geom__$Vector2d_Vector2d_$Impl_$.addFloat = function(this1,value) {
	var this2 = { x : this1.x, y : this1.y};
	this2.x += value;
	this2.y += value;
	return this2;
};
geom__$Vector2d_Vector2d_$Impl_$.substractFloat = function(this1,value) {
	var this2 = { x : this1.x, y : this1.y};
	this2.x -= value;
	this2.y -= value;
	return this2;
};
geom__$Vector2d_Vector2d_$Impl_$.multiplyFloat = function(this1,value) {
	var this2 = { x : this1.x, y : this1.y};
	this2.x *= value;
	this2.y *= value;
	return this2;
};
geom__$Vector2d_Vector2d_$Impl_$.devideFloat = function(this1,value) {
	var this2 = { x : this1.x, y : this1.y};
	this2.x /= value;
	this2.y /= value;
	return this2;
};
geom__$Vector2d_Vector2d_$Impl_$.moduloFloat = function(this1,value) {
	var this2 = { x : this1.x, y : this1.y};
	this2.x %= value;
	this2.y %= value;
	return this2;
};
geom__$Vector2d_Vector2d_$Impl_$.equals = function(this1,v) {
	if(this1.x == v.x) {
		return this1.y == v.y;
	} else {
		return false;
	}
};
geom__$Vector2d_Vector2d_$Impl_$.notEquals = function(this1,v) {
	return !(this1.x == v.x && this1.y == v.y);
};
geom__$Vector2d_Vector2d_$Impl_$.toArray = function(this1) {
	return [this1.x,this1.y];
};
geom__$Vector2d_Vector2d_$Impl_$.isNil = function(this1) {
	return this1 == null;
};
geom__$Vector2d_Vector2d_$Impl_$.nil = function() {
	return null;
};
geom__$Vector2d_Vector2d_$Impl_$.toString = function(this1,prefix) {
	return (prefix != null ? "" + prefix + "=" : "") + ("{x:" + this1.x + ", y:" + this1.y + "}");
};
var haxe_StackItem = $hxEnums["haxe.StackItem"] = { __ename__ : "haxe.StackItem", __constructs__ : ["CFunction","Module","FilePos","Method","LocalFunction"]
	,CFunction: {_hx_index:0,__enum__:"haxe.StackItem",toString:$estr}
	,Module: ($_=function(m) { return {_hx_index:1,m:m,__enum__:"haxe.StackItem",toString:$estr}; },$_.__params__ = ["m"],$_)
	,FilePos: ($_=function(s,file,line,column) { return {_hx_index:2,s:s,file:file,line:line,column:column,__enum__:"haxe.StackItem",toString:$estr}; },$_.__params__ = ["s","file","line","column"],$_)
	,Method: ($_=function(classname,method) { return {_hx_index:3,classname:classname,method:method,__enum__:"haxe.StackItem",toString:$estr}; },$_.__params__ = ["classname","method"],$_)
	,LocalFunction: ($_=function(v) { return {_hx_index:4,v:v,__enum__:"haxe.StackItem",toString:$estr}; },$_.__params__ = ["v"],$_)
};
var haxe_CallStack = function() { };
haxe_CallStack.__name__ = "haxe.CallStack";
haxe_CallStack.getStack = function(e) {
	if(e == null) {
		return [];
	}
	var oldValue = Error.prepareStackTrace;
	Error.prepareStackTrace = function(error,callsites) {
		var stack = [];
		var _g = 0;
		while(_g < callsites.length) {
			var site = callsites[_g];
			++_g;
			if(haxe_CallStack.wrapCallSite != null) {
				site = haxe_CallStack.wrapCallSite(site);
			}
			var method = null;
			var fullName = site.getFunctionName();
			if(fullName != null) {
				var idx = fullName.lastIndexOf(".");
				if(idx >= 0) {
					var className = HxOverrides.substr(fullName,0,idx);
					var methodName = HxOverrides.substr(fullName,idx + 1,null);
					method = haxe_StackItem.Method(className,methodName);
				}
			}
			var fileName = site.getFileName();
			var fileAddr = fileName == null ? -1 : fileName.indexOf("file:");
			if(haxe_CallStack.wrapCallSite != null && fileAddr > 0) {
				fileName = HxOverrides.substr(fileName,fileAddr + 6,null);
			}
			stack.push(haxe_StackItem.FilePos(method,fileName,site.getLineNumber(),site.getColumnNumber()));
		}
		return stack;
	};
	var a = haxe_CallStack.makeStack(e.stack);
	Error.prepareStackTrace = oldValue;
	return a;
};
haxe_CallStack.callStack = function() {
	try {
		throw new Error();
	} catch( e ) {
		haxe_CallStack.lastException = e;
		var a = haxe_CallStack.getStack(e);
		a.shift();
		return a;
	}
};
haxe_CallStack.exceptionStack = function() {
	return haxe_CallStack.getStack(haxe_CallStack.lastException);
};
haxe_CallStack.toString = function(stack) {
	var b = new StringBuf();
	var _g = 0;
	while(_g < stack.length) {
		var s = stack[_g];
		++_g;
		b.b += "\nCalled from ";
		haxe_CallStack.itemToString(b,s);
	}
	return b.b;
};
haxe_CallStack.itemToString = function(b,s) {
	switch(s._hx_index) {
	case 0:
		b.b += "a C function";
		break;
	case 1:
		var m = s.m;
		b.b = (b.b += "module ") + (m == null ? "null" : "" + m);
		break;
	case 2:
		var col = s.column;
		var line = s.line;
		var file = s.file;
		var s1 = s.s;
		if(s1 != null) {
			haxe_CallStack.itemToString(b,s1);
			b.b += " (";
		}
		b.b = (b.b += file == null ? "null" : "" + file) + " line ";
		b.b += line == null ? "null" : "" + line;
		if(col != null) {
			b.b = (b.b += " column ") + (col == null ? "null" : "" + col);
		}
		if(s1 != null) {
			b.b += ")";
		}
		break;
	case 3:
		var meth = s.method;
		var cname = s.classname;
		b.b = (b.b += cname == null ? "null" : "" + cname) + ".";
		b.b += meth == null ? "null" : "" + meth;
		break;
	case 4:
		var n = s.v;
		b.b = (b.b += "local function #") + (n == null ? "null" : "" + n);
		break;
	}
};
haxe_CallStack.makeStack = function(s) {
	if(s == null) {
		return [];
	} else if(typeof(s) == "string") {
		var stack = s.split("\n");
		if(stack[0] == "Error") {
			stack.shift();
		}
		var m = [];
		var rie10 = new EReg("^   at ([A-Za-z0-9_. ]+) \\(([^)]+):([0-9]+):([0-9]+)\\)$","");
		var _g = 0;
		while(_g < stack.length) {
			var line = stack[_g];
			++_g;
			if(rie10.match(line)) {
				var path = rie10.matched(1).split(".");
				var meth = path.pop();
				var file = rie10.matched(2);
				var line1 = Std.parseInt(rie10.matched(3));
				var column = Std.parseInt(rie10.matched(4));
				m.push(haxe_StackItem.FilePos(meth == "Anonymous function" ? haxe_StackItem.LocalFunction() : meth == "Global code" ? null : haxe_StackItem.Method(path.join("."),meth),file,line1,column));
			} else {
				m.push(haxe_StackItem.Module(StringTools.trim(line)));
			}
		}
		return m;
	} else {
		return s;
	}
};
var haxe_IMap = function() { };
haxe_IMap.__name__ = "haxe.IMap";
haxe_IMap.prototype = {
	get: null
	,keys: null
	,__class__: haxe_IMap
};
var haxe_Log = function() { };
haxe_Log.__name__ = "haxe.Log";
haxe_Log.formatOutput = function(v,infos) {
	var str = Std.string(v);
	if(infos == null) {
		return str;
	}
	var pstr = infos.fileName + ":" + infos.lineNumber;
	if(infos != null && infos.customParams != null) {
		var _g = 0;
		var _g1 = infos.customParams;
		while(_g < _g1.length) {
			var v1 = _g1[_g];
			++_g;
			str += ", " + Std.string(v1);
		}
	}
	return pstr + ": " + str;
};
haxe_Log.trace = function(v,infos) {
	var str = haxe_Log.formatOutput(v,infos);
	if(typeof(console) != "undefined" && console.log != null) {
		console.log(str);
	}
};
var haxe_Timer = function(time_ms) {
	var me = this;
	this.id = setInterval(function() {
		me.run();
	},time_ms);
};
haxe_Timer.__name__ = "haxe.Timer";
haxe_Timer.delay = function(f,time_ms) {
	var t = new haxe_Timer(time_ms);
	t.run = function() {
		t.stop();
		f();
	};
	return t;
};
haxe_Timer.prototype = {
	id: null
	,stop: function() {
		if(this.id == null) {
			return;
		}
		clearInterval(this.id);
		this.id = null;
	}
	,run: function() {
	}
	,__class__: haxe_Timer
};
var haxe_ds_ArraySort = function() { };
haxe_ds_ArraySort.__name__ = "haxe.ds.ArraySort";
haxe_ds_ArraySort.sort = function(a,cmp) {
	haxe_ds_ArraySort.rec(a,cmp,0,a.length);
};
haxe_ds_ArraySort.rec = function(a,cmp,from,to) {
	var middle = from + to >> 1;
	if(to - from < 12) {
		if(to <= from) {
			return;
		}
		var _g = from + 1;
		while(_g < to) {
			var i = _g++;
			var j = i;
			while(j > from) {
				if(cmp(a[j],a[j - 1]) < 0) {
					haxe_ds_ArraySort.swap(a,j - 1,j);
				} else {
					break;
				}
				--j;
			}
		}
		return;
	}
	haxe_ds_ArraySort.rec(a,cmp,from,middle);
	haxe_ds_ArraySort.rec(a,cmp,middle,to);
	haxe_ds_ArraySort.doMerge(a,cmp,from,middle,to,middle - from,to - middle);
};
haxe_ds_ArraySort.doMerge = function(a,cmp,from,pivot,to,len1,len2) {
	var first_cut;
	var second_cut;
	var len11;
	var len22;
	if(len1 == 0 || len2 == 0) {
		return;
	}
	if(len1 + len2 == 2) {
		if(cmp(a[pivot],a[from]) < 0) {
			haxe_ds_ArraySort.swap(a,pivot,from);
		}
		return;
	}
	if(len1 > len2) {
		len11 = len1 >> 1;
		first_cut = from + len11;
		second_cut = haxe_ds_ArraySort.lower(a,cmp,pivot,to,first_cut);
		len22 = second_cut - pivot;
	} else {
		len22 = len2 >> 1;
		second_cut = pivot + len22;
		first_cut = haxe_ds_ArraySort.upper(a,cmp,from,pivot,second_cut);
		len11 = first_cut - from;
	}
	haxe_ds_ArraySort.rotate(a,cmp,first_cut,pivot,second_cut);
	var new_mid = first_cut + len22;
	haxe_ds_ArraySort.doMerge(a,cmp,from,first_cut,new_mid,len11,len22);
	haxe_ds_ArraySort.doMerge(a,cmp,new_mid,second_cut,to,len1 - len11,len2 - len22);
};
haxe_ds_ArraySort.rotate = function(a,cmp,from,mid,to) {
	if(from == mid || mid == to) {
		return;
	}
	var n = haxe_ds_ArraySort.gcd(to - from,mid - from);
	while(n-- != 0) {
		var val = a[from + n];
		var shift = mid - from;
		var p1 = from + n;
		var p2 = from + n + shift;
		while(p2 != from + n) {
			a[p1] = a[p2];
			p1 = p2;
			if(to - p2 > shift) {
				p2 += shift;
			} else {
				p2 = from + (shift - (to - p2));
			}
		}
		a[p1] = val;
	}
};
haxe_ds_ArraySort.gcd = function(m,n) {
	while(n != 0) {
		var t = m % n;
		m = n;
		n = t;
	}
	return m;
};
haxe_ds_ArraySort.upper = function(a,cmp,from,to,val) {
	var len = to - from;
	var half;
	var mid;
	while(len > 0) {
		half = len >> 1;
		mid = from + half;
		if(cmp(a[val],a[mid]) < 0) {
			len = half;
		} else {
			from = mid + 1;
			len = len - half - 1;
		}
	}
	return from;
};
haxe_ds_ArraySort.lower = function(a,cmp,from,to,val) {
	var len = to - from;
	var half;
	var mid;
	while(len > 0) {
		half = len >> 1;
		mid = from + half;
		if(cmp(a[mid],a[val]) < 0) {
			from = mid + 1;
			len = len - half - 1;
		} else {
			len = half;
		}
	}
	return from;
};
haxe_ds_ArraySort.swap = function(a,i,j) {
	var tmp = a[i];
	a[i] = a[j];
	a[j] = tmp;
};
var haxe_ds_List = function() {
	this.length = 0;
};
haxe_ds_List.__name__ = "haxe.ds.List";
haxe_ds_List.prototype = {
	h: null
	,q: null
	,length: null
	,add: function(item) {
		var x = new haxe_ds__$List_ListNode(item,null);
		if(this.h == null) {
			this.h = x;
		} else {
			this.q.next = x;
		}
		this.q = x;
		this.length++;
	}
	,remove: function(v) {
		var prev = null;
		var l = this.h;
		while(l != null) {
			if(l.item == v) {
				if(prev == null) {
					this.h = l.next;
				} else {
					prev.next = l.next;
				}
				if(this.q == l) {
					this.q = prev;
				}
				this.length--;
				return true;
			}
			prev = l;
			l = l.next;
		}
		return false;
	}
	,iterator: function() {
		return new haxe_ds__$List_ListIterator(this.h);
	}
	,__class__: haxe_ds_List
};
var haxe_ds__$List_ListNode = function(item,next) {
	this.item = item;
	this.next = next;
};
haxe_ds__$List_ListNode.__name__ = "haxe.ds._List.ListNode";
haxe_ds__$List_ListNode.prototype = {
	item: null
	,next: null
	,__class__: haxe_ds__$List_ListNode
};
var haxe_ds__$List_ListIterator = function(head) {
	this.head = head;
};
haxe_ds__$List_ListIterator.__name__ = "haxe.ds._List.ListIterator";
haxe_ds__$List_ListIterator.prototype = {
	head: null
	,hasNext: function() {
		return this.head != null;
	}
	,next: function() {
		var val = this.head.item;
		this.head = this.head.next;
		return val;
	}
	,__class__: haxe_ds__$List_ListIterator
};
var haxe_ds_ObjectMap = function() {
	this.h = { __keys__ : { }};
};
haxe_ds_ObjectMap.__name__ = "haxe.ds.ObjectMap";
haxe_ds_ObjectMap.__interfaces__ = [haxe_IMap];
haxe_ds_ObjectMap.prototype = {
	h: null
	,set: function(key,value) {
		var id = key.__id__ || (key.__id__ = ++haxe_ds_ObjectMap.count);
		this.h[id] = value;
		this.h.__keys__[id] = key;
	}
	,get: function(key) {
		return this.h[key.__id__];
	}
	,remove: function(key) {
		var id = key.__id__;
		if(this.h.__keys__[id] == null) {
			return false;
		}
		delete(this.h[id]);
		delete(this.h.__keys__[id]);
		return true;
	}
	,keys: function() {
		var a = [];
		for( var key in this.h.__keys__ ) {
		if(this.h.hasOwnProperty(key)) {
			a.push(this.h.__keys__[key]);
		}
		}
		return HxOverrides.iter(a);
	}
	,__class__: haxe_ds_ObjectMap
};
var haxe_ds_StringMap = function() {
	this.h = { };
};
haxe_ds_StringMap.__name__ = "haxe.ds.StringMap";
haxe_ds_StringMap.__interfaces__ = [haxe_IMap];
haxe_ds_StringMap.prototype = {
	h: null
	,rh: null
	,get: function(key) {
		if(__map_reserved[key] != null) {
			return this.getReserved(key);
		}
		return this.h[key];
	}
	,setReserved: function(key,value) {
		if(this.rh == null) {
			this.rh = { };
		}
		this.rh["$" + key] = value;
	}
	,getReserved: function(key) {
		if(this.rh == null) {
			return null;
		} else {
			return this.rh["$" + key];
		}
	}
	,existsReserved: function(key) {
		if(this.rh == null) {
			return false;
		}
		return this.rh.hasOwnProperty("$" + key);
	}
	,keys: function() {
		return HxOverrides.iter(this.arrayKeys());
	}
	,arrayKeys: function() {
		var out = [];
		for( var key in this.h ) {
		if(this.h.hasOwnProperty(key)) {
			out.push(key);
		}
		}
		if(this.rh != null) {
			for( var key in this.rh ) {
			if(key.charCodeAt(0) == 36) {
				out.push(key.substr(1));
			}
			}
		}
		return out;
	}
	,__class__: haxe_ds_StringMap
};
var haxe_io_Bytes = function(data) {
	this.length = data.byteLength;
	this.b = new Uint8Array(data);
	this.b.bufferValue = data;
	data.hxBytes = this;
	data.bytes = this.b;
};
haxe_io_Bytes.__name__ = "haxe.io.Bytes";
haxe_io_Bytes.prototype = {
	length: null
	,b: null
	,__class__: haxe_io_Bytes
};
var haxe_rtti_Meta = function() { };
haxe_rtti_Meta.__name__ = "haxe.rtti.Meta";
haxe_rtti_Meta.getMeta = function(t) {
	return t.__meta__;
};
haxe_rtti_Meta.getFields = function(t) {
	var meta = haxe_rtti_Meta.getMeta(t);
	if(meta == null || meta.fields == null) {
		return { };
	} else {
		return meta.fields;
	}
};
var hxClipper_DoublePoint = function(x,y) {
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	this.x = x;
	this.y = y;
};
hxClipper_DoublePoint.__name__ = "hxClipper.DoublePoint";
hxClipper_DoublePoint.fromDoublePoint = function(dp) {
	return dp.clone();
};
hxClipper_DoublePoint.fromIntPoint = function(ip) {
	return new hxClipper_DoublePoint(ip.x,ip.y);
};
hxClipper_DoublePoint.prototype = {
	x: null
	,y: null
	,clone: function() {
		return new hxClipper_DoublePoint(this.x,this.y);
	}
	,toString: function() {
		return "(x:" + this.x + ", y:" + this.y + ")";
	}
	,__class__: hxClipper_DoublePoint
};
var hxClipper_PolyNode = function() {
	this.mChildren = [];
	this.mPolygon = [];
};
hxClipper_PolyNode.__name__ = "hxClipper.PolyNode";
hxClipper_PolyNode.prototype = {
	mParent: null
	,mPolygon: null
	,mIndex: null
	,mJoinType: null
	,mEndtype: null
	,mChildren: null
	,isHoleNode: function() {
		var result = true;
		var node = this.mParent;
		while(node != null) {
			result = !result;
			node = node.mParent;
		}
		return result;
	}
	,get_numChildren: function() {
		return this.mChildren.length;
	}
	,get_contour: function() {
		return this.mPolygon;
	}
	,addChild: function(child) {
		var cnt = this.mChildren.length;
		this.mChildren.push(child);
		child.mParent = this;
		child.mIndex = cnt;
	}
	,getNext: function() {
		if(this.mChildren.length > 0) {
			return this.mChildren[0];
		} else {
			return this.getNextSiblingUp();
		}
	}
	,getNextSiblingUp: function() {
		if(this.mParent == null) {
			return null;
		} else if(this.mIndex == this.mParent.mChildren.length - 1) {
			return this.mParent.getNextSiblingUp();
		} else {
			return this.mParent.mChildren[this.mIndex + 1];
		}
	}
	,get_children: function() {
		return this.mChildren;
	}
	,parent: null
	,get_parent: function() {
		return this.mParent;
	}
	,get_isHole: function() {
		return this.isHoleNode();
	}
	,isOpen: null
	,__class__: hxClipper_PolyNode
	,__properties__: {get_isHole:"get_isHole",get_parent:"get_parent",get_children:"get_children",get_contour:"get_contour",get_numChildren:"get_numChildren"}
};
var hxClipper_PolyTree = function() {
	this.mAllPolys = [];
	hxClipper_PolyNode.call(this);
};
hxClipper_PolyTree.__name__ = "hxClipper.PolyTree";
hxClipper_PolyTree.__super__ = hxClipper_PolyNode;
hxClipper_PolyTree.prototype = $extend(hxClipper_PolyNode.prototype,{
	mAllPolys: null
	,clear: function() {
		var _g = 0;
		var _g1 = this.mAllPolys.length;
		while(_g < _g1) {
			var i = _g++;
			this.mAllPolys[i] = null;
		}
		this.mAllPolys.length = 0;
		this.mChildren.length = 0;
	}
	,getFirst: function() {
		if(this.mChildren.length > 0) {
			return this.mChildren[0];
		} else {
			return null;
		}
	}
	,get_total: function() {
		var result = this.mAllPolys.length;
		if(result > 0 && this.mChildren[0] != this.mAllPolys[0]) {
			--result;
		}
		return result;
	}
	,__class__: hxClipper_PolyTree
	,__properties__: $extend(hxClipper_PolyNode.prototype.__properties__,{get_total:"get_total"})
});
var hxClipper_IntPoint = function(x,y) {
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	this.x = x;
	this.y = y;
};
hxClipper_IntPoint.__name__ = "hxClipper.IntPoint";
hxClipper_IntPoint.fromFloats = function(x,y) {
	return new hxClipper_IntPoint(x | 0,y | 0);
};
hxClipper_IntPoint.fromDoublePoint = function(dp) {
	return hxClipper_IntPoint.fromFloats(dp.x,dp.y);
};
hxClipper_IntPoint.fromIntPoint = function(pt) {
	return pt.clone();
};
hxClipper_IntPoint.prototype = {
	x: null
	,y: null
	,clone: function() {
		return new hxClipper_IntPoint(this.x,this.y);
	}
	,toString: function() {
		return "(x:" + this.x + ", y:" + this.y + ")";
	}
	,copyFrom: function(ip) {
		this.x = ip.x;
		this.y = ip.y;
	}
	,equals: function(ip) {
		if(this.x == ip.x) {
			return this.y == ip.y;
		} else {
			return false;
		}
	}
	,__class__: hxClipper_IntPoint
};
var hxClipper_IntRect = function(l,t,r,b) {
	this.left = l;
	this.top = t;
	this.right = r;
	this.bottom = b;
};
hxClipper_IntRect.__name__ = "hxClipper.IntRect";
hxClipper_IntRect.prototype = {
	left: null
	,top: null
	,right: null
	,bottom: null
	,clone: function(ir) {
		return new hxClipper_IntRect(this.left,this.top,this.right,this.bottom);
	}
	,__class__: hxClipper_IntRect
};
var hxClipper_ClipType = $hxEnums["hxClipper.ClipType"] = { __ename__ : "hxClipper.ClipType", __constructs__ : ["CT_INTERSECTION","CT_UNION","CT_DIFFERENCE","CT_XOR"]
	,CT_INTERSECTION: {_hx_index:0,__enum__:"hxClipper.ClipType",toString:$estr}
	,CT_UNION: {_hx_index:1,__enum__:"hxClipper.ClipType",toString:$estr}
	,CT_DIFFERENCE: {_hx_index:2,__enum__:"hxClipper.ClipType",toString:$estr}
	,CT_XOR: {_hx_index:3,__enum__:"hxClipper.ClipType",toString:$estr}
};
var hxClipper_PolyType = $hxEnums["hxClipper.PolyType"] = { __ename__ : "hxClipper.PolyType", __constructs__ : ["PT_SUBJECT","PT_CLIP"]
	,PT_SUBJECT: {_hx_index:0,__enum__:"hxClipper.PolyType",toString:$estr}
	,PT_CLIP: {_hx_index:1,__enum__:"hxClipper.PolyType",toString:$estr}
};
var hxClipper_PolyFillType = $hxEnums["hxClipper.PolyFillType"] = { __ename__ : "hxClipper.PolyFillType", __constructs__ : ["PFT_EVEN_ODD","PFT_NON_ZERO","PFT_POSITIVE","PFT_NEGATIVE"]
	,PFT_EVEN_ODD: {_hx_index:0,__enum__:"hxClipper.PolyFillType",toString:$estr}
	,PFT_NON_ZERO: {_hx_index:1,__enum__:"hxClipper.PolyFillType",toString:$estr}
	,PFT_POSITIVE: {_hx_index:2,__enum__:"hxClipper.PolyFillType",toString:$estr}
	,PFT_NEGATIVE: {_hx_index:3,__enum__:"hxClipper.PolyFillType",toString:$estr}
};
var hxClipper_JoinType = $hxEnums["hxClipper.JoinType"] = { __ename__ : "hxClipper.JoinType", __constructs__ : ["JT_SQUARE","JT_ROUND","JT_MITER"]
	,JT_SQUARE: {_hx_index:0,__enum__:"hxClipper.JoinType",toString:$estr}
	,JT_ROUND: {_hx_index:1,__enum__:"hxClipper.JoinType",toString:$estr}
	,JT_MITER: {_hx_index:2,__enum__:"hxClipper.JoinType",toString:$estr}
};
var hxClipper_EndType = $hxEnums["hxClipper.EndType"] = { __ename__ : "hxClipper.EndType", __constructs__ : ["ET_CLOSED_POLYGON","ET_CLOSED_LINE","ET_OPEN_BUTT","ET_OPEN_SQUARE","ET_OPEN_ROUND"]
	,ET_CLOSED_POLYGON: {_hx_index:0,__enum__:"hxClipper.EndType",toString:$estr}
	,ET_CLOSED_LINE: {_hx_index:1,__enum__:"hxClipper.EndType",toString:$estr}
	,ET_OPEN_BUTT: {_hx_index:2,__enum__:"hxClipper.EndType",toString:$estr}
	,ET_OPEN_SQUARE: {_hx_index:3,__enum__:"hxClipper.EndType",toString:$estr}
	,ET_OPEN_ROUND: {_hx_index:4,__enum__:"hxClipper.EndType",toString:$estr}
};
var hxClipper__$Clipper_EdgeSide = $hxEnums["hxClipper._Clipper.EdgeSide"] = { __ename__ : "hxClipper._Clipper.EdgeSide", __constructs__ : ["ES_LEFT","ES_RIGHT"]
	,ES_LEFT: {_hx_index:0,__enum__:"hxClipper._Clipper.EdgeSide",toString:$estr}
	,ES_RIGHT: {_hx_index:1,__enum__:"hxClipper._Clipper.EdgeSide",toString:$estr}
};
var hxClipper__$Clipper_Direction = $hxEnums["hxClipper._Clipper.Direction"] = { __ename__ : "hxClipper._Clipper.Direction", __constructs__ : ["D_RIGHT_TO_LEFT","D_LEFT_TO_RIGHT"]
	,D_RIGHT_TO_LEFT: {_hx_index:0,__enum__:"hxClipper._Clipper.Direction",toString:$estr}
	,D_LEFT_TO_RIGHT: {_hx_index:1,__enum__:"hxClipper._Clipper.Direction",toString:$estr}
};
var hxClipper__$Clipper_NodeType = $hxEnums["hxClipper._Clipper.NodeType"] = { __ename__ : "hxClipper._Clipper.NodeType", __constructs__ : ["NT_ANY","NT_OPEN","NT_CLOSED"]
	,NT_ANY: {_hx_index:0,__enum__:"hxClipper._Clipper.NodeType",toString:$estr}
	,NT_OPEN: {_hx_index:1,__enum__:"hxClipper._Clipper.NodeType",toString:$estr}
	,NT_CLOSED: {_hx_index:2,__enum__:"hxClipper._Clipper.NodeType",toString:$estr}
};
var hxClipper__$Clipper_TEdge = function() {
	this.delta = new hxClipper_IntPoint();
	this.top = new hxClipper_IntPoint();
	this.curr = new hxClipper_IntPoint();
	this.bot = new hxClipper_IntPoint();
};
hxClipper__$Clipper_TEdge.__name__ = "hxClipper._Clipper.TEdge";
hxClipper__$Clipper_TEdge.prototype = {
	bot: null
	,curr: null
	,top: null
	,delta: null
	,dx: null
	,polyType: null
	,side: null
	,windDelta: null
	,windCnt: null
	,windCnt2: null
	,outIdx: null
	,next: null
	,prev: null
	,nextInLML: null
	,nextInAEL: null
	,prevInAEL: null
	,nextInSEL: null
	,prevInSEL: null
	,toString: function() {
		return "TE(curr:" + this.curr.toString() + ", bot:" + this.bot.toString() + ", top:" + this.top.toString() + ", dx:" + this.dx + ")";
	}
	,__class__: hxClipper__$Clipper_TEdge
};
var hxClipper_IntersectNode = function() {
	this.pt = new hxClipper_IntPoint();
};
hxClipper_IntersectNode.__name__ = "hxClipper.IntersectNode";
hxClipper_IntersectNode.prototype = {
	edge1: null
	,edge2: null
	,pt: null
	,__class__: hxClipper_IntersectNode
};
var hxClipper__$Clipper_LocalMinima = function() {
};
hxClipper__$Clipper_LocalMinima.__name__ = "hxClipper._Clipper.LocalMinima";
hxClipper__$Clipper_LocalMinima.prototype = {
	y: null
	,leftBound: null
	,rightBound: null
	,next: null
	,__class__: hxClipper__$Clipper_LocalMinima
};
var hxClipper__$Clipper_Scanbeam = function() {
};
hxClipper__$Clipper_Scanbeam.__name__ = "hxClipper._Clipper.Scanbeam";
hxClipper__$Clipper_Scanbeam.prototype = {
	y: null
	,next: null
	,__class__: hxClipper__$Clipper_Scanbeam
};
var hxClipper__$Clipper_Maxima = function() {
};
hxClipper__$Clipper_Maxima.__name__ = "hxClipper._Clipper.Maxima";
hxClipper__$Clipper_Maxima.prototype = {
	x: null
	,next: null
	,prev: null
	,__class__: hxClipper__$Clipper_Maxima
};
var hxClipper__$Clipper_OutRec = function() {
};
hxClipper__$Clipper_OutRec.__name__ = "hxClipper._Clipper.OutRec";
hxClipper__$Clipper_OutRec.prototype = {
	idx: null
	,isHole: null
	,isOpen: null
	,firstLeft: null
	,pts: null
	,bottomPt: null
	,polyNode: null
	,__class__: hxClipper__$Clipper_OutRec
};
var hxClipper__$Clipper_OutPt = function() {
	this.pt = new hxClipper_IntPoint();
};
hxClipper__$Clipper_OutPt.__name__ = "hxClipper._Clipper.OutPt";
hxClipper__$Clipper_OutPt.prototype = {
	idx: null
	,pt: null
	,next: null
	,prev: null
	,__class__: hxClipper__$Clipper_OutPt
};
var hxClipper__$Clipper_Join = function() {
	this.offPt = new hxClipper_IntPoint();
};
hxClipper__$Clipper_Join.__name__ = "hxClipper._Clipper.Join";
hxClipper__$Clipper_Join.prototype = {
	outPt1: null
	,outPt2: null
	,offPt: null
	,__class__: hxClipper__$Clipper_Join
};
var hxClipper_ClipperBase = function() {
	this.mEdges = [];
	this.mMinimaList = null;
	this.mCurrentLM = null;
	this.mUseFullRange = false;
	this.mHasOpenPaths = false;
};
hxClipper_ClipperBase.__name__ = "hxClipper.ClipperBase";
hxClipper_ClipperBase.nearZero = function(val) {
	if(val > -1e-20) {
		return val < 1.0E-20;
	} else {
		return false;
	}
};
hxClipper_ClipperBase.isHorizontal = function(e) {
	return e.delta.y == 0;
};
hxClipper_ClipperBase.slopesEqual = function(e1,e2,useFullRange) {
	return e1.delta.y * e2.delta.x == e1.delta.x * e2.delta.y;
};
hxClipper_ClipperBase.slopesEqual3 = function(pt1,pt2,pt3,useFullRange) {
	return (pt1.y - pt2.y) * (pt2.x - pt3.x) - (pt1.x - pt2.x) * (pt2.y - pt3.y) == 0;
};
hxClipper_ClipperBase.slopesEqual4 = function(pt1,pt2,pt3,pt4,useFullRange) {
	return (pt1.y - pt2.y) * (pt3.x - pt4.x) - (pt1.x - pt2.x) * (pt3.y - pt4.y) == 0;
};
hxClipper_ClipperBase.getBounds = function(paths) {
	var i = 0;
	var cnt = paths.length;
	while(i < cnt && paths[i].length == 0) ++i;
	if(i == cnt) {
		return new hxClipper_IntRect(0,0,0,0);
	}
	var result = new hxClipper_IntRect(0,0,0,0);
	result.left = paths[i][0].x;
	result.right = result.left;
	result.top = paths[i][0].y;
	result.bottom = result.top;
	while(i < cnt) {
		var _g = 0;
		var _g1 = paths[i].length;
		while(_g < _g1) {
			var j = _g++;
			if(paths[i][j].x < result.left) {
				result.left = paths[i][j].x;
			} else if(paths[i][j].x > result.right) {
				result.right = paths[i][j].x;
			}
			if(paths[i][j].y < result.top) {
				result.top = paths[i][j].y;
			} else if(paths[i][j].y > result.bottom) {
				result.bottom = paths[i][j].y;
			}
		}
		++i;
	}
	return result;
};
hxClipper_ClipperBase.prototype = {
	mMinimaList: null
	,mCurrentLM: null
	,mEdges: null
	,mScanbeam: null
	,mPolyOuts: null
	,mActiveEdges: null
	,mUseFullRange: null
	,mHasOpenPaths: null
	,preserveCollinear: null
	,pointIsVertex: function(pt,pp) {
		var pp2 = pp;
		while(true) {
			if(pp2.pt.equals(pt)) {
				return true;
			}
			pp2 = pp2.next;
			if(!(pp2 != pp)) {
				break;
			}
		}
		return false;
	}
	,pointOnLineSegment: function(pt,linePt1,linePt2,useFullRange) {
		if(!(pt.x == linePt1.x && pt.y == linePt1.y || pt.x == linePt2.x && pt.y == linePt2.y)) {
			if(pt.x > linePt1.x == pt.x < linePt2.x && pt.y > linePt1.y == pt.y < linePt2.y) {
				return (pt.x - linePt1.x) * (linePt2.y - linePt1.y) == (linePt2.x - linePt1.x) * (pt.y - linePt1.y);
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,pointOnPolygon: function(pt,pp,useFullRange) {
		var pp2 = pp;
		while(true) {
			if(this.pointOnLineSegment(pt,pp2.pt,pp2.next.pt,useFullRange)) {
				return true;
			}
			pp2 = pp2.next;
			if(pp2 == pp) {
				break;
			}
		}
		return false;
	}
	,clear: function() {
		this.disposeLocalMinimaList();
		var _g = 0;
		var _g1 = this.mEdges.length;
		while(_g < _g1) {
			var i = _g++;
			var _g2 = 0;
			var _g11 = this.mEdges[i].length;
			while(_g2 < _g11) {
				var j = _g2++;
				this.mEdges[i][j] = null;
			}
			this.mEdges[i].length = 0;
		}
		this.mEdges.length = 0;
		this.mUseFullRange = false;
		this.mHasOpenPaths = false;
	}
	,disposeLocalMinimaList: function() {
		while(this.mMinimaList != null) {
			var tmpLm = this.mMinimaList.next;
			this.mMinimaList = null;
			this.mMinimaList = tmpLm;
		}
		this.mCurrentLM = null;
	}
	,rangeTest: function(pt,useFullRange) {
		if(useFullRange) {
			if(pt.x > 32767 || pt.y > 32767 || -pt.x > 32767 || -pt.y > 32767) {
				throw new js__$Boot_HaxeError(new hxClipper_ClipperException("Coordinate outside allowed range"));
			}
		} else if(pt.x > 32767 || pt.y > 32767 || -pt.x > 32767 || -pt.y > 32767) {
			useFullRange = true;
			this.rangeTest(pt,true);
		}
		return useFullRange;
	}
	,initEdge: function(e,eNext,ePrev,pt) {
		e.next = eNext;
		e.prev = ePrev;
		e.curr.copyFrom(pt);
		e.outIdx = -1;
	}
	,initEdge2: function(e,polyType) {
		if(e.curr.y >= e.next.curr.y) {
			e.bot.copyFrom(e.curr);
			e.top.copyFrom(e.next.curr);
		} else {
			e.top.copyFrom(e.curr);
			e.bot.copyFrom(e.next.curr);
		}
		this.setDx(e);
		e.polyType = polyType;
	}
	,findNextLocMin: function(e) {
		var e2;
		while(true) {
			while(!e.bot.equals(e.prev.bot) || e.curr.equals(e.top)) e = e.next;
			if(e.dx != -3.4E+38 && e.prev.dx != -3.4E+38) {
				break;
			}
			while(e.prev.dx == -3.4E+38) e = e.prev;
			e2 = e;
			while(e.dx == -3.4E+38) e = e.next;
			if(e.top.y == e.prev.bot.y) {
				continue;
			}
			if(e2.prev.bot.x < e.bot.x) {
				e = e2;
			}
			break;
		}
		return e;
	}
	,processBound: function(e,leftBoundIsForward) {
		var eStart;
		var result = e;
		var horz;
		if(result.outIdx == -2) {
			e = result;
			if(leftBoundIsForward) {
				while(e.top.y == e.next.bot.y) e = e.next;
				while(e != result && e.dx == -3.4E+38) e = e.prev;
			} else {
				while(e.top.y == e.prev.bot.y) e = e.prev;
				while(e != result && e.dx == -3.4E+38) e = e.next;
			}
			if(e == result) {
				if(leftBoundIsForward) {
					result = e.next;
				} else {
					result = e.prev;
				}
			} else {
				if(leftBoundIsForward) {
					e = result.next;
				} else {
					e = result.prev;
				}
				var locMin = new hxClipper__$Clipper_LocalMinima();
				locMin.next = null;
				locMin.y = e.bot.y;
				locMin.leftBound = null;
				locMin.rightBound = e;
				e.windDelta = 0;
				result = this.processBound(e,leftBoundIsForward);
				this.insertLocalMinima(locMin);
			}
			return result;
		}
		if(e.dx == -3.4E+38) {
			if(leftBoundIsForward) {
				eStart = e.prev;
			} else {
				eStart = e.next;
			}
			if(eStart.dx == -3.4E+38) {
				if(eStart.bot.x != e.bot.x && eStart.top.x != e.bot.x) {
					this.reverseHorizontal(e);
				}
			} else if(eStart.bot.x != e.bot.x) {
				this.reverseHorizontal(e);
			}
		}
		eStart = e;
		if(leftBoundIsForward) {
			while(result.top.y == result.next.bot.y && result.next.outIdx != -2) result = result.next;
			if(result.dx == -3.4E+38 && result.next.outIdx != -2) {
				horz = result;
				while(horz.prev.dx == -3.4E+38) horz = horz.prev;
				if(horz.prev.top.x > result.next.top.x) {
					result = horz.prev;
				}
			}
			while(e != result) {
				e.nextInLML = e.next;
				if(e.dx == -3.4E+38 && e != eStart && e.bot.x != e.prev.top.x) {
					this.reverseHorizontal(e);
				}
				e = e.next;
			}
			if(e.dx == -3.4E+38 && e != eStart && e.bot.x != e.prev.top.x) {
				this.reverseHorizontal(e);
			}
			result = result.next;
		} else {
			while(result.top.y == result.prev.bot.y && result.prev.outIdx != -2) result = result.prev;
			if(result.dx == -3.4E+38 && result.prev.outIdx != -2) {
				horz = result;
				while(horz.next.dx == -3.4E+38) horz = horz.next;
				if(horz.next.top.x == result.prev.top.x || horz.next.top.x > result.prev.top.x) {
					result = horz.next;
				}
			}
			while(e != result) {
				e.nextInLML = e.prev;
				if(e.dx == -3.4E+38 && e != eStart && e.bot.x != e.next.top.x) {
					this.reverseHorizontal(e);
				}
				e = e.prev;
			}
			if(e.dx == -3.4E+38 && e != eStart && e.bot.x != e.next.top.x) {
				this.reverseHorizontal(e);
			}
			result = result.prev;
		}
		return result;
	}
	,addPath: function(path,polyType,closed) {
		if(!closed) {
			throw new js__$Boot_HaxeError(new hxClipper_ClipperException("AddPath: Open paths have been disabled (define USE_LINES to enable them)."));
		}
		var highI = path.length - 1;
		if(closed) {
			while(highI > 0 && path[highI].equals(path[0])) --highI;
		}
		while(highI > 0 && path[highI].equals(path[highI - 1])) --highI;
		if(closed && highI < 2 || !closed && highI < 1) {
			return false;
		}
		var edges = [];
		var _g = 0;
		var _g1 = highI + 1;
		while(_g < _g1) {
			++_g;
			edges.push(new hxClipper__$Clipper_TEdge());
		}
		var isFlat = true;
		edges[1].curr.copyFrom(path[1]);
		this.mUseFullRange = this.rangeTest(path[0],this.mUseFullRange);
		this.mUseFullRange = this.rangeTest(path[highI],this.mUseFullRange);
		this.initEdge(edges[0],edges[1],edges[highI],path[0]);
		this.initEdge(edges[highI],edges[0],edges[highI - 1],path[highI]);
		var i = highI - 1;
		while(i >= 1) {
			this.mUseFullRange = this.rangeTest(path[i],this.mUseFullRange);
			this.initEdge(edges[i],edges[i + 1],edges[i - 1],path[i]);
			--i;
		}
		var eStart = edges[0];
		var e = eStart;
		var eLoopStop = eStart;
		while(true) {
			if(e.curr.equals(e.next.curr) && (closed || e.next != eStart)) {
				if(e == e.next) {
					break;
				}
				if(e == eStart) {
					eStart = e.next;
				}
				e = this.removeEdge(e);
				eLoopStop = e;
				continue;
			}
			if(e.prev == e.next) {
				break;
			} else if(closed && hxClipper_ClipperBase.slopesEqual3(e.prev.curr,e.curr,e.next.curr,this.mUseFullRange) && (!this.preserveCollinear || !this.pt2IsBetweenPt1AndPt3(e.prev.curr,e.curr,e.next.curr))) {
				if(e == eStart) {
					eStart = e.next;
				}
				e = this.removeEdge(e);
				e = e.prev;
				eLoopStop = e;
				continue;
			}
			e = e.next;
			if(e == eLoopStop || !closed && e.next == eStart) {
				break;
			}
		}
		if(!closed && e == e.next || closed && e.prev == e.next) {
			return false;
		}
		if(!closed) {
			this.mHasOpenPaths = true;
			eStart.prev.outIdx = -2;
		}
		e = eStart;
		while(true) {
			this.initEdge2(e,polyType);
			e = e.next;
			if(isFlat && e.curr.y != eStart.curr.y) {
				isFlat = false;
			}
			if(!(e != eStart)) {
				break;
			}
		}
		if(isFlat) {
			if(closed) {
				return false;
			}
			e.prev.outIdx = -2;
			var locMin = new hxClipper__$Clipper_LocalMinima();
			locMin.next = null;
			locMin.y = e.bot.y;
			locMin.leftBound = null;
			locMin.rightBound = e;
			locMin.rightBound.side = hxClipper__$Clipper_EdgeSide.ES_RIGHT;
			locMin.rightBound.windDelta = 0;
			while(true) {
				if(e.bot.x != e.prev.top.x) {
					this.reverseHorizontal(e);
				}
				if(e.next.outIdx == -2) {
					break;
				}
				e.nextInLML = e.next;
				e = e.next;
			}
			this.insertLocalMinima(locMin);
			this.mEdges.push(edges);
			return true;
		}
		this.mEdges.push(edges);
		var leftBoundIsForward;
		var eMin = null;
		if(e.prev.bot.equals(e.prev.top)) {
			e = e.next;
		}
		while(true) {
			e = this.findNextLocMin(e);
			if(e == eMin) {
				break;
			} else if(eMin == null) {
				eMin = e;
			}
			var locMin1 = new hxClipper__$Clipper_LocalMinima();
			locMin1.next = null;
			locMin1.y = e.bot.y;
			if(e.dx < e.prev.dx) {
				locMin1.leftBound = e.prev;
				locMin1.rightBound = e;
				leftBoundIsForward = false;
			} else {
				locMin1.leftBound = e;
				locMin1.rightBound = e.prev;
				leftBoundIsForward = true;
			}
			locMin1.leftBound.side = hxClipper__$Clipper_EdgeSide.ES_LEFT;
			locMin1.rightBound.side = hxClipper__$Clipper_EdgeSide.ES_RIGHT;
			if(!closed) {
				locMin1.leftBound.windDelta = 0;
			} else if(locMin1.leftBound.next == locMin1.rightBound) {
				locMin1.leftBound.windDelta = -1;
			} else {
				locMin1.leftBound.windDelta = 1;
			}
			locMin1.rightBound.windDelta = -locMin1.leftBound.windDelta;
			e = this.processBound(locMin1.leftBound,leftBoundIsForward);
			if(e.outIdx == -2) {
				e = this.processBound(e,leftBoundIsForward);
			}
			var E2 = this.processBound(locMin1.rightBound,!leftBoundIsForward);
			if(E2.outIdx == -2) {
				E2 = this.processBound(E2,!leftBoundIsForward);
			}
			if(locMin1.leftBound.outIdx == -2) {
				locMin1.leftBound = null;
			} else if(locMin1.rightBound.outIdx == -2) {
				locMin1.rightBound = null;
			}
			this.insertLocalMinima(locMin1);
			if(!leftBoundIsForward) {
				e = E2;
			}
		}
		return true;
	}
	,addPaths: function(paths,polyType,closed) {
		var result = false;
		var _g = 0;
		var _g1 = paths.length;
		while(_g < _g1) {
			var i = _g++;
			if(this.addPath(paths[i],polyType,closed)) {
				result = true;
			}
		}
		return result;
	}
	,pt2IsBetweenPt1AndPt3: function(pt1,pt2,pt3) {
		if(pt1.equals(pt3) || pt1.equals(pt2) || pt3.equals(pt2)) {
			return false;
		} else if(pt1.x != pt3.x) {
			return pt2.x > pt1.x == pt2.x < pt3.x;
		} else {
			return pt2.y > pt1.y == pt2.y < pt3.y;
		}
	}
	,removeEdge: function(e) {
		e.prev.next = e.next;
		e.next.prev = e.prev;
		var result = e.next;
		e.prev = null;
		return result;
	}
	,setDx: function(e) {
		e.delta.x = e.top.x - e.bot.x;
		e.delta.y = e.top.y - e.bot.y;
		if(e.delta.y == 0) {
			e.dx = -3.4E+38;
		} else {
			var deltaX = e.delta.x;
			e.dx = deltaX / e.delta.y;
		}
	}
	,insertLocalMinima: function(newLm) {
		if(this.mMinimaList == null) {
			this.mMinimaList = newLm;
		} else if(newLm.y >= this.mMinimaList.y) {
			newLm.next = this.mMinimaList;
			this.mMinimaList = newLm;
		} else {
			var tmpLm = this.mMinimaList;
			while(tmpLm.next != null && newLm.y < tmpLm.next.y) tmpLm = tmpLm.next;
			newLm.next = tmpLm.next;
			tmpLm.next = newLm;
		}
	}
	,popLocalMinima: function(y,current) {
		current.lm = this.mCurrentLM;
		if(this.mCurrentLM != null && this.mCurrentLM.y == y) {
			this.mCurrentLM = this.mCurrentLM.next;
			return true;
		}
		return false;
	}
	,reverseHorizontal: function(e) {
		var tmp = e.top.x;
		e.top.x = e.bot.x;
		e.bot.x = tmp;
	}
	,reset: function() {
		this.mCurrentLM = this.mMinimaList;
		if(this.mCurrentLM == null) {
			return;
		}
		this.mScanbeam = null;
		var lm = this.mMinimaList;
		while(lm != null) {
			this.insertScanbeam(lm.y);
			var e = lm.leftBound;
			if(e != null) {
				e.curr.copyFrom(e.bot);
				e.outIdx = -1;
			}
			e = lm.rightBound;
			if(e != null) {
				e.curr.copyFrom(e.bot);
				e.outIdx = -1;
			}
			lm = lm.next;
		}
		this.mActiveEdges = null;
	}
	,insertScanbeam: function(y) {
		if(this.mScanbeam == null) {
			this.mScanbeam = new hxClipper__$Clipper_Scanbeam();
			this.mScanbeam.next = null;
			this.mScanbeam.y = y;
		} else if(y > this.mScanbeam.y) {
			var newSb = new hxClipper__$Clipper_Scanbeam();
			newSb.y = y;
			newSb.next = this.mScanbeam;
			this.mScanbeam = newSb;
		} else {
			var sb2 = this.mScanbeam;
			while(sb2.next != null && y <= sb2.next.y) sb2 = sb2.next;
			if(y == sb2.y) {
				return;
			}
			var newSb1 = new hxClipper__$Clipper_Scanbeam();
			newSb1.y = y;
			newSb1.next = sb2.next;
			sb2.next = newSb1;
		}
	}
	,popScanbeam: function() {
		var res = { y : 0, popped : false};
		if(this.mScanbeam == null) {
			return res;
		}
		res.y = this.mScanbeam.y;
		this.mScanbeam = this.mScanbeam.next;
		res.popped = true;
		return res;
	}
	,localMinimaPending: function() {
		return this.mCurrentLM != null;
	}
	,createOutRec: function() {
		var result = new hxClipper__$Clipper_OutRec();
		result.idx = -1;
		result.isHole = false;
		result.isOpen = false;
		result.firstLeft = null;
		result.pts = null;
		result.bottomPt = null;
		result.polyNode = null;
		this.mPolyOuts.push(result);
		result.idx = this.mPolyOuts.length - 1;
		return result;
	}
	,disposeOutRec: function(index) {
		var outRec = this.mPolyOuts[index];
		outRec.pts = null;
		outRec = null;
		this.mPolyOuts[index] = null;
	}
	,updateEdgeIntoAEL: function(e) {
		if(e.nextInLML == null) {
			throw new js__$Boot_HaxeError(new hxClipper_ClipperException("UpdateEdgeIntoAEL: invalid call"));
		}
		var aelPrev = e.prevInAEL;
		var aelNext = e.nextInAEL;
		e.nextInLML.outIdx = e.outIdx;
		if(aelPrev != null) {
			aelPrev.nextInAEL = e.nextInLML;
		} else {
			this.mActiveEdges = e.nextInLML;
		}
		if(aelNext != null) {
			aelNext.prevInAEL = e.nextInLML;
		}
		e.nextInLML.side = e.side;
		e.nextInLML.windDelta = e.windDelta;
		e.nextInLML.windCnt = e.windCnt;
		e.nextInLML.windCnt2 = e.windCnt2;
		e = e.nextInLML;
		e.curr.copyFrom(e.bot);
		e.prevInAEL = aelPrev;
		e.nextInAEL = aelNext;
		if(!hxClipper_ClipperBase.isHorizontal(e)) {
			this.insertScanbeam(e.top.y);
		}
		return e;
	}
	,swapPositionsInAEL: function(edge1,edge2) {
		if(edge1.nextInAEL == edge1.prevInAEL || edge2.nextInAEL == edge2.prevInAEL) {
			return;
		}
		if(edge1.nextInAEL == edge2) {
			var next = edge2.nextInAEL;
			if(next != null) {
				next.prevInAEL = edge1;
			}
			var prev = edge1.prevInAEL;
			if(prev != null) {
				prev.nextInAEL = edge2;
			}
			edge2.prevInAEL = prev;
			edge2.nextInAEL = edge1;
			edge1.prevInAEL = edge2;
			edge1.nextInAEL = next;
		} else if(edge2.nextInAEL == edge1) {
			var next1 = edge1.nextInAEL;
			if(next1 != null) {
				next1.prevInAEL = edge2;
			}
			var prev1 = edge2.prevInAEL;
			if(prev1 != null) {
				prev1.nextInAEL = edge1;
			}
			edge1.prevInAEL = prev1;
			edge1.nextInAEL = edge2;
			edge2.prevInAEL = edge1;
			edge2.nextInAEL = next1;
		} else {
			var next2 = edge1.nextInAEL;
			var prev2 = edge1.prevInAEL;
			edge1.nextInAEL = edge2.nextInAEL;
			if(edge1.nextInAEL != null) {
				edge1.nextInAEL.prevInAEL = edge1;
			}
			edge1.prevInAEL = edge2.prevInAEL;
			if(edge1.prevInAEL != null) {
				edge1.prevInAEL.nextInAEL = edge1;
			}
			edge2.nextInAEL = next2;
			if(edge2.nextInAEL != null) {
				edge2.nextInAEL.prevInAEL = edge2;
			}
			edge2.prevInAEL = prev2;
			if(edge2.prevInAEL != null) {
				edge2.prevInAEL.nextInAEL = edge2;
			}
		}
		if(edge1.prevInAEL == null) {
			this.mActiveEdges = edge1;
		} else if(edge2.prevInAEL == null) {
			this.mActiveEdges = edge2;
		}
	}
	,deleteFromAEL: function(e) {
		var aelPrev = e.prevInAEL;
		var aelNext = e.nextInAEL;
		if(aelPrev == null && aelNext == null && e != this.mActiveEdges) {
			return;
		}
		if(aelPrev != null) {
			aelPrev.nextInAEL = aelNext;
		} else {
			this.mActiveEdges = aelNext;
		}
		if(aelNext != null) {
			aelNext.prevInAEL = aelPrev;
		}
		e.nextInAEL = null;
		e.prevInAEL = null;
	}
	,__class__: hxClipper_ClipperBase
};
var hxClipper_Clipper = function(initOptions) {
	if(initOptions == null) {
		initOptions = 0;
	}
	hxClipper_ClipperBase.call(this);
	this.mScanbeam = null;
	this.mMaxima = null;
	this.mActiveEdges = null;
	this.mSortedEdges = null;
	this.mIntersectList = [];
	this.mIntersectNodeComparer = hxClipper_Clipper.compare;
	this.mExecuteLocked = false;
	this.mUsingPolyTree = false;
	this.mPolyOuts = [];
	this.mJoins = [];
	this.mGhostJoins = [];
	this.reverseSolution = (1 & initOptions) != 0;
	this.strictlySimple = (2 & initOptions) != 0;
	this.preserveCollinear = (4 & initOptions) != 0;
};
hxClipper_Clipper.__name__ = "hxClipper.Clipper";
hxClipper_Clipper.compare = function(node1,node2) {
	var i = node2.pt.y - node1.pt.y;
	if(i > 0) {
		return 1;
	} else if(i < 0) {
		return -1;
	} else {
		return 0;
	}
};
hxClipper_Clipper.swapSides = function(edge1,edge2) {
	var side = edge1.side;
	edge1.side = edge2.side;
	edge2.side = side;
};
hxClipper_Clipper.swapPolyIndexes = function(edge1,edge2) {
	var outIdx = edge1.outIdx;
	edge1.outIdx = edge2.outIdx;
	edge2.outIdx = outIdx;
};
hxClipper_Clipper.intersectNodeSort = function(node1,node2) {
	return node2.pt.y - node1.pt.y | 0;
};
hxClipper_Clipper.round = function(value) {
	if(value < 0) {
		return value - 0.5 | 0;
	} else {
		return value + 0.5 | 0;
	}
};
hxClipper_Clipper.topX = function(edge,currentY) {
	if(currentY == edge.top.y) {
		return edge.top.x;
	}
	return edge.bot.x + hxClipper_Clipper.round(edge.dx * (currentY - edge.bot.y));
};
hxClipper_Clipper.reversePaths = function(polys) {
	var _g = 0;
	while(_g < polys.length) {
		var poly = polys[_g];
		++_g;
		poly.reverse();
	}
};
hxClipper_Clipper.orientation = function(poly) {
	return hxClipper_Clipper.area(poly) >= 0;
};
hxClipper_Clipper.pointInPolygon = function(pt,path) {
	var result = 0;
	var cnt = path.length;
	if(cnt < 3) {
		return 0;
	}
	var ip = path[0].clone();
	var ipNext = new hxClipper_IntPoint();
	var _g = 1;
	var _g1 = cnt + 1;
	while(_g < _g1) {
		var i = _g++;
		ipNext.copyFrom(i == cnt ? path[0] : path[i]);
		if(ipNext.y == pt.y) {
			if(ipNext.x == pt.x || ip.y == pt.y && ipNext.x > pt.x == ip.x < pt.x) {
				return -1;
			}
		}
		if(ip.y < pt.y != ipNext.y < pt.y) {
			if(ip.x >= pt.x) {
				if(ipNext.x > pt.x) {
					result = 1 - result;
				} else {
					var dx = ip.x - pt.x;
					var dy = ip.y - pt.y;
					var d = dx * (ipNext.y - pt.y) - (ipNext.x - pt.x) * dy;
					if(d == 0) {
						return -1;
					} else if(d > 0 == ipNext.y > ip.y) {
						result = 1 - result;
					}
				}
			} else if(ipNext.x > pt.x) {
				var dx1 = ip.x - pt.x;
				var dy1 = ip.y - pt.y;
				var d1 = dx1 * (ipNext.y - pt.y) - (ipNext.x - pt.x) * dy1;
				if(d1 == 0) {
					return -1;
				} else if(d1 > 0 == ipNext.y > ip.y) {
					result = 1 - result;
				}
			}
		}
		ip.copyFrom(ipNext);
	}
	return result;
};
hxClipper_Clipper.pointInOutPt = function(pt,op) {
	var result = 0;
	var startOp = op;
	var ptx = pt.x;
	var pty = pt.y;
	var poly0x = op.pt.x;
	var poly0y = op.pt.y;
	while(true) {
		op = op.next;
		var poly1x = op.pt.x;
		var poly1y = op.pt.y;
		if(poly1y == pty) {
			if(poly1x == ptx || poly0y == pty && poly1x > ptx == poly0x < ptx) {
				return -1;
			}
		}
		if(poly0y < pty != poly1y < pty) {
			if(poly0x >= ptx) {
				if(poly1x > ptx) {
					result = 1 - result;
				} else {
					var dx = poly0x - ptx;
					var dy = poly0y - pty;
					var d = dx * (poly1y - pty) - (poly1x - ptx) * dy;
					if(d == 0) {
						return -1;
					}
					if(d > 0 == poly1y > poly0y) {
						result = 1 - result;
					}
				}
			} else if(poly1x > ptx) {
				var dx1 = poly0x - ptx;
				var dy1 = poly0y - pty;
				var d1 = dx1 * (poly1y - pty) - (poly1x - ptx) * dy1;
				if(d1 == 0) {
					return -1;
				}
				if(d1 > 0 == poly1y > poly0y) {
					result = 1 - result;
				}
			}
		}
		poly0x = poly1x;
		poly0y = poly1y;
		if(!(startOp != op)) {
			break;
		}
	}
	return result;
};
hxClipper_Clipper.poly2ContainsPoly1 = function(outPt1,outPt2) {
	var op = outPt1;
	while(true) {
		var res = hxClipper_Clipper.pointInOutPt(op.pt,outPt2);
		if(res >= 0) {
			return res > 0;
		}
		op = op.next;
		if(!(op != outPt1)) {
			break;
		}
	}
	return true;
};
hxClipper_Clipper.parseFirstLeft = function(firstLeft) {
	while(firstLeft != null && firstLeft.pts == null) firstLeft = firstLeft.firstLeft;
	return firstLeft;
};
hxClipper_Clipper.area = function(poly) {
	if(poly == null || poly.length < 3) {
		return 0;
	}
	var cnt = poly.length;
	var a = 0;
	var j = cnt - 1;
	var _g = 0;
	while(_g < cnt) {
		var i = _g++;
		var dx = poly[j].x + poly[i].x;
		var dy = poly[j].y - poly[i].y;
		a += dx * dy;
		j = i;
	}
	return -a * 0.5;
};
hxClipper_Clipper.simplifyPolygon = function(poly,fillType) {
	if(fillType == null) {
		fillType = hxClipper_PolyFillType.PFT_EVEN_ODD;
	}
	var result = [];
	var c = new hxClipper_Clipper();
	c.strictlySimple = true;
	c.addPath(poly,hxClipper_PolyType.PT_SUBJECT,true);
	c.executePaths(hxClipper_ClipType.CT_UNION,result,fillType,fillType);
	return result;
};
hxClipper_Clipper.simplifyPolygons = function(polys,fillType) {
	if(fillType == null) {
		fillType = hxClipper_PolyFillType.PFT_EVEN_ODD;
	}
	var result = [];
	var c = new hxClipper_Clipper();
	c.strictlySimple = true;
	c.addPaths(polys,hxClipper_PolyType.PT_SUBJECT,true);
	c.executePaths(hxClipper_ClipType.CT_UNION,result,fillType,fillType);
	return result;
};
hxClipper_Clipper.distanceSqrd = function(pt1,pt2) {
	var dx = pt1.x - pt2.x;
	var dy = pt1.y - pt2.y;
	return dx * dx + dy * dy;
};
hxClipper_Clipper.distanceFromLineSqrd = function(pt,ln1,ln2) {
	var A = ln1.y - ln2.y;
	var B = ln2.x - ln1.x;
	var C = A * ln1.x + B * ln1.y;
	C = A * pt.x + B * pt.y - C;
	return C * C / (A * A + B * B);
};
hxClipper_Clipper.slopesNearCollinear = function(pt1,pt2,pt3,distSqrd) {
	if(Math.abs(pt1.x - pt2.x) > Math.abs(pt1.y - pt2.y)) {
		if(pt1.x > pt2.x == pt1.x < pt3.x) {
			return hxClipper_Clipper.distanceFromLineSqrd(pt1,pt2,pt3) < distSqrd;
		} else if(pt2.x > pt1.x == pt2.x < pt3.x) {
			return hxClipper_Clipper.distanceFromLineSqrd(pt2,pt1,pt3) < distSqrd;
		} else {
			return hxClipper_Clipper.distanceFromLineSqrd(pt3,pt1,pt2) < distSqrd;
		}
	} else if(pt1.y > pt2.y == pt1.y < pt3.y) {
		return hxClipper_Clipper.distanceFromLineSqrd(pt1,pt2,pt3) < distSqrd;
	} else if(pt2.y > pt1.y == pt2.y < pt3.y) {
		return hxClipper_Clipper.distanceFromLineSqrd(pt2,pt1,pt3) < distSqrd;
	} else {
		return hxClipper_Clipper.distanceFromLineSqrd(pt3,pt1,pt2) < distSqrd;
	}
};
hxClipper_Clipper.pointsAreClose = function(pt1,pt2,distSqrd) {
	var dx = pt1.x - pt2.x;
	var dy = pt1.y - pt2.y;
	return dx * dx + dy * dy <= distSqrd;
};
hxClipper_Clipper.excludeOp = function(op) {
	var result = op.prev;
	result.next = op.next;
	op.next.prev = result;
	result.idx = 0;
	return result;
};
hxClipper_Clipper.cleanPolygon = function(path,distance) {
	if(distance == null) {
		distance = 1.415;
	}
	var cnt = path.length;
	if(cnt == 0) {
		return [];
	}
	var _g = [];
	var _g1 = 0;
	var _g2 = cnt;
	while(_g1 < _g2) {
		++_g1;
		_g.push(new hxClipper__$Clipper_OutPt());
	}
	var _g3 = 0;
	var _g4 = cnt;
	while(_g3 < _g4) {
		var i = _g3++;
		_g[i].pt.copyFrom(path[i]);
		_g[i].next = _g[(i + 1) % cnt];
		_g[i].next.prev = _g[i];
		_g[i].idx = 0;
	}
	var distSqrd = distance * distance;
	var op = _g[0];
	while(op.idx == 0 && op.next != op.prev) if(hxClipper_Clipper.pointsAreClose(op.pt,op.prev.pt,distSqrd)) {
		op = hxClipper_Clipper.excludeOp(op);
		--cnt;
	} else if(hxClipper_Clipper.pointsAreClose(op.prev.pt,op.next.pt,distSqrd)) {
		hxClipper_Clipper.excludeOp(op.next);
		op = hxClipper_Clipper.excludeOp(op);
		cnt -= 2;
	} else if(hxClipper_Clipper.slopesNearCollinear(op.prev.pt,op.pt,op.next.pt,distSqrd)) {
		op = hxClipper_Clipper.excludeOp(op);
		--cnt;
	} else {
		op.idx = 1;
		op = op.next;
	}
	if(cnt < 3) {
		cnt = 0;
	}
	var result = [];
	var _g5 = 0;
	var _g6 = cnt;
	while(_g5 < _g6) {
		++_g5;
		result.push(op.pt);
		op = op.next;
	}
	return result;
};
hxClipper_Clipper.cleanPolygons = function(polys,distance) {
	if(distance == null) {
		distance = 1.415;
	}
	var result = [];
	var _g = 0;
	var _g1 = polys.length;
	while(_g < _g1) {
		var i = _g++;
		result.push(hxClipper_Clipper.cleanPolygon(polys[i],distance));
	}
	return result;
};
hxClipper_Clipper.minkowski = function(pattern,path,isSum,isClosed) {
	var delta = isClosed ? 1 : 0;
	var polyCnt = pattern.length;
	var pathCnt = path.length;
	var result = [];
	if(isSum) {
		var _g = 0;
		while(_g < pathCnt) {
			var i = _g++;
			var p = [];
			var _g1 = 0;
			while(_g1 < pattern.length) {
				var ip = pattern[_g1];
				++_g1;
				p.push(new hxClipper_IntPoint(path[i].x + ip.x,path[i].y + ip.y));
			}
			result.push(p);
		}
	} else {
		var _g2 = 0;
		while(_g2 < pathCnt) {
			var i1 = _g2++;
			var p1 = [];
			var _g3 = 0;
			while(_g3 < pattern.length) {
				var ip1 = pattern[_g3];
				++_g3;
				p1.push(new hxClipper_IntPoint(path[i1].x - ip1.x,path[i1].y - ip1.y));
			}
			result.push(p1);
		}
	}
	var quads = [];
	var _g4 = 0;
	var _g11 = pathCnt - 1 + delta;
	while(_g4 < _g11) {
		var i2 = _g4++;
		var _g5 = 0;
		while(_g5 < polyCnt) {
			var j = _g5++;
			var quad = [];
			quad.push(result[i2 % pathCnt][j % polyCnt]);
			quad.push(result[(i2 + 1) % pathCnt][j % polyCnt]);
			quad.push(result[(i2 + 1) % pathCnt][(j + 1) % polyCnt]);
			quad.push(result[i2 % pathCnt][(j + 1) % polyCnt]);
			if(!hxClipper_Clipper.orientation(quad)) {
				quad.reverse();
			}
			quads.push(quad);
		}
	}
	return quads;
};
hxClipper_Clipper.minkowskiSum = function(pattern,path,pathIsClosed) {
	var paths = hxClipper_Clipper.minkowski(pattern,path,true,pathIsClosed);
	var c = new hxClipper_Clipper();
	c.addPaths(paths,hxClipper_PolyType.PT_SUBJECT,true);
	c.executePaths(hxClipper_ClipType.CT_UNION,paths,hxClipper_PolyFillType.PFT_NON_ZERO,hxClipper_PolyFillType.PFT_NON_ZERO);
	return paths;
};
hxClipper_Clipper.translatePath = function(path,delta) {
	var outPath = [];
	var _g = 0;
	var _g1 = path.length;
	while(_g < _g1) {
		var i = _g++;
		outPath.push(new hxClipper_IntPoint(path[i].x + delta.x,path[i].y + delta.y));
	}
	return outPath;
};
hxClipper_Clipper.minkowskiSumPaths = function(pattern,paths,pathIsClosed) {
	var solution = [];
	var c = new hxClipper_Clipper();
	var _g = 0;
	var _g1 = paths.length;
	while(_g < _g1) {
		var i = _g++;
		var tmp = hxClipper_Clipper.minkowski(pattern,paths[i],true,pathIsClosed);
		c.addPaths(tmp,hxClipper_PolyType.PT_SUBJECT,true);
		if(pathIsClosed) {
			var path = hxClipper_Clipper.translatePath(paths[i],pattern[0]);
			c.addPath(path,hxClipper_PolyType.PT_CLIP,true);
		}
	}
	c.executePaths(hxClipper_ClipType.CT_UNION,solution,hxClipper_PolyFillType.PFT_NON_ZERO,hxClipper_PolyFillType.PFT_NON_ZERO);
	return solution;
};
hxClipper_Clipper.minkowskiDiff = function(poly1,poly2) {
	var paths = hxClipper_Clipper.minkowski(poly1,poly2,false,true);
	var c = new hxClipper_Clipper();
	c.addPaths(paths,hxClipper_PolyType.PT_SUBJECT,true);
	c.executePaths(hxClipper_ClipType.CT_UNION,paths,hxClipper_PolyFillType.PFT_NON_ZERO,hxClipper_PolyFillType.PFT_NON_ZERO);
	return paths;
};
hxClipper_Clipper.polyTreeToPaths = function(polytree) {
	var result = [];
	hxClipper_Clipper.addPolyNodeToPaths(polytree,hxClipper__$Clipper_NodeType.NT_ANY,result);
	return result;
};
hxClipper_Clipper.addPolyNodeToPaths = function(polynode,nt,paths) {
	var match = true;
	switch(nt._hx_index) {
	case 1:
		return;
	case 2:
		match = !polynode.isOpen;
		break;
	default:
	}
	if(polynode.mPolygon.length > 0 && match) {
		paths.push(polynode.mPolygon);
	}
	var _g = 0;
	var _g1 = polynode.get_children();
	while(_g < _g1.length) {
		var pn = _g1[_g];
		++_g;
		hxClipper_Clipper.addPolyNodeToPaths(pn,nt,paths);
	}
};
hxClipper_Clipper.openPathsFromPolyTree = function(polytree) {
	var result = [];
	var _g = 0;
	var _g1 = polytree.get_numChildren();
	while(_g < _g1) {
		var i = _g++;
		if(polytree.get_children()[i].isOpen) {
			result.push(polytree.get_children()[i].mPolygon);
		}
	}
	return result;
};
hxClipper_Clipper.closedPathsFromPolyTree = function(polytree) {
	var result = [];
	hxClipper_Clipper.addPolyNodeToPaths(polytree,hxClipper__$Clipper_NodeType.NT_CLOSED,result);
	return result;
};
hxClipper_Clipper.__super__ = hxClipper_ClipperBase;
hxClipper_Clipper.prototype = $extend(hxClipper_ClipperBase.prototype,{
	mClipType: null
	,mMaxima: null
	,mSortedEdges: null
	,mIntersectList: null
	,mIntersectNodeComparer: null
	,mExecuteLocked: null
	,mClipFillType: null
	,mSubjFillType: null
	,mJoins: null
	,mGhostJoins: null
	,mUsingPolyTree: null
	,insertMaxima: function(x) {
		var newMax = new hxClipper__$Clipper_Maxima();
		newMax.x = x;
		if(this.mMaxima == null) {
			this.mMaxima = newMax;
			this.mMaxima.next = null;
			this.mMaxima.prev = null;
		} else if(x < this.mMaxima.x) {
			newMax.next = this.mMaxima;
			newMax.prev = null;
			this.mMaxima = newMax;
		} else {
			var m = this.mMaxima;
			while(m.next != null && x >= m.next.x) m = m.next;
			if(x == m.x) {
				return;
			}
			newMax.next = m.next;
			newMax.prev = m;
			if(m.next != null) {
				m.next.prev = newMax;
			}
			m.next = newMax;
		}
	}
	,reverseSolution: null
	,strictlySimple: null
	,executePaths: function(clipType,solution,subjFillType,clipFillType) {
		if(this.mExecuteLocked) {
			return false;
		}
		if(this.mHasOpenPaths) {
			throw new js__$Boot_HaxeError(new hxClipper_ClipperException("Error: PolyTree struct is needed for open path clipping."));
		}
		this.mExecuteLocked = true;
		solution.length = 0;
		this.mSubjFillType = subjFillType;
		this.mClipFillType = clipFillType;
		this.mClipType = clipType;
		this.mUsingPolyTree = false;
		var succeeded = false;
		succeeded = this.executeInternal();
		if(succeeded) {
			this.buildResult(solution);
		}
		this.disposeAllPolyPts();
		this.mExecuteLocked = false;
		this.mJoins.length = 0;
		this.mGhostJoins.length = 0;
		return succeeded;
	}
	,executePolyTree: function(clipType,polytree,subjFillType,clipFillType) {
		if(this.mExecuteLocked) {
			return false;
		}
		this.mExecuteLocked = true;
		this.mSubjFillType = subjFillType;
		this.mClipFillType = clipFillType;
		this.mClipType = clipType;
		this.mUsingPolyTree = true;
		var succeeded = false;
		succeeded = this.executeInternal();
		if(succeeded) {
			this.buildResult2(polytree);
		}
		this.disposeAllPolyPts();
		this.mExecuteLocked = false;
		this.mJoins.length = 0;
		this.mGhostJoins.length = 0;
		return succeeded;
	}
	,execute: function(clipType,solution) {
		if(((solution) instanceof Array) && solution.__enum__ == null) {
			return this.executePaths(clipType,solution,hxClipper_PolyFillType.PFT_EVEN_ODD,hxClipper_PolyFillType.PFT_EVEN_ODD);
		} else if(((solution) instanceof hxClipper_PolyTree)) {
			return this.executePolyTree(clipType,solution,hxClipper_PolyFillType.PFT_EVEN_ODD,hxClipper_PolyFillType.PFT_EVEN_ODD);
		} else {
			throw new js__$Boot_HaxeError(new hxClipper_ClipperException("`solution` must be either a Paths or a PolyTree"));
		}
	}
	,fixHoleLinkage: function(outRec) {
		if(outRec.firstLeft == null || outRec.isHole != outRec.firstLeft.isHole && outRec.firstLeft.pts != null) {
			return;
		}
		var orfl = outRec.firstLeft;
		while(orfl != null && (orfl.isHole == outRec.isHole || orfl.pts == null)) orfl = orfl.firstLeft;
		outRec.firstLeft = orfl;
	}
	,executeInternal: function() {
		this.reset();
		this.mSortedEdges = null;
		this.mMaxima = null;
		var topY;
		var popRes = this.popScanbeam();
		var botY = popRes.y;
		if(!popRes.popped) {
			return false;
		}
		this.insertLocalMinimaIntoAEL(botY);
		while(true) {
			popRes = this.popScanbeam();
			topY = popRes.y;
			if(popRes.popped || this.localMinimaPending()) {
				this.processHorizontals();
				this.mGhostJoins.length = 0;
				if(!this.processIntersections(topY)) {
					return false;
				}
				this.processEdgesAtTopOfScanbeam(topY);
				botY = topY;
				this.insertLocalMinimaIntoAEL(topY);
			} else {
				break;
			}
		}
		var _g = 0;
		var _g1 = this.mPolyOuts.length;
		while(_g < _g1) {
			var i = _g++;
			var outRec = this.mPolyOuts[i];
			if(outRec.pts == null || outRec.isOpen) {
				continue;
			}
			var a = outRec.isHole;
			var b = this.reverseSolution;
			if((a && !b || b && !a) == this.areaOfOutRec(outRec) > 0) {
				this.reversePolyPtLinks(outRec.pts);
			}
		}
		this.joinCommonEdges();
		var _g2 = 0;
		var _g3 = this.mPolyOuts.length;
		while(_g2 < _g3) {
			var i1 = _g2++;
			var outRec1 = this.mPolyOuts[i1];
			if(outRec1.pts == null) {
				continue;
			} else if(outRec1.isOpen) {
				this.fixupOutPolyLine(outRec1);
			} else {
				this.fixupOutPolygon(outRec1);
			}
		}
		if(this.strictlySimple) {
			this.doSimplePolygons();
		}
		return true;
	}
	,disposeAllPolyPts: function() {
		var _g = 0;
		var _g1 = this.mPolyOuts.length;
		while(_g < _g1) {
			var i = _g++;
			this.disposeOutRec(i);
		}
		this.mPolyOuts.length = 0;
	}
	,addJoin: function(op1,op2,offPt) {
		var j = new hxClipper__$Clipper_Join();
		j.outPt1 = op1;
		j.outPt2 = op2;
		j.offPt.copyFrom(offPt);
		this.mJoins.push(j);
	}
	,addGhostJoin: function(op,offPt) {
		var j = new hxClipper__$Clipper_Join();
		j.outPt1 = op;
		j.offPt.copyFrom(offPt);
		this.mGhostJoins.push(j);
	}
	,insertLocalMinimaIntoAEL: function(botY) {
		var current = { lm : null};
		while(this.popLocalMinima(botY,current)) {
			var lm = current.lm;
			var lb = lm.leftBound;
			var rb = lm.rightBound;
			var op1 = null;
			if(lb == null) {
				this.insertEdgeIntoAEL(rb,null);
				this.setWindingCount(rb);
				if(this.isContributing(rb)) {
					op1 = this.addOutPt(rb,rb.bot);
				}
			} else if(rb == null) {
				this.insertEdgeIntoAEL(lb,null);
				this.setWindingCount(lb);
				if(this.isContributing(lb)) {
					op1 = this.addOutPt(lb,lb.bot);
				}
				this.insertScanbeam(lb.top.y);
			} else {
				this.insertEdgeIntoAEL(lb,null);
				this.insertEdgeIntoAEL(rb,lb);
				this.setWindingCount(lb);
				rb.windCnt = lb.windCnt;
				rb.windCnt2 = lb.windCnt2;
				if(this.isContributing(lb)) {
					op1 = this.addLocalMinPoly(lb,rb,lb.bot);
				}
				this.insertScanbeam(lb.top.y);
			}
			if(rb != null) {
				if(hxClipper_ClipperBase.isHorizontal(rb)) {
					if(rb.nextInLML != null) {
						this.insertScanbeam(rb.nextInLML.top.y);
					}
					this.addEdgeToSEL(rb);
				} else {
					this.insertScanbeam(rb.top.y);
				}
			}
			if(lb == null || rb == null) {
				continue;
			}
			if(op1 != null && hxClipper_ClipperBase.isHorizontal(rb) && this.mGhostJoins.length > 0 && rb.windDelta != 0) {
				var _g = 0;
				var _g1 = this.mGhostJoins.length;
				while(_g < _g1) {
					var i = _g++;
					var j = this.mGhostJoins[i];
					if(this.horzSegmentsOverlap(j.outPt1.pt.x,j.offPt.x,rb.bot.x,rb.top.x)) {
						this.addJoin(j.outPt1,op1,j.offPt);
					}
				}
			}
			if(lb.outIdx >= 0 && lb.prevInAEL != null && lb.prevInAEL.curr.x == lb.bot.x && lb.prevInAEL.outIdx >= 0 && hxClipper_ClipperBase.slopesEqual4(lb.prevInAEL.curr,lb.prevInAEL.top,lb.curr,lb.top,this.mUseFullRange) && lb.windDelta != 0 && lb.prevInAEL.windDelta != 0) {
				var op2 = this.addOutPt(lb.prevInAEL,lb.bot);
				this.addJoin(op1,op2,lb.top);
			}
			if(lb.nextInAEL != rb) {
				if(rb.outIdx >= 0 && rb.prevInAEL.outIdx >= 0 && hxClipper_ClipperBase.slopesEqual4(rb.prevInAEL.curr,rb.prevInAEL.top,rb.curr,rb.top,this.mUseFullRange) && rb.windDelta != 0 && rb.prevInAEL.windDelta != 0) {
					var op21 = this.addOutPt(rb.prevInAEL,rb.bot);
					this.addJoin(op1,op21,rb.top);
				}
				var e = lb.nextInAEL;
				if(e != null) {
					while(e != rb) {
						this.intersectEdges(rb,e,lb.curr);
						e = e.nextInAEL;
					}
				}
			}
		}
	}
	,insertEdgeIntoAEL: function(edge,startEdge) {
		if(this.mActiveEdges == null) {
			edge.prevInAEL = null;
			edge.nextInAEL = null;
			this.mActiveEdges = edge;
		} else if(startEdge == null && this.e2InsertsBeforeE1(this.mActiveEdges,edge)) {
			edge.prevInAEL = null;
			edge.nextInAEL = this.mActiveEdges;
			this.mActiveEdges.prevInAEL = edge;
			this.mActiveEdges = edge;
		} else {
			if(startEdge == null) {
				startEdge = this.mActiveEdges;
			}
			while(startEdge.nextInAEL != null && !this.e2InsertsBeforeE1(startEdge.nextInAEL,edge)) startEdge = startEdge.nextInAEL;
			edge.nextInAEL = startEdge.nextInAEL;
			if(startEdge.nextInAEL != null) {
				startEdge.nextInAEL.prevInAEL = edge;
			}
			edge.prevInAEL = startEdge;
			startEdge.nextInAEL = edge;
		}
	}
	,e2InsertsBeforeE1: function(e1,e2) {
		if(e2.curr.x == e1.curr.x) {
			if(e2.top.y > e1.top.y) {
				return e2.top.x < hxClipper_Clipper.topX(e1,e2.top.y);
			} else {
				return e1.top.x > hxClipper_Clipper.topX(e2,e1.top.y);
			}
		} else {
			return e2.curr.x < e1.curr.x;
		}
	}
	,isEvenOddFillType: function(edge) {
		if(edge.polyType == hxClipper_PolyType.PT_SUBJECT) {
			return this.mSubjFillType == hxClipper_PolyFillType.PFT_EVEN_ODD;
		} else {
			return this.mClipFillType == hxClipper_PolyFillType.PFT_EVEN_ODD;
		}
	}
	,isEvenOddAltFillType: function(edge) {
		if(edge.polyType == hxClipper_PolyType.PT_SUBJECT) {
			return this.mClipFillType == hxClipper_PolyFillType.PFT_EVEN_ODD;
		} else {
			return this.mSubjFillType == hxClipper_PolyFillType.PFT_EVEN_ODD;
		}
	}
	,isContributing: function(edge) {
		var pft;
		var pft2;
		if(edge.polyType == hxClipper_PolyType.PT_SUBJECT) {
			pft = this.mSubjFillType;
			pft2 = this.mClipFillType;
		} else {
			pft = this.mClipFillType;
			pft2 = this.mSubjFillType;
		}
		switch(pft._hx_index) {
		case 0:
			if(edge.windDelta == 0 && edge.windCnt != 1) {
				return false;
			}
			break;
		case 1:
			if(Math.abs(edge.windCnt) != 1) {
				return false;
			}
			break;
		case 2:
			if(edge.windCnt != 1) {
				return false;
			}
			break;
		default:
			if(edge.windCnt != -1) {
				return false;
			}
		}
		switch(this.mClipType._hx_index) {
		case 0:
			switch(pft2._hx_index) {
			case 0:case 1:
				return edge.windCnt2 != 0;
			case 2:
				return edge.windCnt2 > 0;
			default:
				return edge.windCnt2 < 0;
			}
			break;
		case 1:
			switch(pft2._hx_index) {
			case 0:case 1:
				return edge.windCnt2 == 0;
			case 2:
				return edge.windCnt2 <= 0;
			default:
				return edge.windCnt2 >= 0;
			}
			break;
		case 2:
			if(edge.polyType == hxClipper_PolyType.PT_SUBJECT) {
				switch(pft2._hx_index) {
				case 0:case 1:
					return edge.windCnt2 == 0;
				case 2:
					return edge.windCnt2 <= 0;
				default:
					return edge.windCnt2 >= 0;
				}
			} else {
				switch(pft2._hx_index) {
				case 0:case 1:
					return edge.windCnt2 != 0;
				case 2:
					return edge.windCnt2 > 0;
				default:
					return edge.windCnt2 < 0;
				}
			}
			break;
		case 3:
			if(edge.windDelta == 0) {
				switch(pft2._hx_index) {
				case 0:case 1:
					return edge.windCnt2 == 0;
				case 2:
					return edge.windCnt2 <= 0;
				default:
					return edge.windCnt2 >= 0;
				}
			} else {
				return true;
			}
			break;
		}
	}
	,setWindingCount: function(edge) {
		var e = edge.prevInAEL;
		while(e != null && (e.polyType != edge.polyType || e.windDelta == 0)) e = e.prevInAEL;
		if(e == null) {
			var pft = edge.polyType == hxClipper_PolyType.PT_SUBJECT ? this.mSubjFillType : this.mClipFillType;
			if(edge.windDelta == 0) {
				edge.windCnt = pft == hxClipper_PolyFillType.PFT_NEGATIVE ? -1 : 1;
			} else {
				edge.windCnt = edge.windDelta;
			}
			edge.windCnt2 = 0;
			e = this.mActiveEdges;
		} else if(edge.windDelta == 0 && this.mClipType != hxClipper_ClipType.CT_UNION) {
			edge.windCnt = 1;
			edge.windCnt2 = e.windCnt2;
			e = e.nextInAEL;
		} else if(this.isEvenOddFillType(edge)) {
			if(edge.windDelta == 0) {
				var inside = true;
				var e2 = e.prevInAEL;
				while(e2 != null) {
					if(e2.polyType == e.polyType && e2.windDelta != 0) {
						inside = !inside;
					}
					e2 = e2.prevInAEL;
				}
				edge.windCnt = inside ? 0 : 1;
			} else {
				edge.windCnt = edge.windDelta;
			}
			edge.windCnt2 = e.windCnt2;
			e = e.nextInAEL;
		} else {
			if(e.windCnt * e.windDelta < 0) {
				if(Math.abs(e.windCnt) > 1) {
					if(e.windDelta * edge.windDelta < 0) {
						edge.windCnt = e.windCnt;
					} else {
						edge.windCnt = e.windCnt + edge.windDelta;
					}
				} else {
					edge.windCnt = edge.windDelta == 0 ? 1 : edge.windDelta;
				}
			} else if(edge.windDelta == 0) {
				edge.windCnt = e.windCnt < 0 ? e.windCnt - 1 : e.windCnt + 1;
			} else if(e.windDelta * edge.windDelta < 0) {
				edge.windCnt = e.windCnt;
			} else {
				edge.windCnt = e.windCnt + edge.windDelta;
			}
			edge.windCnt2 = e.windCnt2;
			e = e.nextInAEL;
		}
		if(this.isEvenOddAltFillType(edge)) {
			while(e != edge) {
				if(e.windDelta != 0) {
					edge.windCnt2 = edge.windCnt2 == 0 ? 1 : 0;
				}
				e = e.nextInAEL;
			}
		} else {
			while(e != edge) {
				edge.windCnt2 += e.windDelta;
				e = e.nextInAEL;
			}
		}
	}
	,addEdgeToSEL: function(edge) {
		if(this.mSortedEdges == null) {
			this.mSortedEdges = edge;
			edge.prevInSEL = null;
			edge.nextInSEL = null;
		} else {
			edge.nextInSEL = this.mSortedEdges;
			edge.prevInSEL = null;
			this.mSortedEdges.prevInSEL = edge;
			this.mSortedEdges = edge;
		}
	}
	,popEdgeFromSEL: function() {
		var res = { popped : false, edge : null};
		res.edge = this.mSortedEdges;
		if(res.edge == null) {
			return res;
		}
		var oldE = res.edge;
		this.mSortedEdges = res.edge.nextInSEL;
		if(this.mSortedEdges != null) {
			this.mSortedEdges.prevInSEL = null;
		}
		oldE.nextInSEL = null;
		oldE.prevInSEL = null;
		res.popped = true;
		return res;
	}
	,copyAELToSEL: function() {
		var e = this.mActiveEdges;
		this.mSortedEdges = e;
		while(e != null) {
			e.prevInSEL = e.prevInAEL;
			e.nextInSEL = e.nextInAEL;
			e = e.nextInAEL;
		}
	}
	,swapPositionsInSEL: function(edge1,edge2) {
		if(edge1.nextInSEL == null && edge1.prevInSEL == null) {
			return;
		}
		if(edge2.nextInSEL == null && edge2.prevInSEL == null) {
			return;
		}
		if(edge1.nextInSEL == edge2) {
			var next = edge2.nextInSEL;
			if(next != null) {
				next.prevInSEL = edge1;
			}
			var prev = edge1.prevInSEL;
			if(prev != null) {
				prev.nextInSEL = edge2;
			}
			edge2.prevInSEL = prev;
			edge2.nextInSEL = edge1;
			edge1.prevInSEL = edge2;
			edge1.nextInSEL = next;
		} else if(edge2.nextInSEL == edge1) {
			var next1 = edge1.nextInSEL;
			if(next1 != null) {
				next1.prevInSEL = edge2;
			}
			var prev1 = edge2.prevInSEL;
			if(prev1 != null) {
				prev1.nextInSEL = edge1;
			}
			edge1.prevInSEL = prev1;
			edge1.nextInSEL = edge2;
			edge2.prevInSEL = edge1;
			edge2.nextInSEL = next1;
		} else {
			var next2 = edge1.nextInSEL;
			var prev2 = edge1.prevInSEL;
			edge1.nextInSEL = edge2.nextInSEL;
			if(edge1.nextInSEL != null) {
				edge1.nextInSEL.prevInSEL = edge1;
			}
			edge1.prevInSEL = edge2.prevInSEL;
			if(edge1.prevInSEL != null) {
				edge1.prevInSEL.nextInSEL = edge1;
			}
			edge2.nextInSEL = next2;
			if(edge2.nextInSEL != null) {
				edge2.nextInSEL.prevInSEL = edge2;
			}
			edge2.prevInSEL = prev2;
			if(edge2.prevInSEL != null) {
				edge2.prevInSEL.nextInSEL = edge2;
			}
		}
		if(edge1.prevInSEL == null) {
			this.mSortedEdges = edge1;
		} else if(edge2.prevInSEL == null) {
			this.mSortedEdges = edge2;
		}
	}
	,addLocalMaxPoly: function(e1,e2,pt) {
		this.addOutPt(e1,pt);
		if(e2.windDelta == 0) {
			this.addOutPt(e2,pt);
		}
		if(e1.outIdx == e2.outIdx) {
			e1.outIdx = -1;
			e2.outIdx = -1;
		} else if(e1.outIdx < e2.outIdx) {
			this.appendPolygon(e1,e2);
		} else {
			this.appendPolygon(e2,e1);
		}
	}
	,addLocalMinPoly: function(e1,e2,pt) {
		var result = null;
		var e;
		var prevE;
		if(hxClipper_ClipperBase.isHorizontal(e2) || e1.dx > e2.dx) {
			result = this.addOutPt(e1,pt);
			e2.outIdx = e1.outIdx;
			e1.side = hxClipper__$Clipper_EdgeSide.ES_LEFT;
			e2.side = hxClipper__$Clipper_EdgeSide.ES_RIGHT;
			e = e1;
			if(e1.prevInAEL == e2) {
				prevE = e2.prevInAEL;
			} else {
				prevE = e1.prevInAEL;
			}
		} else {
			result = this.addOutPt(e2,pt);
			e1.outIdx = e2.outIdx;
			e1.side = hxClipper__$Clipper_EdgeSide.ES_RIGHT;
			e2.side = hxClipper__$Clipper_EdgeSide.ES_LEFT;
			e = e2;
			if(e2.prevInAEL == e1) {
				prevE = e1.prevInAEL;
			} else {
				prevE = e2.prevInAEL;
			}
		}
		if(prevE != null && prevE.outIdx >= 0) {
			var xPrev = hxClipper_Clipper.topX(prevE,pt.y);
			var xE = hxClipper_Clipper.topX(e,pt.y);
			if(xPrev == xE && e.windDelta != 0 && prevE.windDelta != 0 && hxClipper_ClipperBase.slopesEqual4(new hxClipper_IntPoint(xPrev,pt.y),prevE.top,new hxClipper_IntPoint(xE,pt.y),e.top,this.mUseFullRange)) {
				var outPt = this.addOutPt(prevE,pt);
				this.addJoin(result,outPt,e.top);
			}
		}
		return result;
	}
	,addOutPt: function(e,pt) {
		if(e.outIdx < 0) {
			var outRec = this.createOutRec();
			outRec.isOpen = e.windDelta == 0;
			var newOp = new hxClipper__$Clipper_OutPt();
			outRec.pts = newOp;
			newOp.idx = outRec.idx;
			newOp.pt.copyFrom(pt);
			newOp.next = newOp;
			newOp.prev = newOp;
			if(!outRec.isOpen) {
				this.setHoleState(e,outRec);
			}
			e.outIdx = outRec.idx;
			return newOp;
		} else {
			var outRec1 = this.mPolyOuts[e.outIdx];
			var op = outRec1.pts;
			var toFront = e.side == hxClipper__$Clipper_EdgeSide.ES_LEFT;
			if(toFront && pt.equals(op.pt)) {
				return op;
			} else if(!toFront && pt.equals(op.prev.pt)) {
				return op.prev;
			}
			var newOp1 = new hxClipper__$Clipper_OutPt();
			newOp1.idx = outRec1.idx;
			newOp1.pt.copyFrom(pt);
			newOp1.next = op;
			newOp1.prev = op.prev;
			newOp1.prev.next = newOp1;
			op.prev = newOp1;
			if(toFront) {
				outRec1.pts = newOp1;
			}
			return newOp1;
		}
	}
	,getLastOutPt: function(e) {
		var outRec = this.mPolyOuts[e.outIdx];
		if(e.side == hxClipper__$Clipper_EdgeSide.ES_LEFT) {
			return outRec.pts;
		} else {
			return outRec.pts.prev;
		}
	}
	,swapPoints: function(pt1,pt2) {
		var tmp = pt1.clone();
		pt1.copyFrom(pt2);
		pt2.copyFrom(tmp);
	}
	,horzSegmentsOverlap: function(seg1a,seg1b,seg2a,seg2b) {
		if(seg1a > seg1b) {
			var tmp = seg1a;
			seg1a = seg1b;
			seg1b = tmp;
		}
		if(seg2a > seg2b) {
			var tmp1 = seg2a;
			seg2a = seg2b;
			seg2b = tmp1;
		}
		if(seg1a < seg2b) {
			return seg2a < seg1b;
		} else {
			return false;
		}
	}
	,setHoleState: function(e,outRec) {
		var e2 = e.prevInAEL;
		var eTmp = null;
		while(e2 != null) {
			if(e2.outIdx >= 0 && e2.windDelta != 0) {
				if(eTmp == null) {
					eTmp = e2;
				} else if(eTmp.outIdx == e2.outIdx) {
					eTmp = null;
				}
			}
			e2 = e2.prevInAEL;
		}
		if(eTmp == null) {
			outRec.firstLeft = null;
			outRec.isHole = false;
		} else {
			outRec.firstLeft = this.mPolyOuts[eTmp.outIdx];
			outRec.isHole = !outRec.firstLeft.isHole;
		}
	}
	,getDx: function(pt1,pt2) {
		if(pt1.y == pt2.y) {
			return -3.4E+38;
		} else {
			var dx = pt2.x - pt1.x;
			var dy = pt2.y - pt1.y;
			return dx / dy;
		}
	}
	,firstIsBottomPt: function(btmPt1,btmPt2) {
		var p = btmPt1.prev;
		while(p.pt.equals(btmPt1.pt) && p != btmPt1) p = p.prev;
		var dx1p = Math.abs(this.getDx(btmPt1.pt,p.pt));
		p = btmPt1.next;
		while(p.pt.equals(btmPt1.pt) && p != btmPt1) p = p.next;
		var dx1n = Math.abs(this.getDx(btmPt1.pt,p.pt));
		p = btmPt2.prev;
		while(p.pt.equals(btmPt2.pt) && p != btmPt2) p = p.prev;
		var dx2p = Math.abs(this.getDx(btmPt2.pt,p.pt));
		p = btmPt2.next;
		while(p.pt.equals(btmPt2.pt) && p != btmPt2) p = p.next;
		var dx2n = Math.abs(this.getDx(btmPt2.pt,p.pt));
		if(Math.max(dx1p,dx1n) == Math.max(dx2p,dx2n) && Math.min(dx1p,dx1n) == Math.min(dx2p,dx2n)) {
			return this.areaOfOutPt(btmPt1) > 0;
		} else if(!(dx1p >= dx2p && dx1p >= dx2n)) {
			if(dx1n >= dx2p) {
				return dx1n >= dx2n;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,getBottomPt: function(pp) {
		var dups = null;
		var p = pp.next;
		while(p != pp) {
			if(p.pt.y > pp.pt.y) {
				pp = p;
				dups = null;
			} else if(p.pt.y == pp.pt.y && p.pt.x <= pp.pt.x) {
				if(p.pt.x < pp.pt.x) {
					dups = null;
					pp = p;
				} else if(p.next != pp && p.prev != pp) {
					dups = p;
				}
			}
			p = p.next;
		}
		if(dups != null) {
			while(dups != p) {
				if(!this.firstIsBottomPt(p,dups)) {
					pp = dups;
				}
				dups = dups.next;
				while(!dups.pt.equals(pp.pt)) dups = dups.next;
			}
		}
		return pp;
	}
	,getLowermostRec: function(outRec1,outRec2) {
		if(outRec1.bottomPt == null) {
			outRec1.bottomPt = this.getBottomPt(outRec1.pts);
		}
		if(outRec2.bottomPt == null) {
			outRec2.bottomPt = this.getBottomPt(outRec2.pts);
		}
		var bPt1 = outRec1.bottomPt;
		var bPt2 = outRec2.bottomPt;
		if(bPt1.pt.y > bPt2.pt.y) {
			return outRec1;
		} else if(bPt1.pt.y < bPt2.pt.y) {
			return outRec2;
		} else if(bPt1.pt.x < bPt2.pt.x) {
			return outRec1;
		} else if(bPt1.pt.x > bPt2.pt.x) {
			return outRec2;
		} else if(bPt1.next == bPt1) {
			return outRec2;
		} else if(bPt2.next == bPt2) {
			return outRec1;
		} else if(this.firstIsBottomPt(bPt1,bPt2)) {
			return outRec1;
		} else {
			return outRec2;
		}
	}
	,outRec1RightOfOutRec2: function(outRec1,outRec2) {
		while(true) {
			outRec1 = outRec1.firstLeft;
			if(outRec1 == outRec2) {
				return true;
			}
			if(!(outRec1 != null)) {
				break;
			}
		}
		return false;
	}
	,getOutRec: function(idx) {
		var outrec = this.mPolyOuts[idx];
		while(outrec != this.mPolyOuts[outrec.idx]) outrec = this.mPolyOuts[outrec.idx];
		return outrec;
	}
	,appendPolygon: function(e1,e2) {
		var outRec1 = this.mPolyOuts[e1.outIdx];
		var outRec2 = this.mPolyOuts[e2.outIdx];
		var holeStateRec;
		if(this.outRec1RightOfOutRec2(outRec1,outRec2)) {
			holeStateRec = outRec2;
		} else if(this.outRec1RightOfOutRec2(outRec2,outRec1)) {
			holeStateRec = outRec1;
		} else {
			holeStateRec = this.getLowermostRec(outRec1,outRec2);
		}
		var p1_lft = outRec1.pts;
		var p1_rt = p1_lft.prev;
		var p2_lft = outRec2.pts;
		var p2_rt = p2_lft.prev;
		if(e1.side == hxClipper__$Clipper_EdgeSide.ES_LEFT) {
			if(e2.side == hxClipper__$Clipper_EdgeSide.ES_LEFT) {
				this.reversePolyPtLinks(p2_lft);
				p2_lft.next = p1_lft;
				p1_lft.prev = p2_lft;
				p1_rt.next = p2_rt;
				p2_rt.prev = p1_rt;
				outRec1.pts = p2_rt;
			} else {
				p2_rt.next = p1_lft;
				p1_lft.prev = p2_rt;
				p2_lft.prev = p1_rt;
				p1_rt.next = p2_lft;
				outRec1.pts = p2_lft;
			}
		} else if(e2.side == hxClipper__$Clipper_EdgeSide.ES_RIGHT) {
			this.reversePolyPtLinks(p2_lft);
			p1_rt.next = p2_rt;
			p2_rt.prev = p1_rt;
			p2_lft.next = p1_lft;
			p1_lft.prev = p2_lft;
		} else {
			p1_rt.next = p2_lft;
			p2_lft.prev = p1_rt;
			p1_lft.prev = p2_rt;
			p2_rt.next = p1_lft;
		}
		outRec1.bottomPt = null;
		if(holeStateRec == outRec2) {
			if(outRec2.firstLeft != outRec1) {
				outRec1.firstLeft = outRec2.firstLeft;
			}
			outRec1.isHole = outRec2.isHole;
		}
		outRec2.pts = null;
		outRec2.bottomPt = null;
		outRec2.firstLeft = outRec1;
		var OKIdx = e1.outIdx;
		var ObsoleteIdx = e2.outIdx;
		e1.outIdx = -1;
		e2.outIdx = -1;
		var e = this.mActiveEdges;
		while(e != null) {
			if(e.outIdx == ObsoleteIdx) {
				e.outIdx = OKIdx;
				e.side = e1.side;
				break;
			}
			e = e.nextInAEL;
		}
		outRec2.idx = outRec1.idx;
	}
	,reversePolyPtLinks: function(pp) {
		if(pp == null) {
			return;
		}
		var pp2;
		var pp1 = pp;
		while(true) {
			pp2 = pp1.next;
			pp1.next = pp1.prev;
			pp1.prev = pp2;
			pp1 = pp2;
			if(!(pp2 != pp)) {
				break;
			}
		}
	}
	,intersectEdges: function(e1,e2,pt) {
		var e1Contributing = e1.outIdx >= 0;
		var e2Contributing = e2.outIdx >= 0;
		if(e1.polyType == e2.polyType) {
			if(this.isEvenOddFillType(e1)) {
				var oldE1WindCnt = e1.windCnt;
				e1.windCnt = e2.windCnt;
				e2.windCnt = oldE1WindCnt;
			} else {
				if(e1.windCnt + e2.windDelta == 0) {
					e1.windCnt = -e1.windCnt;
				} else {
					e1.windCnt += e2.windDelta;
				}
				if(e2.windCnt - e1.windDelta == 0) {
					e2.windCnt = -e2.windCnt;
				} else {
					e2.windCnt -= e1.windDelta;
				}
			}
		} else {
			if(!this.isEvenOddFillType(e2)) {
				e1.windCnt2 += e2.windDelta;
			} else {
				e1.windCnt2 = e1.windCnt2 == 0 ? 1 : 0;
			}
			if(!this.isEvenOddFillType(e1)) {
				e2.windCnt2 -= e1.windDelta;
			} else {
				e2.windCnt2 = e2.windCnt2 == 0 ? 1 : 0;
			}
		}
		var e1FillType;
		var e2FillType;
		var e1FillType2;
		var e2FillType2;
		if(e1.polyType == hxClipper_PolyType.PT_SUBJECT) {
			e1FillType = this.mSubjFillType;
			e1FillType2 = this.mClipFillType;
		} else {
			e1FillType = this.mClipFillType;
			e1FillType2 = this.mSubjFillType;
		}
		if(e2.polyType == hxClipper_PolyType.PT_SUBJECT) {
			e2FillType = this.mSubjFillType;
			e2FillType2 = this.mClipFillType;
		} else {
			e2FillType = this.mClipFillType;
			e2FillType2 = this.mSubjFillType;
		}
		var e1Wc;
		var e2Wc;
		switch(e1FillType._hx_index) {
		case 2:
			e1Wc = e1.windCnt;
			break;
		case 3:
			e1Wc = -e1.windCnt;
			break;
		default:
			e1Wc = Math.abs(e1.windCnt) | 0;
		}
		switch(e2FillType._hx_index) {
		case 2:
			e2Wc = e2.windCnt;
			break;
		case 3:
			e2Wc = -e2.windCnt;
			break;
		default:
			e2Wc = Math.abs(e2.windCnt) | 0;
		}
		if(e1Contributing && e2Contributing) {
			if(e1Wc != 0 && e1Wc != 1 || e2Wc != 0 && e2Wc != 1 || e1.polyType != e2.polyType && this.mClipType != hxClipper_ClipType.CT_XOR) {
				this.addLocalMaxPoly(e1,e2,pt);
			} else {
				this.addOutPt(e1,pt);
				this.addOutPt(e2,pt);
				hxClipper_Clipper.swapSides(e1,e2);
				hxClipper_Clipper.swapPolyIndexes(e1,e2);
			}
		} else if(e1Contributing) {
			if(e2Wc == 0 || e2Wc == 1) {
				this.addOutPt(e1,pt);
				hxClipper_Clipper.swapSides(e1,e2);
				hxClipper_Clipper.swapPolyIndexes(e1,e2);
			}
		} else if(e2Contributing) {
			if(e1Wc == 0 || e1Wc == 1) {
				this.addOutPt(e2,pt);
				hxClipper_Clipper.swapSides(e1,e2);
				hxClipper_Clipper.swapPolyIndexes(e1,e2);
			}
		} else if((e1Wc == 0 || e1Wc == 1) && (e2Wc == 0 || e2Wc == 1)) {
			var e1Wc2;
			var e2Wc2;
			switch(e1FillType2._hx_index) {
			case 2:
				e1Wc2 = e1.windCnt2;
				break;
			case 3:
				e1Wc2 = -e1.windCnt2;
				break;
			default:
				e1Wc2 = Math.abs(e1.windCnt2) | 0;
			}
			switch(e2FillType2._hx_index) {
			case 2:
				e2Wc2 = e2.windCnt2;
				break;
			case 3:
				e2Wc2 = -e2.windCnt2;
				break;
			default:
				e2Wc2 = Math.abs(e2.windCnt2) | 0;
			}
			if(e1.polyType != e2.polyType) {
				this.addLocalMinPoly(e1,e2,pt);
			} else if(e1Wc == 1 && e2Wc == 1) {
				switch(this.mClipType._hx_index) {
				case 0:
					if(e1Wc2 > 0 && e2Wc2 > 0) {
						this.addLocalMinPoly(e1,e2,pt);
					}
					break;
				case 1:
					if(e1Wc2 <= 0 && e2Wc2 <= 0) {
						this.addLocalMinPoly(e1,e2,pt);
					}
					break;
				case 2:
					if(e1.polyType == hxClipper_PolyType.PT_CLIP && e1Wc2 > 0 && e2Wc2 > 0 || e1.polyType == hxClipper_PolyType.PT_SUBJECT && e1Wc2 <= 0 && e2Wc2 <= 0) {
						this.addLocalMinPoly(e1,e2,pt);
					}
					break;
				case 3:
					this.addLocalMinPoly(e1,e2,pt);
					break;
				}
			} else {
				hxClipper_Clipper.swapSides(e1,e2);
			}
		}
	}
	,deleteFromSEL: function(e) {
		var selPrev = e.prevInSEL;
		var selNext = e.nextInSEL;
		if(selPrev == null && selNext == null && e != this.mSortedEdges) {
			return;
		}
		if(selPrev != null) {
			selPrev.nextInSEL = selNext;
		} else {
			this.mSortedEdges = selNext;
		}
		if(selNext != null) {
			selNext.prevInSEL = selPrev;
		}
		e.nextInSEL = null;
		e.prevInSEL = null;
	}
	,processHorizontals: function() {
		var horzEdge = null;
		while(true) {
			var popRes = this.popEdgeFromSEL();
			horzEdge = popRes.edge;
			if(popRes.popped) {
				this.processHorizontal(horzEdge);
			} else {
				break;
			}
		}
	}
	,getHorzDirection: function(horzEdge,outParams) {
		if(horzEdge.bot.x < horzEdge.top.x) {
			outParams.left = horzEdge.bot.x;
			outParams.right = horzEdge.top.x;
			outParams.dir = hxClipper__$Clipper_Direction.D_LEFT_TO_RIGHT;
		} else {
			outParams.left = horzEdge.top.x;
			outParams.right = horzEdge.bot.x;
			outParams.dir = hxClipper__$Clipper_Direction.D_RIGHT_TO_LEFT;
		}
	}
	,processHorizontal: function(horzEdge) {
		var dir = null;
		var horzLeft = 0;
		var horzRight = 0;
		var isOpen = horzEdge.windDelta == 0;
		var outParams = { dir : dir, left : 0, right : 0};
		this.getHorzDirection(horzEdge,outParams);
		dir = outParams.dir;
		horzLeft = outParams.left;
		horzRight = outParams.right;
		var eLastHorz = horzEdge;
		var eMaxPair = null;
		while(eLastHorz.nextInLML != null && hxClipper_ClipperBase.isHorizontal(eLastHorz.nextInLML)) eLastHorz = eLastHorz.nextInLML;
		if(eLastHorz.nextInLML == null) {
			eMaxPair = this.getMaximaPair(eLastHorz);
		}
		var currMax = this.mMaxima;
		if(currMax != null) {
			if(dir == hxClipper__$Clipper_Direction.D_LEFT_TO_RIGHT) {
				while(currMax != null && currMax.x <= horzEdge.bot.x) currMax = currMax.next;
				if(currMax != null && currMax.x >= eLastHorz.top.x) {
					currMax = null;
				}
			} else {
				while(currMax.next != null && currMax.next.x < horzEdge.bot.x) currMax = currMax.next;
				if(currMax.x <= eLastHorz.top.x) {
					currMax = null;
				}
			}
		}
		var op1 = null;
		while(true) {
			var isLastHorz = horzEdge == eLastHorz;
			var e = this.getNextInAEL(horzEdge,dir);
			while(e != null) {
				if(currMax != null) {
					if(dir == hxClipper__$Clipper_Direction.D_LEFT_TO_RIGHT) {
						while(currMax != null && currMax.x < e.curr.x) {
							if(horzEdge.outIdx >= 0 && !isOpen) {
								this.addOutPt(horzEdge,new hxClipper_IntPoint(currMax.x,horzEdge.bot.y));
							}
							currMax = currMax.next;
						}
					} else {
						while(currMax != null && currMax.x > e.curr.x) {
							if(horzEdge.outIdx >= 0 && !isOpen) {
								this.addOutPt(horzEdge,new hxClipper_IntPoint(currMax.x,horzEdge.bot.y));
							}
							currMax = currMax.prev;
						}
					}
				}
				if(dir == hxClipper__$Clipper_Direction.D_LEFT_TO_RIGHT && e.curr.x > horzRight || dir == hxClipper__$Clipper_Direction.D_RIGHT_TO_LEFT && e.curr.x < horzLeft) {
					break;
				}
				if(e.curr.x == horzEdge.top.x && horzEdge.nextInLML != null && e.dx < horzEdge.nextInLML.dx) {
					break;
				}
				if(horzEdge.outIdx >= 0 && !isOpen) {
					op1 = this.addOutPt(horzEdge,e.curr);
					var eNextHorz = this.mSortedEdges;
					while(eNextHorz != null) {
						if(eNextHorz.outIdx >= 0 && this.horzSegmentsOverlap(horzEdge.bot.x,horzEdge.top.x,eNextHorz.bot.x,eNextHorz.top.x)) {
							var op2 = this.getLastOutPt(eNextHorz);
							this.addJoin(op2,op1,eNextHorz.top);
						}
						eNextHorz = eNextHorz.nextInSEL;
					}
					this.addGhostJoin(op1,horzEdge.bot);
				}
				if(e == eMaxPair && isLastHorz) {
					if(horzEdge.outIdx >= 0) {
						this.addLocalMaxPoly(horzEdge,eMaxPair,horzEdge.top);
					}
					this.deleteFromAEL(horzEdge);
					this.deleteFromAEL(eMaxPair);
					return;
				}
				if(dir == hxClipper__$Clipper_Direction.D_LEFT_TO_RIGHT) {
					var pt = new hxClipper_IntPoint(e.curr.x,horzEdge.curr.y);
					this.intersectEdges(horzEdge,e,pt);
				} else {
					var pt1 = new hxClipper_IntPoint(e.curr.x,horzEdge.curr.y);
					this.intersectEdges(e,horzEdge,pt1);
				}
				var eNext = this.getNextInAEL(e,dir);
				this.swapPositionsInAEL(horzEdge,e);
				e = eNext;
			}
			if(horzEdge.nextInLML == null || !hxClipper_ClipperBase.isHorizontal(horzEdge.nextInLML)) {
				break;
			}
			horzEdge = this.updateEdgeIntoAEL(horzEdge);
			if(horzEdge.outIdx >= 0) {
				this.addOutPt(horzEdge,horzEdge.bot);
			}
			this.getHorzDirection(horzEdge,outParams);
			dir = outParams.dir;
			horzLeft = outParams.left;
			horzRight = outParams.right;
		}
		if(horzEdge.outIdx >= 0 && op1 == null) {
			op1 = this.getLastOutPt(horzEdge);
			var eNextHorz1 = this.mSortedEdges;
			while(eNextHorz1 != null) {
				if(eNextHorz1.outIdx >= 0 && this.horzSegmentsOverlap(horzEdge.bot.x,horzEdge.top.x,eNextHorz1.bot.x,eNextHorz1.top.x)) {
					var op21 = this.getLastOutPt(eNextHorz1);
					this.addJoin(op21,op1,eNextHorz1.top);
				}
				eNextHorz1 = eNextHorz1.nextInSEL;
			}
			this.addGhostJoin(op1,horzEdge.top);
		}
		if(horzEdge.nextInLML != null) {
			if(horzEdge.outIdx >= 0) {
				var op11 = this.addOutPt(horzEdge,horzEdge.top);
				horzEdge = this.updateEdgeIntoAEL(horzEdge);
				if(horzEdge.windDelta == 0) {
					return;
				}
				var ePrev = horzEdge.prevInAEL;
				var eNext1 = horzEdge.nextInAEL;
				if(ePrev != null && ePrev.curr.x == horzEdge.bot.x && ePrev.curr.y == horzEdge.bot.y && ePrev.windDelta != 0 && (ePrev.outIdx >= 0 && ePrev.curr.y > ePrev.top.y && hxClipper_ClipperBase.slopesEqual(horzEdge,ePrev,this.mUseFullRange))) {
					var op22 = this.addOutPt(ePrev,horzEdge.bot);
					this.addJoin(op11,op22,horzEdge.top);
				} else if(eNext1 != null && eNext1.curr.x == horzEdge.bot.x && eNext1.curr.y == horzEdge.bot.y && eNext1.windDelta != 0 && eNext1.outIdx >= 0 && eNext1.curr.y > eNext1.top.y && hxClipper_ClipperBase.slopesEqual(horzEdge,eNext1,this.mUseFullRange)) {
					var op23 = this.addOutPt(eNext1,horzEdge.bot);
					this.addJoin(op11,op23,horzEdge.top);
				}
			} else {
				horzEdge = this.updateEdgeIntoAEL(horzEdge);
			}
		} else {
			if(horzEdge.outIdx >= 0) {
				this.addOutPt(horzEdge,horzEdge.top);
			}
			this.deleteFromAEL(horzEdge);
		}
	}
	,getNextInAEL: function(e,direction) {
		if(direction == hxClipper__$Clipper_Direction.D_LEFT_TO_RIGHT) {
			return e.nextInAEL;
		} else {
			return e.prevInAEL;
		}
	}
	,isMinima: function(e) {
		if(e != null && e.prev.nextInLML != e) {
			return e.next.nextInLML != e;
		} else {
			return false;
		}
	}
	,isMaxima: function(e,y) {
		if(e != null && e.top.y == y) {
			return e.nextInLML == null;
		} else {
			return false;
		}
	}
	,isIntermediate: function(e,y) {
		if(e.top.y == y) {
			return e.nextInLML != null;
		} else {
			return false;
		}
	}
	,getMaximaPair: function(e) {
		if(e.next.top.equals(e.top) && e.next.nextInLML == null) {
			return e.next;
		} else if(e.prev.top.equals(e.top) && e.prev.nextInLML == null) {
			return e.prev;
		} else {
			return null;
		}
	}
	,getMaximaPairEx: function(e) {
		var result = this.getMaximaPair(e);
		if(result == null || result.outIdx == -2 || result.nextInAEL == result.prevInAEL && !hxClipper_ClipperBase.isHorizontal(result)) {
			return null;
		}
		return result;
	}
	,processIntersections: function(topY) {
		if(this.mActiveEdges == null) {
			return true;
		}
		try {
			this.buildIntersectList(topY);
			if(this.mIntersectList.length == 0) {
				return true;
			}
			if(this.mIntersectList.length == 1 || this.fixupIntersectionOrder()) {
				this.processIntersectList();
			} else {
				return false;
			}
		} catch( e ) {
			haxe_CallStack.lastException = e;
			this.mSortedEdges = null;
			this.mIntersectList.length = 0;
			throw new js__$Boot_HaxeError(new hxClipper_ClipperException("ProcessIntersections error"));
		}
		this.mSortedEdges = null;
		return true;
	}
	,buildIntersectList: function(topY) {
		if(this.mActiveEdges == null) {
			return;
		}
		var e = this.mActiveEdges;
		this.mSortedEdges = e;
		while(e != null) {
			e.prevInSEL = e.prevInAEL;
			e.nextInSEL = e.nextInAEL;
			e.curr.x = hxClipper_Clipper.topX(e,topY);
			e = e.nextInAEL;
		}
		var isModified = true;
		while(isModified && this.mSortedEdges != null) {
			isModified = false;
			e = this.mSortedEdges;
			while(e.nextInSEL != null) {
				var eNext = e.nextInSEL;
				var pt = new hxClipper_IntPoint();
				if(e.curr.x > eNext.curr.x) {
					this.intersectPoint(e,eNext,pt);
					if(pt.y < topY) {
						pt = new hxClipper_IntPoint(hxClipper_Clipper.topX(e,topY),topY);
					}
					var newNode = new hxClipper_IntersectNode();
					newNode.edge1 = e;
					newNode.edge2 = eNext;
					newNode.pt.copyFrom(pt);
					this.mIntersectList.push(newNode);
					this.swapPositionsInSEL(e,eNext);
					isModified = true;
				} else {
					e = eNext;
				}
			}
			if(e.prevInSEL != null) {
				e.prevInSEL.nextInSEL = null;
			} else {
				break;
			}
		}
		this.mSortedEdges = null;
	}
	,edgesAdjacent: function(inode) {
		if(inode.edge1.nextInSEL != inode.edge2) {
			return inode.edge1.prevInSEL == inode.edge2;
		} else {
			return true;
		}
	}
	,fixupIntersectionOrder: function() {
		haxe_ds_ArraySort.sort(this.mIntersectList,this.mIntersectNodeComparer);
		this.copyAELToSEL();
		var cnt = this.mIntersectList.length;
		var _g = 0;
		while(_g < cnt) {
			var i = _g++;
			if(!this.edgesAdjacent(this.mIntersectList[i])) {
				var j = i + 1;
				while(j < cnt && !this.edgesAdjacent(this.mIntersectList[j])) ++j;
				if(j == cnt) {
					return false;
				}
				var tmp = this.mIntersectList[i];
				this.mIntersectList[i] = this.mIntersectList[j];
				this.mIntersectList[j] = tmp;
			}
			this.swapPositionsInSEL(this.mIntersectList[i].edge1,this.mIntersectList[i].edge2);
		}
		return true;
	}
	,processIntersectList: function() {
		var _g = 0;
		var _g1 = this.mIntersectList.length;
		while(_g < _g1) {
			var i = _g++;
			var iNode = this.mIntersectList[i];
			this.intersectEdges(iNode.edge1,iNode.edge2,iNode.pt);
			this.swapPositionsInAEL(iNode.edge1,iNode.edge2);
		}
		this.mIntersectList.length = 0;
	}
	,intersectPoint: function(edge1,edge2,ip) {
		var b1;
		var b2;
		if(edge1.dx == edge2.dx) {
			ip.y = edge1.curr.y;
			ip.x = hxClipper_Clipper.topX(edge1,ip.y);
			return;
		}
		if(edge1.delta.x == 0) {
			ip.x = edge1.bot.x;
			if(hxClipper_ClipperBase.isHorizontal(edge2)) {
				ip.y = edge2.bot.y;
			} else {
				b2 = edge2.bot.y - edge2.bot.x / edge2.dx;
				ip.y = hxClipper_Clipper.round(ip.x / edge2.dx + b2);
			}
		} else if(edge2.delta.x == 0) {
			ip.x = edge2.bot.x;
			if(hxClipper_ClipperBase.isHorizontal(edge1)) {
				ip.y = edge1.bot.y;
			} else {
				b1 = edge1.bot.y - edge1.bot.x / edge1.dx;
				ip.y = hxClipper_Clipper.round(ip.x / edge1.dx + b1);
			}
		} else {
			b1 = edge1.bot.x - edge1.bot.y * edge1.dx;
			b2 = edge2.bot.x - edge2.bot.y * edge2.dx;
			var q = (b2 - b1) / (edge1.dx - edge2.dx);
			ip.y = hxClipper_Clipper.round(q);
			if(Math.abs(edge1.dx) < Math.abs(edge2.dx)) {
				ip.x = hxClipper_Clipper.round(edge1.dx * q + b1);
			} else {
				ip.x = hxClipper_Clipper.round(edge2.dx * q + b2);
			}
		}
		if(ip.y < edge1.top.y || ip.y < edge2.top.y) {
			if(edge1.top.y > edge2.top.y) {
				ip.y = edge1.top.y;
			} else {
				ip.y = edge2.top.y;
			}
			if(Math.abs(edge1.dx) < Math.abs(edge2.dx)) {
				ip.x = hxClipper_Clipper.topX(edge1,ip.y);
			} else {
				ip.x = hxClipper_Clipper.topX(edge2,ip.y);
			}
		}
		if(ip.y > edge1.curr.y) {
			ip.y = edge1.curr.y;
			if(Math.abs(edge1.dx) > Math.abs(edge2.dx)) {
				ip.x = hxClipper_Clipper.topX(edge2,ip.y);
			} else {
				ip.x = hxClipper_Clipper.topX(edge1,ip.y);
			}
		}
	}
	,processEdgesAtTopOfScanbeam: function(topY) {
		var e = this.mActiveEdges;
		while(e != null) {
			var isMaximaEdge = this.isMaxima(e,topY);
			if(isMaximaEdge) {
				var eMaxPair = this.getMaximaPairEx(e);
				isMaximaEdge = eMaxPair == null || !hxClipper_ClipperBase.isHorizontal(eMaxPair);
			}
			if(isMaximaEdge) {
				if(this.strictlySimple) {
					this.insertMaxima(e.top.x);
				}
				var ePrev = e.prevInAEL;
				this.doMaxima(e);
				if(ePrev == null) {
					e = this.mActiveEdges;
				} else {
					e = ePrev.nextInAEL;
				}
			} else {
				if(this.isIntermediate(e,topY) && hxClipper_ClipperBase.isHorizontal(e.nextInLML)) {
					e = this.updateEdgeIntoAEL(e);
					if(e.outIdx >= 0) {
						this.addOutPt(e,e.bot);
					}
					this.addEdgeToSEL(e);
				} else {
					e.curr.x = hxClipper_Clipper.topX(e,topY);
					e.curr.y = topY;
				}
				if(this.strictlySimple) {
					var ePrev1 = e.prevInAEL;
					if(e.outIdx >= 0 && e.windDelta != 0 && ePrev1 != null && ePrev1.outIdx >= 0 && ePrev1.curr.x == e.curr.x && ePrev1.windDelta != 0) {
						var ip = e.curr.clone();
						var op = this.addOutPt(ePrev1,ip);
						var op2 = this.addOutPt(e,ip);
						this.addJoin(op,op2,ip);
					}
				}
				e = e.nextInAEL;
			}
		}
		this.processHorizontals();
		this.mMaxima = null;
		e = this.mActiveEdges;
		while(e != null) {
			if(this.isIntermediate(e,topY)) {
				var op1 = null;
				if(e.outIdx >= 0) {
					op1 = this.addOutPt(e,e.top);
				}
				e = this.updateEdgeIntoAEL(e);
				var ePrev2 = e.prevInAEL;
				var eNext = e.nextInAEL;
				if(ePrev2 != null && ePrev2.curr.x == e.bot.x && ePrev2.curr.y == e.bot.y && op1 != null && ePrev2.outIdx >= 0 && ePrev2.curr.y > ePrev2.top.y && hxClipper_ClipperBase.slopesEqual4(e.curr,e.top,ePrev2.curr,ePrev2.top,this.mUseFullRange) && e.windDelta != 0 && ePrev2.windDelta != 0) {
					var op21 = this.addOutPt(ePrev2,e.bot);
					this.addJoin(op1,op21,e.top);
				} else if(eNext != null && eNext.curr.x == e.bot.x && eNext.curr.y == e.bot.y && op1 != null && eNext.outIdx >= 0 && eNext.curr.y > eNext.top.y && hxClipper_ClipperBase.slopesEqual4(e.curr,e.top,eNext.curr,eNext.top,this.mUseFullRange) && e.windDelta != 0 && eNext.windDelta != 0) {
					var op22 = this.addOutPt(eNext,e.bot);
					this.addJoin(op1,op22,e.top);
				}
			}
			e = e.nextInAEL;
		}
	}
	,doMaxima: function(e) {
		var eMaxPair = this.getMaximaPairEx(e);
		if(eMaxPair == null) {
			if(e.outIdx >= 0) {
				this.addOutPt(e,e.top);
			}
			this.deleteFromAEL(e);
			return;
		}
		var eNext = e.nextInAEL;
		while(eNext != null && eNext != eMaxPair) {
			this.intersectEdges(e,eNext,e.top);
			this.swapPositionsInAEL(e,eNext);
			eNext = e.nextInAEL;
		}
		if(e.outIdx == -1 && eMaxPair.outIdx == -1) {
			this.deleteFromAEL(e);
			this.deleteFromAEL(eMaxPair);
		} else if(e.outIdx >= 0 && eMaxPair.outIdx >= 0) {
			if(e.outIdx >= 0) {
				this.addLocalMaxPoly(e,eMaxPair,e.top);
			}
			this.deleteFromAEL(e);
			this.deleteFromAEL(eMaxPair);
		} else {
			throw new js__$Boot_HaxeError(new hxClipper_ClipperException("DoMaxima error"));
		}
	}
	,pointCount: function(pts) {
		if(pts == null) {
			return 0;
		}
		var result = 0;
		var p = pts;
		while(true) {
			++result;
			p = p.next;
			if(!(p != pts)) {
				break;
			}
		}
		return result;
	}
	,buildResult: function(polyg) {
		polyg.length = 0;
		var _g = 0;
		var _g1 = this.mPolyOuts.length;
		while(_g < _g1) {
			var i = _g++;
			var outRec = this.mPolyOuts[i];
			if(outRec.pts == null) {
				continue;
			}
			var p = outRec.pts.prev;
			var cnt = this.pointCount(p);
			if(cnt < 2) {
				continue;
			}
			var pg = [];
			var _g2 = 0;
			while(_g2 < cnt) {
				++_g2;
				pg.push(p.pt);
				p = p.prev;
			}
			polyg.push(pg);
		}
	}
	,buildResult2: function(polytree) {
		polytree.clear();
		var _g = 0;
		var _g1 = this.mPolyOuts.length;
		while(_g < _g1) {
			var i = _g++;
			var outRec = this.mPolyOuts[i];
			var cnt = this.pointCount(outRec.pts);
			if(outRec.isOpen && cnt < 2 || !outRec.isOpen && cnt < 3) {
				continue;
			}
			this.fixHoleLinkage(outRec);
			var pn = new hxClipper_PolyNode();
			polytree.mAllPolys.push(pn);
			outRec.polyNode = pn;
			var op = outRec.pts.prev;
			var _g2 = 0;
			while(_g2 < cnt) {
				++_g2;
				pn.mPolygon.push(op.pt);
				op = op.prev;
			}
		}
		var _g21 = 0;
		var _g3 = this.mPolyOuts.length;
		while(_g21 < _g3) {
			var i1 = _g21++;
			var outRec1 = this.mPolyOuts[i1];
			if(outRec1.polyNode == null) {
				continue;
			} else if(outRec1.isOpen) {
				outRec1.polyNode.isOpen = true;
				polytree.addChild(outRec1.polyNode);
			} else if(outRec1.firstLeft != null && outRec1.firstLeft.polyNode != null) {
				outRec1.firstLeft.polyNode.addChild(outRec1.polyNode);
			} else {
				polytree.addChild(outRec1.polyNode);
			}
		}
	}
	,fixupOutPolyLine: function(outrec) {
		var pp = outrec.pts;
		var lastPP = pp.prev;
		while(pp != lastPP) {
			pp = pp.next;
			if(pp.pt == pp.prev.pt) {
				if(pp == lastPP) {
					lastPP = pp.prev;
				}
				var tmpPP = pp.prev;
				tmpPP.next = pp.next;
				pp.next.prev = tmpPP;
				pp = tmpPP;
			}
		}
		if(pp == pp.prev) {
			outrec.pts = null;
		}
	}
	,fixupOutPolygon: function(outRec) {
		var lastOK = null;
		outRec.bottomPt = null;
		var pp = outRec.pts;
		var preserveCol = this.preserveCollinear || this.strictlySimple;
		while(true) {
			if(pp.prev == pp || pp.prev == pp.next) {
				outRec.pts = null;
				return;
			}
			if(pp.pt.equals(pp.next.pt) || pp.pt.equals(pp.prev.pt) || hxClipper_ClipperBase.slopesEqual3(pp.prev.pt,pp.pt,pp.next.pt,this.mUseFullRange) && (!preserveCol || !this.pt2IsBetweenPt1AndPt3(pp.prev.pt,pp.pt,pp.next.pt))) {
				lastOK = null;
				pp.prev.next = pp.next;
				pp.next.prev = pp.prev;
				pp = pp.prev;
			} else if(pp == lastOK) {
				break;
			} else {
				if(lastOK == null) {
					lastOK = pp;
				}
				pp = pp.next;
			}
		}
		outRec.pts = pp;
	}
	,dupOutPt: function(outPt,insertAfter) {
		var result = new hxClipper__$Clipper_OutPt();
		result.pt.copyFrom(outPt.pt);
		result.idx = outPt.idx;
		if(insertAfter) {
			result.next = outPt.next;
			result.prev = outPt;
			outPt.next.prev = result;
			outPt.next = result;
		} else {
			result.prev = outPt.prev;
			result.next = outPt;
			outPt.prev.next = result;
			outPt.prev = result;
		}
		return result;
	}
	,getOverlap: function(a1,a2,b1,b2,outParams) {
		if(a1 < a2) {
			if(b1 < b2) {
				outParams.left = Math.max(a1,b1) | 0;
				outParams.right = Math.min(a2,b2) | 0;
			} else {
				outParams.left = Math.max(a1,b2) | 0;
				outParams.right = Math.min(a2,b1) | 0;
			}
		} else if(b1 < b2) {
			outParams.left = Math.max(a2,b1) | 0;
			outParams.right = Math.min(a1,b2) | 0;
		} else {
			outParams.left = Math.max(a2,b2) | 0;
			outParams.right = Math.min(a1,b1) | 0;
		}
		return outParams.left < outParams.right;
	}
	,joinHorz: function(op1,op1b,op2,op2b,pt,discardLeft) {
		var dir1 = op1.pt.x > op1b.pt.x ? hxClipper__$Clipper_Direction.D_RIGHT_TO_LEFT : hxClipper__$Clipper_Direction.D_LEFT_TO_RIGHT;
		var dir2 = op2.pt.x > op2b.pt.x ? hxClipper__$Clipper_Direction.D_RIGHT_TO_LEFT : hxClipper__$Clipper_Direction.D_LEFT_TO_RIGHT;
		if(dir1 == dir2) {
			return false;
		}
		if(dir1 == hxClipper__$Clipper_Direction.D_LEFT_TO_RIGHT) {
			while(op1.next.pt.x <= pt.x && op1.next.pt.x >= op1.pt.x && op1.next.pt.y == pt.y) op1 = op1.next;
			if(discardLeft && op1.pt.x != pt.x) {
				op1 = op1.next;
			}
			op1b = this.dupOutPt(op1,!discardLeft);
			if(!op1b.pt.equals(pt)) {
				op1 = op1b;
				op1.pt.copyFrom(pt);
				op1b = this.dupOutPt(op1,!discardLeft);
			}
		} else {
			while(op1.next.pt.x >= pt.x && op1.next.pt.x <= op1.pt.x && op1.next.pt.y == pt.y) op1 = op1.next;
			if(!discardLeft && op1.pt.x != pt.x) {
				op1 = op1.next;
			}
			op1b = this.dupOutPt(op1,discardLeft);
			if(!op1b.pt.equals(pt)) {
				op1 = op1b;
				op1.pt.copyFrom(pt);
				op1b = this.dupOutPt(op1,discardLeft);
			}
		}
		if(dir2 == hxClipper__$Clipper_Direction.D_LEFT_TO_RIGHT) {
			while(op2.next.pt.x <= pt.x && op2.next.pt.x >= op2.pt.x && op2.next.pt.y == pt.y) op2 = op2.next;
			if(discardLeft && op2.pt.x != pt.x) {
				op2 = op2.next;
			}
			op2b = this.dupOutPt(op2,!discardLeft);
			if(!op2b.pt.equals(pt)) {
				op2 = op2b;
				op2.pt.copyFrom(pt);
				op2b = this.dupOutPt(op2,!discardLeft);
			}
		} else {
			while(op2.next.pt.x >= pt.x && op2.next.pt.x <= op2.pt.x && op2.next.pt.y == pt.y) op2 = op2.next;
			if(!discardLeft && op2.pt.x != pt.x) {
				op2 = op2.next;
			}
			op2b = this.dupOutPt(op2,discardLeft);
			if(!op2b.pt.equals(pt)) {
				op2 = op2b;
				op2.pt.copyFrom(pt);
				op2b = this.dupOutPt(op2,discardLeft);
			}
		}
		if(dir1 == hxClipper__$Clipper_Direction.D_LEFT_TO_RIGHT == discardLeft) {
			op1.prev = op2;
			op2.next = op1;
			op1b.next = op2b;
			op2b.prev = op1b;
		} else {
			op1.next = op2;
			op2.prev = op1;
			op1b.prev = op2b;
			op2b.next = op1b;
		}
		return true;
	}
	,joinPoints: function(j,outRec1,outRec2) {
		var op1 = j.outPt1;
		var op1b;
		var op2 = j.outPt2;
		var op2b;
		var isHorizontal = j.outPt1.pt.y == j.offPt.y;
		if(isHorizontal && j.offPt.equals(j.outPt1.pt) && j.offPt.equals(j.outPt2.pt)) {
			if(outRec1 != outRec2) {
				return false;
			}
			op1b = j.outPt1.next;
			while(op1b != op1 && op1b.pt.equals(j.offPt)) op1b = op1b.next;
			var reverse1 = op1b.pt.y > j.offPt.y;
			op2b = j.outPt2.next;
			while(op2b != op2 && op2b.pt.equals(j.offPt)) op2b = op2b.next;
			var reverse2 = op2b.pt.y > j.offPt.y;
			if(reverse1 == reverse2) {
				return false;
			}
			if(reverse1) {
				op1b = this.dupOutPt(op1,false);
				op2b = this.dupOutPt(op2,true);
				op1.prev = op2;
				op2.next = op1;
				op1b.next = op2b;
				op2b.prev = op1b;
				j.outPt1 = op1;
				j.outPt2 = op1b;
				return true;
			} else {
				op1b = this.dupOutPt(op1,true);
				op2b = this.dupOutPt(op2,false);
				op1.next = op2;
				op2.prev = op1;
				op1b.prev = op2b;
				op2b.next = op1b;
				j.outPt1 = op1;
				j.outPt2 = op1b;
				return true;
			}
		} else if(isHorizontal) {
			op1b = op1;
			while(op1.prev.pt.y == op1.pt.y && op1.prev != op1b && op1.prev != op2) op1 = op1.prev;
			while(op1b.next.pt.y == op1b.pt.y && op1b.next != op1 && op1b.next != op2) op1b = op1b.next;
			if(op1b.next == op1 || op1b.next == op2) {
				return false;
			}
			op2b = op2;
			while(op2.prev.pt.y == op2.pt.y && op2.prev != op2b && op2.prev != op1b) op2 = op2.prev;
			while(op2b.next.pt.y == op2b.pt.y && op2b.next != op2 && op2b.next != op1) op2b = op2b.next;
			if(op2b.next == op2 || op2b.next == op1) {
				return false;
			}
			var left = 0;
			var right = 0;
			var outParams = { left : 0, right : 0};
			if(!this.getOverlap(op1.pt.x,op1b.pt.x,op2.pt.x,op2b.pt.x,outParams)) {
				return false;
			}
			left = outParams.left;
			right = outParams.right;
			var pt = new hxClipper_IntPoint();
			var discardLeftSide;
			if(op1.pt.x >= left && op1.pt.x <= right) {
				pt.copyFrom(op1.pt);
				discardLeftSide = op1.pt.x > op1b.pt.x;
			} else if(op2.pt.x >= left && op2.pt.x <= right) {
				pt.copyFrom(op2.pt);
				discardLeftSide = op2.pt.x > op2b.pt.x;
			} else if(op1b.pt.x >= left && op1b.pt.x <= right) {
				pt.copyFrom(op1b.pt);
				discardLeftSide = op1b.pt.x > op1.pt.x;
			} else {
				pt.copyFrom(op2b.pt);
				discardLeftSide = op2b.pt.x > op2.pt.x;
			}
			j.outPt1 = op1;
			j.outPt2 = op2;
			return this.joinHorz(op1,op1b,op2,op2b,pt,discardLeftSide);
		} else {
			op1b = op1.next;
			while(op1b.pt.equals(op1.pt) && op1b != op1) op1b = op1b.next;
			var reverse11 = op1b.pt.y > op1.pt.y || !hxClipper_ClipperBase.slopesEqual3(op1.pt,op1b.pt,j.offPt,this.mUseFullRange);
			if(reverse11) {
				op1b = op1.prev;
				while(op1b.pt.equals(op1.pt) && op1b != op1) op1b = op1b.prev;
				if(op1b.pt.y > op1.pt.y || !hxClipper_ClipperBase.slopesEqual3(op1.pt,op1b.pt,j.offPt,this.mUseFullRange)) {
					return false;
				}
			}
			op2b = op2.next;
			while(op2b.pt.equals(op2.pt) && op2b != op2) op2b = op2b.next;
			var reverse21 = op2b.pt.y > op2.pt.y || !hxClipper_ClipperBase.slopesEqual3(op2.pt,op2b.pt,j.offPt,this.mUseFullRange);
			if(reverse21) {
				op2b = op2.prev;
				while(op2b.pt.equals(op2.pt) && op2b != op2) op2b = op2b.prev;
				if(op2b.pt.y > op2.pt.y || !hxClipper_ClipperBase.slopesEqual3(op2.pt,op2b.pt,j.offPt,this.mUseFullRange)) {
					return false;
				}
			}
			if(op1b == op1 || op2b == op2 || op1b == op2b || outRec1 == outRec2 && reverse11 == reverse21) {
				return false;
			}
			if(reverse11) {
				op1b = this.dupOutPt(op1,false);
				op2b = this.dupOutPt(op2,true);
				op1.prev = op2;
				op2.next = op1;
				op1b.next = op2b;
				op2b.prev = op1b;
				j.outPt1 = op1;
				j.outPt2 = op1b;
				return true;
			} else {
				op1b = this.dupOutPt(op1,true);
				op2b = this.dupOutPt(op2,false);
				op1.next = op2;
				op2.prev = op1;
				op1b.prev = op2b;
				op2b.next = op1b;
				j.outPt1 = op1;
				j.outPt2 = op1b;
				return true;
			}
		}
	}
	,fixupFirstLefts1: function(oldOutRec,newOutRec) {
		var _g = 0;
		var _g1 = this.mPolyOuts.length;
		while(_g < _g1) {
			var i = _g++;
			var outRec = this.mPolyOuts[i];
			var firstLeft = hxClipper_Clipper.parseFirstLeft(outRec.firstLeft);
			if(outRec.pts != null && firstLeft == oldOutRec) {
				if(hxClipper_Clipper.poly2ContainsPoly1(outRec.pts,newOutRec.pts)) {
					outRec.firstLeft = newOutRec;
				}
			}
		}
	}
	,fixupFirstLefts2: function(innerOutRec,outerOutRec) {
		var orfl = outerOutRec.firstLeft;
		var _g = 0;
		var _g1 = this.mPolyOuts;
		while(_g < _g1.length) {
			var outRec = _g1[_g];
			++_g;
			if(outRec.pts == null || outRec == outerOutRec || outRec == innerOutRec) {
				continue;
			}
			var firstLeft = hxClipper_Clipper.parseFirstLeft(outRec.firstLeft);
			if(firstLeft != orfl && firstLeft != innerOutRec && firstLeft != outerOutRec) {
				continue;
			}
			if(hxClipper_Clipper.poly2ContainsPoly1(outRec.pts,innerOutRec.pts)) {
				outRec.firstLeft = innerOutRec;
			} else if(hxClipper_Clipper.poly2ContainsPoly1(outRec.pts,outerOutRec.pts)) {
				outRec.firstLeft = outerOutRec;
			} else if(outRec.firstLeft == innerOutRec || outRec.firstLeft == outerOutRec) {
				outRec.firstLeft = orfl;
			}
		}
	}
	,fixupFirstLefts3: function(oldOutRec,newOutRec) {
		var _g = 0;
		var _g1 = this.mPolyOuts;
		while(_g < _g1.length) {
			var outRec = _g1[_g];
			++_g;
			var firstLeft = hxClipper_Clipper.parseFirstLeft(outRec.firstLeft);
			if(outRec.pts != null && firstLeft == oldOutRec) {
				outRec.firstLeft = newOutRec;
			}
		}
	}
	,joinCommonEdges: function() {
		var _g = 0;
		var _g1 = this.mJoins.length;
		while(_g < _g1) {
			var i = _g++;
			var join = this.mJoins[i];
			var outRec1 = this.getOutRec(join.outPt1.idx);
			var outRec2 = this.getOutRec(join.outPt2.idx);
			if(outRec1.pts == null || outRec2.pts == null) {
				continue;
			}
			if(outRec1.isOpen || outRec2.isOpen) {
				continue;
			}
			var holeStateRec;
			if(outRec1 == outRec2) {
				holeStateRec = outRec1;
			} else if(this.outRec1RightOfOutRec2(outRec1,outRec2)) {
				holeStateRec = outRec2;
			} else if(this.outRec1RightOfOutRec2(outRec2,outRec1)) {
				holeStateRec = outRec1;
			} else {
				holeStateRec = this.getLowermostRec(outRec1,outRec2);
			}
			if(!this.joinPoints(join,outRec1,outRec2)) {
				continue;
			}
			if(outRec1 == outRec2) {
				outRec1.pts = join.outPt1;
				outRec1.bottomPt = null;
				outRec2 = this.createOutRec();
				outRec2.pts = join.outPt2;
				this.updateOutPtIdxs(outRec2);
				if(hxClipper_Clipper.poly2ContainsPoly1(outRec2.pts,outRec1.pts)) {
					outRec2.isHole = !outRec1.isHole;
					outRec2.firstLeft = outRec1;
					if(this.mUsingPolyTree) {
						this.fixupFirstLefts2(outRec2,outRec1);
					}
					var a = outRec2.isHole;
					var b = this.reverseSolution;
					if((a && !b || b && !a) == this.areaOfOutRec(outRec2) > 0) {
						this.reversePolyPtLinks(outRec2.pts);
					}
				} else if(hxClipper_Clipper.poly2ContainsPoly1(outRec1.pts,outRec2.pts)) {
					outRec2.isHole = outRec1.isHole;
					outRec1.isHole = !outRec2.isHole;
					outRec2.firstLeft = outRec1.firstLeft;
					outRec1.firstLeft = outRec2;
					if(this.mUsingPolyTree) {
						this.fixupFirstLefts2(outRec1,outRec2);
					}
					var a1 = outRec1.isHole;
					var b1 = this.reverseSolution;
					if((a1 && !b1 || b1 && !a1) == this.areaOfOutRec(outRec1) > 0) {
						this.reversePolyPtLinks(outRec1.pts);
					}
				} else {
					outRec2.isHole = outRec1.isHole;
					outRec2.firstLeft = outRec1.firstLeft;
					if(this.mUsingPolyTree) {
						this.fixupFirstLefts1(outRec1,outRec2);
					}
				}
			} else {
				outRec2.pts = null;
				outRec2.bottomPt = null;
				outRec2.idx = outRec1.idx;
				outRec1.isHole = holeStateRec.isHole;
				if(holeStateRec == outRec2) {
					outRec1.firstLeft = outRec2.firstLeft;
				}
				outRec2.firstLeft = outRec1;
				if(this.mUsingPolyTree) {
					this.fixupFirstLefts3(outRec2,outRec1);
				}
			}
		}
	}
	,updateOutPtIdxs: function(outrec) {
		var op = outrec.pts;
		while(true) {
			op.idx = outrec.idx;
			op = op.prev;
			if(!(op != outrec.pts)) {
				break;
			}
		}
	}
	,doSimplePolygons: function() {
		var i = 0;
		while(i < this.mPolyOuts.length) {
			var outrec = this.mPolyOuts[i++];
			var op = outrec.pts;
			if(op == null || outrec.isOpen) {
				continue;
			}
			while(true) {
				var op2 = op.next;
				while(op2 != outrec.pts) {
					if(op.pt.equals(op2.pt) && op2.next != op && op2.prev != op) {
						var op3 = op.prev;
						var op4 = op2.prev;
						op.prev = op4;
						op4.next = op;
						op2.prev = op3;
						op3.next = op2;
						outrec.pts = op;
						var outrec2 = this.createOutRec();
						outrec2.pts = op2;
						this.updateOutPtIdxs(outrec2);
						if(hxClipper_Clipper.poly2ContainsPoly1(outrec2.pts,outrec.pts)) {
							outrec2.isHole = !outrec.isHole;
							outrec2.firstLeft = outrec;
							if(this.mUsingPolyTree) {
								this.fixupFirstLefts2(outrec2,outrec);
							}
						} else if(hxClipper_Clipper.poly2ContainsPoly1(outrec.pts,outrec2.pts)) {
							outrec2.isHole = outrec.isHole;
							outrec.isHole = !outrec2.isHole;
							outrec2.firstLeft = outrec.firstLeft;
							outrec.firstLeft = outrec2;
							if(this.mUsingPolyTree) {
								this.fixupFirstLefts2(outrec,outrec2);
							}
						} else {
							outrec2.isHole = outrec.isHole;
							outrec2.firstLeft = outrec.firstLeft;
							if(this.mUsingPolyTree) {
								this.fixupFirstLefts1(outrec,outrec2);
							}
						}
						op2 = op;
					}
					op2 = op2.next;
				}
				op = op.next;
				if(!(op != outrec.pts)) {
					break;
				}
			}
		}
	}
	,areaOfOutRec: function(outRec) {
		return this.areaOfOutPt(outRec.pts);
	}
	,areaOfOutPt: function(op) {
		var opFirst = op;
		if(op == null) {
			return 0;
		}
		var a = 0;
		while(true) {
			var dx = op.prev.pt.x + op.pt.x;
			var dy = op.prev.pt.y - op.pt.y;
			a += dx * dy;
			op = op.next;
			if(!(op != opFirst)) {
				break;
			}
		}
		return a * 0.5;
	}
	,__class__: hxClipper_Clipper
});
var hxClipper_ClipperOffset = function(miterLimit,arcTolerance) {
	if(arcTolerance == null) {
		arcTolerance = 0.25;
	}
	if(miterLimit == null) {
		miterLimit = 2.0;
	}
	this.mPolyNodes = new hxClipper_PolyNode();
	this.mLowest = new hxClipper_IntPoint();
	this.mNormals = [];
	this.miterLimit = miterLimit;
	this.arcTolerance = arcTolerance;
	this.mLowest.x = -1;
};
hxClipper_ClipperOffset.__name__ = "hxClipper.ClipperOffset";
hxClipper_ClipperOffset.round = function(value) {
	return hxClipper_Clipper.round(value);
};
hxClipper_ClipperOffset.getUnitNormal = function(pt1,pt2) {
	var dx = pt2.x - pt1.x;
	var dy = pt2.y - pt1.y;
	if(dx == 0 && dy == 0) {
		return new hxClipper_DoublePoint();
	}
	var f = 1.0 / Math.sqrt(dx * dx + dy * dy);
	dx *= f;
	dy *= f;
	return new hxClipper_DoublePoint(dy,-dx);
};
hxClipper_ClipperOffset.prototype = {
	mDestPolys: null
	,mSrcPoly: null
	,mDestPoly: null
	,mNormals: null
	,mDelta: null
	,mSinA: null
	,mSin: null
	,mCos: null
	,mMiterLim: null
	,mStepsPerRad: null
	,mLowest: null
	,mPolyNodes: null
	,arcTolerance: null
	,miterLimit: null
	,clear: function() {
		this.mPolyNodes.get_children().length = 0;
		this.mLowest.x = -1;
	}
	,addPath: function(path,joinType,endType) {
		var highI = path.length - 1;
		if(highI < 0) {
			return;
		}
		var newNode = new hxClipper_PolyNode();
		newNode.mJoinType = joinType;
		newNode.mEndtype = endType;
		if(endType == hxClipper_EndType.ET_CLOSED_LINE || endType == hxClipper_EndType.ET_CLOSED_POLYGON) {
			while(highI > 0 && path[0].equals(path[highI])) --highI;
		}
		newNode.mPolygon.push(path[0]);
		var j = 0;
		var k = 0;
		var _g = 1;
		var _g1 = highI + 1;
		while(_g < _g1) {
			var i = _g++;
			if(!newNode.mPolygon[j].equals(path[i])) {
				++j;
				newNode.mPolygon.push(path[i]);
				if(path[i].y > newNode.mPolygon[k].y || path[i].y == newNode.mPolygon[k].y && path[i].x < newNode.mPolygon[k].x) {
					k = j;
				}
			}
		}
		if(endType == hxClipper_EndType.ET_CLOSED_POLYGON && j < 2) {
			return;
		}
		this.mPolyNodes.addChild(newNode);
		if(endType != hxClipper_EndType.ET_CLOSED_POLYGON) {
			return;
		}
		if(this.mLowest.x < 0) {
			this.mLowest = new hxClipper_IntPoint(this.mPolyNodes.get_numChildren() - 1,k);
		} else {
			var ip = this.mPolyNodes.get_children()[this.mLowest.x | 0].mPolygon[this.mLowest.y | 0].clone();
			if(newNode.mPolygon[k].y > ip.y || newNode.mPolygon[k].y == ip.y && newNode.mPolygon[k].x < ip.x) {
				this.mLowest = new hxClipper_IntPoint(this.mPolyNodes.get_numChildren() - 1,k);
			}
		}
	}
	,addPaths: function(paths,joinType,endType) {
		var _g = 0;
		while(_g < paths.length) {
			var p = paths[_g];
			++_g;
			this.addPath(p,joinType,endType);
		}
	}
	,fixOrientations: function() {
		if(this.mLowest.x >= 0 && !hxClipper_Clipper.orientation(this.mPolyNodes.get_children()[this.mLowest.x | 0].mPolygon)) {
			var _g = 0;
			var _g1 = this.mPolyNodes.get_numChildren();
			while(_g < _g1) {
				var i = _g++;
				var node = this.mPolyNodes.get_children()[i];
				if(node.mEndtype == hxClipper_EndType.ET_CLOSED_POLYGON || node.mEndtype == hxClipper_EndType.ET_CLOSED_LINE && hxClipper_Clipper.orientation(node.mPolygon)) {
					node.mPolygon.reverse();
				}
			}
		} else {
			var _g2 = 0;
			var _g11 = this.mPolyNodes.get_numChildren();
			while(_g2 < _g11) {
				var i1 = _g2++;
				var node1 = this.mPolyNodes.get_children()[i1];
				if(node1.mEndtype == hxClipper_EndType.ET_CLOSED_LINE && !hxClipper_Clipper.orientation(node1.mPolygon)) {
					node1.mPolygon.reverse();
				}
			}
		}
	}
	,doOffset: function(delta) {
		this.mDestPolys = [];
		this.mDelta = delta;
		if(hxClipper_ClipperBase.nearZero(delta)) {
			var _g = 0;
			var _g1 = this.mPolyNodes.get_numChildren();
			while(_g < _g1) {
				var i = _g++;
				var node = this.mPolyNodes.get_children()[i];
				if(node.mEndtype == hxClipper_EndType.ET_CLOSED_POLYGON) {
					this.mDestPolys.push(node.mPolygon);
				}
			}
			return;
		}
		if(this.miterLimit > 2) {
			this.mMiterLim = 2 / (this.miterLimit * this.miterLimit);
		} else {
			this.mMiterLim = 0.5;
		}
		var y;
		if(this.arcTolerance <= 0.0) {
			y = 0.25;
		} else if(this.arcTolerance > Math.abs(delta) * 0.25) {
			y = Math.abs(delta) * 0.25;
		} else {
			y = this.arcTolerance;
		}
		var steps = Math.PI / Math.acos(1 - y / Math.abs(delta));
		this.mSin = Math.sin(6.283185307179586476925286766559 / steps);
		this.mCos = Math.cos(6.283185307179586476925286766559 / steps);
		this.mStepsPerRad = steps / 6.283185307179586476925286766559;
		if(delta < 0.0) {
			this.mSin = -this.mSin;
		}
		var _g2 = 0;
		var _g11 = this.mPolyNodes.get_numChildren();
		while(_g2 < _g11) {
			var i1 = _g2++;
			var node1 = this.mPolyNodes.get_children()[i1];
			this.mSrcPoly = node1.mPolygon;
			var len = this.mSrcPoly.length;
			if(len == 0 || delta <= 0 && (len < 3 || node1.mEndtype != hxClipper_EndType.ET_CLOSED_POLYGON)) {
				continue;
			}
			this.mDestPoly = [];
			if(len == 1) {
				if(node1.mJoinType == hxClipper_JoinType.JT_ROUND) {
					var x = 1.0;
					var y1 = 0.0;
					var j = 1;
					while(j <= steps) {
						this.mDestPoly.push(new hxClipper_IntPoint(hxClipper_ClipperOffset.round(this.mSrcPoly[0].x + x * delta),hxClipper_ClipperOffset.round(this.mSrcPoly[0].y + y1 * delta)));
						var x2 = x;
						x = x * this.mCos - this.mSin * y1;
						y1 = x2 * this.mSin + y1 * this.mCos;
						++j;
					}
				} else {
					var x1 = -1.0;
					var y2 = -1.0;
					this.mDestPoly.push(new hxClipper_IntPoint(hxClipper_ClipperOffset.round(this.mSrcPoly[0].x + -1.0 * delta),hxClipper_ClipperOffset.round(this.mSrcPoly[0].y + -1.0 * delta)));
					x1 = 1;
					this.mDestPoly.push(new hxClipper_IntPoint(hxClipper_ClipperOffset.round(this.mSrcPoly[0].x + x1 * delta),hxClipper_ClipperOffset.round(this.mSrcPoly[0].y + -1.0 * delta)));
					y2 = 1;
					this.mDestPoly.push(new hxClipper_IntPoint(hxClipper_ClipperOffset.round(this.mSrcPoly[0].x + x1 * delta),hxClipper_ClipperOffset.round(this.mSrcPoly[0].y + y2 * delta)));
					x1 = -1;
					this.mDestPoly.push(new hxClipper_IntPoint(hxClipper_ClipperOffset.round(this.mSrcPoly[0].x + x1 * delta),hxClipper_ClipperOffset.round(this.mSrcPoly[0].y + y2 * delta)));
				}
				this.mDestPolys.push(this.mDestPoly);
				continue;
			}
			this.mNormals.length = 0;
			var _g3 = 0;
			var _g12 = len - 1;
			while(_g3 < _g12) {
				var j1 = _g3++;
				this.mNormals.push(hxClipper_ClipperOffset.getUnitNormal(this.mSrcPoly[j1],this.mSrcPoly[j1 + 1]));
			}
			if(node1.mEndtype == hxClipper_EndType.ET_CLOSED_LINE || node1.mEndtype == hxClipper_EndType.ET_CLOSED_POLYGON) {
				this.mNormals.push(hxClipper_ClipperOffset.getUnitNormal(this.mSrcPoly[len - 1],this.mSrcPoly[0]));
			} else {
				this.mNormals.push(this.mNormals[len - 2].clone());
			}
			if(node1.mEndtype == hxClipper_EndType.ET_CLOSED_POLYGON) {
				var k = len - 1;
				var _g21 = 0;
				while(_g21 < len) {
					var j2 = _g21++;
					k = this.offsetPoint(j2,k,node1.mJoinType);
				}
				this.mDestPolys.push(this.mDestPoly);
			} else if(node1.mEndtype == hxClipper_EndType.ET_CLOSED_LINE) {
				var k1 = len - 1;
				var _g22 = 0;
				while(_g22 < len) {
					var j3 = _g22++;
					k1 = this.offsetPoint(j3,k1,node1.mJoinType);
				}
				this.mDestPolys.push(this.mDestPoly);
				this.mDestPoly = [];
				var n = this.mNormals[len - 1].clone();
				var nj = len - 1;
				while(nj > 0) {
					this.mNormals[nj] = new hxClipper_DoublePoint(-this.mNormals[nj - 1].x,-this.mNormals[nj - 1].y);
					--nj;
				}
				this.mNormals[0] = new hxClipper_DoublePoint(-n.x,-n.y);
				k1 = 0;
				nj = len - 1;
				while(nj >= 0) {
					k1 = this.offsetPoint(nj,k1,node1.mJoinType);
					--nj;
				}
				this.mDestPolys.push(this.mDestPoly);
			} else {
				var k2 = 0;
				var _g23 = 1;
				var _g31 = len - 1;
				while(_g23 < _g31) {
					var j4 = _g23++;
					k2 = this.offsetPoint(j4,k2,node1.mJoinType);
				}
				var pt1;
				if(node1.mEndtype == hxClipper_EndType.ET_OPEN_BUTT) {
					var j5 = len - 1;
					pt1 = new hxClipper_IntPoint(hxClipper_ClipperOffset.round(this.mSrcPoly[j5].x + this.mNormals[j5].x * delta),hxClipper_ClipperOffset.round(this.mSrcPoly[j5].y + this.mNormals[j5].y * delta));
					this.mDestPoly.push(pt1);
					pt1 = new hxClipper_IntPoint(hxClipper_ClipperOffset.round(this.mSrcPoly[j5].x - this.mNormals[j5].x * delta),hxClipper_ClipperOffset.round(this.mSrcPoly[j5].y - this.mNormals[j5].y * delta));
					this.mDestPoly.push(pt1);
				} else {
					var j6 = len - 1;
					k2 = len - 2;
					this.mSinA = 0;
					this.mNormals[j6] = new hxClipper_DoublePoint(-this.mNormals[j6].x,-this.mNormals[j6].y);
					if(node1.mEndtype == hxClipper_EndType.ET_OPEN_SQUARE) {
						this.doSquare(j6,k2);
					} else {
						this.doRound(j6,k2);
					}
				}
				var nj1 = len - 1;
				while(nj1 > 0) {
					this.mNormals[nj1] = new hxClipper_DoublePoint(-this.mNormals[nj1 - 1].x,-this.mNormals[nj1 - 1].y);
					--nj1;
				}
				this.mNormals[0] = new hxClipper_DoublePoint(-this.mNormals[1].x,-this.mNormals[1].y);
				k2 = len - 1;
				nj1 = k2 - 1;
				while(nj1 > 0) {
					k2 = this.offsetPoint(nj1,k2,node1.mJoinType);
					--nj1;
				}
				if(node1.mEndtype == hxClipper_EndType.ET_OPEN_BUTT) {
					pt1 = new hxClipper_IntPoint(hxClipper_ClipperOffset.round(this.mSrcPoly[0].x - this.mNormals[0].x * delta),hxClipper_ClipperOffset.round(this.mSrcPoly[0].y - this.mNormals[0].y * delta));
					this.mDestPoly.push(pt1);
					pt1 = new hxClipper_IntPoint(hxClipper_ClipperOffset.round(this.mSrcPoly[0].x + this.mNormals[0].x * delta),hxClipper_ClipperOffset.round(this.mSrcPoly[0].y + this.mNormals[0].y * delta));
					this.mDestPoly.push(pt1);
				} else {
					k2 = 1;
					this.mSinA = 0;
					if(node1.mEndtype == hxClipper_EndType.ET_OPEN_SQUARE) {
						this.doSquare(0,1);
					} else {
						this.doRound(0,1);
					}
				}
				this.mDestPolys.push(this.mDestPoly);
			}
		}
	}
	,execute: function(solution,delta) {
		if(((solution) instanceof Array) && solution.__enum__ == null) {
			this.executePaths(solution,delta);
			return;
		} else if(((solution) instanceof hxClipper_PolyTree)) {
			this.executePolyTree(solution,delta);
			return;
		} else {
			throw new js__$Boot_HaxeError(new hxClipper_ClipperException("`solution` must be either a Paths or a PolyTree"));
		}
	}
	,executePaths: function(solution,delta) {
		solution.length = 0;
		this.fixOrientations();
		this.doOffset(delta);
		var clpr = new hxClipper_Clipper();
		clpr.addPaths(this.mDestPolys,hxClipper_PolyType.PT_SUBJECT,true);
		if(delta > 0) {
			clpr.executePaths(hxClipper_ClipType.CT_UNION,solution,hxClipper_PolyFillType.PFT_POSITIVE,hxClipper_PolyFillType.PFT_POSITIVE);
		} else {
			var r = hxClipper_ClipperBase.getBounds(this.mDestPolys);
			var outer = [];
			outer.push(new hxClipper_IntPoint(r.left - 10,r.bottom + 10));
			outer.push(new hxClipper_IntPoint(r.right + 10,r.bottom + 10));
			outer.push(new hxClipper_IntPoint(r.right + 10,r.top - 10));
			outer.push(new hxClipper_IntPoint(r.left - 10,r.top - 10));
			clpr.addPath(outer,hxClipper_PolyType.PT_SUBJECT,true);
			clpr.reverseSolution = true;
			clpr.executePaths(hxClipper_ClipType.CT_UNION,solution,hxClipper_PolyFillType.PFT_NEGATIVE,hxClipper_PolyFillType.PFT_NEGATIVE);
			if(solution.length > 0) {
				solution.shift();
			}
		}
	}
	,executePolyTree: function(solution,delta) {
		solution.clear();
		this.fixOrientations();
		this.doOffset(delta);
		var clpr = new hxClipper_Clipper();
		clpr.addPaths(this.mDestPolys,hxClipper_PolyType.PT_SUBJECT,true);
		if(delta > 0) {
			clpr.executePolyTree(hxClipper_ClipType.CT_UNION,solution,hxClipper_PolyFillType.PFT_POSITIVE,hxClipper_PolyFillType.PFT_POSITIVE);
		} else {
			var r = hxClipper_ClipperBase.getBounds(this.mDestPolys);
			var outer = [];
			outer.push(new hxClipper_IntPoint(r.left - 10,r.bottom + 10));
			outer.push(new hxClipper_IntPoint(r.right + 10,r.bottom + 10));
			outer.push(new hxClipper_IntPoint(r.right + 10,r.top - 10));
			outer.push(new hxClipper_IntPoint(r.left - 10,r.top - 10));
			clpr.addPath(outer,hxClipper_PolyType.PT_SUBJECT,true);
			clpr.reverseSolution = true;
			clpr.executePolyTree(hxClipper_ClipType.CT_UNION,solution,hxClipper_PolyFillType.PFT_NEGATIVE,hxClipper_PolyFillType.PFT_NEGATIVE);
			if(solution.get_numChildren() == 1 && solution.get_children()[0].get_numChildren() > 0) {
				var outerNode = solution.get_children()[0];
				solution.get_children()[0] = outerNode.get_children()[0];
				solution.get_children()[0].mParent = solution;
				var _g = 1;
				var _g1 = outerNode.get_numChildren();
				while(_g < _g1) {
					var i = _g++;
					solution.addChild(outerNode.get_children()[i]);
				}
			} else {
				solution.clear();
			}
		}
	}
	,offsetPoint: function(j,k,joinType) {
		this.mSinA = this.mNormals[k].x * this.mNormals[j].y - this.mNormals[j].x * this.mNormals[k].y;
		if(Math.abs(this.mSinA * this.mDelta) < 1.0) {
			var cosA = this.mNormals[k].x * this.mNormals[j].x + this.mNormals[j].y * this.mNormals[k].y;
			if(cosA > 0) {
				this.mDestPoly.push(new hxClipper_IntPoint(hxClipper_ClipperOffset.round(this.mSrcPoly[j].x + this.mNormals[k].x * this.mDelta),hxClipper_ClipperOffset.round(this.mSrcPoly[j].y + this.mNormals[k].y * this.mDelta)));
				return k;
			}
		} else if(this.mSinA > 1.0) {
			this.mSinA = 1.0;
		} else if(this.mSinA < -1.0) {
			this.mSinA = -1.0;
		}
		if(this.mSinA * this.mDelta < 0) {
			this.mDestPoly.push(new hxClipper_IntPoint(hxClipper_ClipperOffset.round(this.mSrcPoly[j].x + this.mNormals[k].x * this.mDelta),hxClipper_ClipperOffset.round(this.mSrcPoly[j].y + this.mNormals[k].y * this.mDelta)));
			this.mDestPoly.push(this.mSrcPoly[j]);
			this.mDestPoly.push(new hxClipper_IntPoint(hxClipper_ClipperOffset.round(this.mSrcPoly[j].x + this.mNormals[j].x * this.mDelta),hxClipper_ClipperOffset.round(this.mSrcPoly[j].y + this.mNormals[j].y * this.mDelta)));
		} else {
			switch(joinType._hx_index) {
			case 0:
				this.doSquare(j,k);
				break;
			case 1:
				this.doRound(j,k);
				break;
			case 2:
				var r = 1 + (this.mNormals[j].x * this.mNormals[k].x + this.mNormals[j].y * this.mNormals[k].y);
				if(r >= this.mMiterLim) {
					this.doMiter(j,k,r);
				} else {
					this.doSquare(j,k);
				}
				break;
			}
		}
		return j;
	}
	,doSquare: function(j,k) {
		var dx = Math.tan(Math.atan2(this.mSinA,this.mNormals[k].x * this.mNormals[j].x + this.mNormals[k].y * this.mNormals[j].y) / 4);
		this.mDestPoly.push(new hxClipper_IntPoint(hxClipper_ClipperOffset.round(this.mSrcPoly[j].x + this.mDelta * (this.mNormals[k].x - this.mNormals[k].y * dx)),hxClipper_ClipperOffset.round(this.mSrcPoly[j].y + this.mDelta * (this.mNormals[k].y + this.mNormals[k].x * dx))));
		this.mDestPoly.push(new hxClipper_IntPoint(hxClipper_ClipperOffset.round(this.mSrcPoly[j].x + this.mDelta * (this.mNormals[j].x + this.mNormals[j].y * dx)),hxClipper_ClipperOffset.round(this.mSrcPoly[j].y + this.mDelta * (this.mNormals[j].y - this.mNormals[j].x * dx))));
	}
	,doMiter: function(j,k,r) {
		var q = this.mDelta / r;
		this.mDestPoly.push(new hxClipper_IntPoint(hxClipper_ClipperOffset.round(this.mSrcPoly[j].x + (this.mNormals[k].x + this.mNormals[j].x) * q),hxClipper_ClipperOffset.round(this.mSrcPoly[j].y + (this.mNormals[k].y + this.mNormals[j].y) * q)));
	}
	,doRound: function(j,k) {
		var a = Math.atan2(this.mSinA,this.mNormals[k].x * this.mNormals[j].x + this.mNormals[k].y * this.mNormals[j].y);
		var steps = Math.max(hxClipper_ClipperOffset.round(this.mStepsPerRad * Math.abs(a)) | 0,1) | 0;
		var x = this.mNormals[k].x;
		var y = this.mNormals[k].y;
		var x2;
		var _g = 0;
		while(_g < steps) {
			++_g;
			this.mDestPoly.push(new hxClipper_IntPoint(hxClipper_ClipperOffset.round(this.mSrcPoly[j].x + x * this.mDelta),hxClipper_ClipperOffset.round(this.mSrcPoly[j].y + y * this.mDelta)));
			x2 = x;
			x = x * this.mCos - this.mSin * y;
			y = x2 * this.mSin + y * this.mCos;
		}
		this.mDestPoly.push(new hxClipper_IntPoint(hxClipper_ClipperOffset.round(this.mSrcPoly[j].x + this.mNormals[j].x * this.mDelta),hxClipper_ClipperOffset.round(this.mSrcPoly[j].y + this.mNormals[j].y * this.mDelta)));
	}
	,__class__: hxClipper_ClipperOffset
};
var hxClipper_ClipperException = function(description) {
	this.desc = description;
};
hxClipper_ClipperException.__name__ = "hxClipper.ClipperException";
hxClipper_ClipperException.prototype = {
	desc: null
	,toString: function() {
		return this.desc;
	}
	,__class__: hxClipper_ClipperException
};
var hxClipper_InternalTools = function() { };
hxClipper_InternalTools.__name__ = "hxClipper.InternalTools";
hxClipper_InternalTools.clear = function(array) {
	array.length = 0;
};
hxClipper_InternalTools.xor = function(a,b) {
	if(!(a && !b)) {
		if(b) {
			return !a;
		} else {
			return false;
		}
	} else {
		return true;
	}
};
var hxClipper__$Clipper_Ref_$Impl_$ = {};
hxClipper__$Clipper_Ref_$Impl_$.__name__ = "hxClipper._Clipper.Ref_Impl_";
hxClipper__$Clipper_Ref_$Impl_$.__properties__ = {set_value:"set_value",get_value:"get_value"};
hxClipper__$Clipper_Ref_$Impl_$._new = function() {
	var this1 = new Array(1);
	var this2 = this1;
	return this2;
};
hxClipper__$Clipper_Ref_$Impl_$.get_value = function(this1) {
	return this1[0];
};
hxClipper__$Clipper_Ref_$Impl_$.set_value = function(this1,param) {
	return this1[0] = param;
};
hxClipper__$Clipper_Ref_$Impl_$.toString = function(this1) {
	return "@[" + Std.string(this1[0]) + "]";
};
hxClipper__$Clipper_Ref_$Impl_$.to = function(v) {
	var this1 = new Array(1);
	var this2 = this1;
	var ret = this2;
	ret[0] = v;
	return ret;
};
var js__$Boot_HaxeError = function(val) {
	Error.call(this);
	this.val = val;
	if(Error.captureStackTrace) {
		Error.captureStackTrace(this,js__$Boot_HaxeError);
	}
};
js__$Boot_HaxeError.__name__ = "js._Boot.HaxeError";
js__$Boot_HaxeError.__super__ = Error;
js__$Boot_HaxeError.prototype = $extend(Error.prototype,{
	val: null
	,__class__: js__$Boot_HaxeError
});
var js_Boot = function() { };
js_Boot.__name__ = "js.Boot";
js_Boot.getClass = function(o) {
	if(((o) instanceof Array) && o.__enum__ == null) {
		return Array;
	} else {
		var cl = o.__class__;
		if(cl != null) {
			return cl;
		}
		var name = js_Boot.__nativeClassName(o);
		if(name != null) {
			return js_Boot.__resolveNativeClass(name);
		}
		return null;
	}
};
js_Boot.__string_rec = function(o,s) {
	if(o == null) {
		return "null";
	}
	if(s.length >= 5) {
		return "<...>";
	}
	var t = typeof(o);
	if(t == "function" && (o.__name__ || o.__ename__)) {
		t = "object";
	}
	switch(t) {
	case "function":
		return "<function>";
	case "object":
		if(o.__enum__) {
			var e = $hxEnums[o.__enum__];
			var n = e.__constructs__[o._hx_index];
			var con = e[n];
			if(con.__params__) {
				s += "\t";
				var tmp = n + "(";
				var _g = [];
				var _g1 = 0;
				var _g2 = con.__params__;
				while(_g1 < _g2.length) {
					var p = _g2[_g1];
					++_g1;
					_g.push(js_Boot.__string_rec(o[p],s));
				}
				return tmp + _g.join(",") + ")";
			} else {
				return n;
			}
		}
		if(((o) instanceof Array)) {
			var l = o.length;
			var i;
			var str = "[";
			s += "\t";
			var _g3 = 0;
			var _g11 = l;
			while(_g3 < _g11) {
				var i1 = _g3++;
				str += (i1 > 0 ? "," : "") + js_Boot.__string_rec(o[i1],s);
			}
			str += "]";
			return str;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( e1 ) {
			haxe_CallStack.lastException = e1;
			var e2 = ((e1) instanceof js__$Boot_HaxeError) ? e1.val : e1;
			return "???";
		}
		if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
			var s2 = o.toString();
			if(s2 != "[object Object]") {
				return s2;
			}
		}
		var k = null;
		var str1 = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		for( var k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str1.length != 2) {
			str1 += ", \n";
		}
		str1 += s + k + " : " + js_Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str1 += "\n" + s + "}";
		return str1;
	case "string":
		return o;
	default:
		return String(o);
	}
};
js_Boot.__interfLoop = function(cc,cl) {
	if(cc == null) {
		return false;
	}
	if(cc == cl) {
		return true;
	}
	if(Object.prototype.hasOwnProperty.call(cc,"__interfaces__")) {
		var intf = cc.__interfaces__;
		var _g = 0;
		var _g1 = intf.length;
		while(_g < _g1) {
			var i = _g++;
			var i1 = intf[i];
			if(i1 == cl || js_Boot.__interfLoop(i1,cl)) {
				return true;
			}
		}
	}
	return js_Boot.__interfLoop(cc.__super__,cl);
};
js_Boot.__instanceof = function(o,cl) {
	if(cl == null) {
		return false;
	}
	switch(cl) {
	case Array:
		return ((o) instanceof Array);
	case Bool:
		return typeof(o) == "boolean";
	case Dynamic:
		return o != null;
	case Float:
		return typeof(o) == "number";
	case Int:
		if(typeof(o) == "number") {
			return ((o | 0) === o);
		} else {
			return false;
		}
		break;
	case String:
		return typeof(o) == "string";
	default:
		if(o != null) {
			if(typeof(cl) == "function") {
				if(((o) instanceof cl)) {
					return true;
				}
				if(js_Boot.__interfLoop(js_Boot.getClass(o),cl)) {
					return true;
				}
			} else if(typeof(cl) == "object" && js_Boot.__isNativeObj(cl)) {
				if(((o) instanceof cl)) {
					return true;
				}
			}
		} else {
			return false;
		}
		if(cl == Class ? o.__name__ != null : false) {
			return true;
		}
		if(cl == Enum ? o.__ename__ != null : false) {
			return true;
		}
		if(o.__enum__ != null) {
			return $hxEnums[o.__enum__] == cl;
		} else {
			return false;
		}
	}
};
js_Boot.__cast = function(o,t) {
	if(o == null || js_Boot.__instanceof(o,t)) {
		return o;
	} else {
		throw new js__$Boot_HaxeError("Cannot cast " + Std.string(o) + " to " + Std.string(t));
	}
};
js_Boot.__nativeClassName = function(o) {
	var name = js_Boot.__toStr.call(o).slice(8,-1);
	if(name == "Object" || name == "Function" || name == "Math" || name == "JSON") {
		return null;
	}
	return name;
};
js_Boot.__isNativeObj = function(o) {
	return js_Boot.__nativeClassName(o) != null;
};
js_Boot.__resolveNativeClass = function(name) {
	return $global[name];
};
var postite_display_Display = function(render) {
	this.renderEngine = render;
	this.renderables = new haxe_ds_ObjectMap();
};
postite_display_Display.__name__ = "postite.display.Display";
postite_display_Display.prototype = {
	renderables: null
	,renderEngine: null
	,clearRenderables: function() {
		var r = this.renderables.keys();
		while(r.hasNext()) {
			var r1 = r.next();
			this.renderables.remove(r1);
		}
	}
	,addRenderable: function(renderable) {
		this.renderables.set(renderable,true);
	}
	,removeRenderable: function(renderable) {
		this.renderables.remove(renderable);
	}
	,render: function() {
		this.renderEngine.clear();
		var renderable = this.renderables.keys();
		while(renderable.hasNext()) {
			var renderable1 = renderable.next();
			if(renderable1.enabled) {
				this.renderEngine.beforeEach();
				renderable1.render(this.renderEngine);
				this.renderEngine.afterEach();
			}
		}
	}
	,__class__: postite_display_Display
};
var postite_display_IRender = function() { };
postite_display_IRender.__name__ = "postite.display.IRender";
postite_display_IRender.prototype = {
	clear: null
	,beforeEach: null
	,afterEach: null
	,__class__: postite_display_IRender
};
var postite_display_IRenderable = function() { };
postite_display_IRenderable.__name__ = "postite.display.IRenderable";
postite_display_IRenderable.prototype = {
	enabled: null
	,render: null
	,__class__: postite_display_IRenderable
};
var postite_display_canvas_CanvasDisplay = function() {
	this.paused = false;
	this.display = new postite_display_Display(new postite_display_canvas_CanvasRender(this.createCanvas()));
};
postite_display_canvas_CanvasDisplay.__name__ = "postite.display.canvas.CanvasDisplay";
postite_display_canvas_CanvasDisplay.prototype = {
	_can: null
	,raf: null
	,paused: null
	,fps: null
	,onFrame: null
	,get_canvas: function() {
		if(this._can == null) {
			this.createCanvas();
		}
		return this._can;
	}
	,display: null
	,enterframe: function(fps) {
		var _gthis = this;
		this.fps = fps;
		var elapsed;
		var fpsInterval = 1000 / fps;
		var then = new Date();
		var now;
		var startTime = then;
		haxe_Log.trace(startTime,{ fileName : "src/postite/display/canvas/CanvasDisplay.hx", lineNumber : 38, className : "postite.display.canvas.CanvasDisplay", methodName : "enterframe"});
		var frame = 0;
		this.raf = ($_=window,$bind($_,$_.requestAnimationFrame));
		var animate = null;
		animate = function(timestamp) {
			if(_gthis.paused) {
				return;
			}
			_gthis.raf(animate);
			now = new Date();
			elapsed = now.getTime() - then.getTime();
			if(elapsed > fpsInterval) {
				then = new Date(now.getTime() - elapsed % fpsInterval);
				var x = frame += 1;
				_gthis.onFrame(x | 0);
				_gthis.display.render();
			}
		};
		this.onFrame = function(f) {
		};
		this.raf(animate);
	}
	,togPause: function() {
		haxe_Log.trace("paused=" + Std.string(this.paused),{ fileName : "src/postite/display/canvas/CanvasDisplay.hx", lineNumber : 69, className : "postite.display.canvas.CanvasDisplay", methodName : "togPause"});
		this.paused = !this.paused;
		if(!this.paused) {
			this.enterframe(this.fps);
		}
	}
	,clearRenderables: function() {
		this.display.clearRenderables();
	}
	,addRenderable: function(renderable) {
		this.display.addRenderable(renderable);
	}
	,removeRenderable: function(renderable) {
		this.display.removeRenderable(renderable);
	}
	,render: function() {
		this.display.render();
	}
	,createCanvas: function() {
		haxe_Log.trace("create canvas",{ fileName : "src/postite/display/canvas/CanvasDisplay.hx", lineNumber : 94, className : "postite.display.canvas.CanvasDisplay", methodName : "createCanvas"});
		this._can = window.document.createElement("canvas");
		this._can.width = window.innerWidth;
		this._can.height = window.innerHeight;
		window.document.body.appendChild(this._can);
		return this._can;
	}
	,remove: function() {
		this._can.remove();
		this._can = null;
	}
	,__class__: postite_display_canvas_CanvasDisplay
	,__properties__: {get_canvas:"get_canvas"}
};
var postite_display_canvas_CanvasRender = function(canvas) {
	this.canvas = canvas;
	this.ctx = canvas.getContext("2d",null);
	this.ctx.save();
};
postite_display_canvas_CanvasRender.__name__ = "postite.display.canvas.CanvasRender";
postite_display_canvas_CanvasRender.__interfaces__ = [postite_display_IRender];
postite_display_canvas_CanvasRender.prototype = {
	canvas: null
	,ctx: null
	,clear: function() {
		this.ctx.clearRect(0,0,this.canvas.width,this.canvas.height);
	}
	,beforeEach: function() {
		this.ctx.save();
	}
	,afterEach: function() {
		this.ctx.restore();
	}
	,__class__: postite_display_canvas_CanvasRender
};
var postite_dro_Box = function(rect) {
	this.color = 0;
	this.height = .0;
	this.width = .0;
	this.y = .0;
	this.x = .0;
	if(rect != null) {
		this.x = rect.x;
		this.y = rect.y;
		this.width = rect.width;
		this.height = rect.height;
	}
};
postite_dro_Box.__name__ = "postite.dro.Box";
postite_dro_Box.create = function(couleur) {
	couleur = couleur != null ? couleur : 13382400;
	var box = new postite_dro_Box({ x : 0., y : 0., width : 100., height : 100.});
	box.color = couleur;
	return box;
};
postite_dro_Box.prototype = {
	x: null
	,y: null
	,width: null
	,height: null
	,color: null
	,__class__: postite_dro_Box
};
var postite_dro_Coords = function() { };
postite_dro_Coords.__name__ = "postite.dro.Coords";
var postite_dro_Star = function() { };
postite_dro_Star.__name__ = "postite.dro.Star";
postite_dro_Star.__properties__ = {get_coords:"get_coords"};
postite_dro_Star.get_coords = function() {
	if(postite_dro_Star._coords == null) {
		postite_dro_Star._coords = [];
		var alpha = 2. * Math.PI / 10;
		var i = 11;
		while(i > 0) {
			var r = 50 * (i % 2 + 1) / 2;
			var omega = alpha * i;
			var pt = { x : r * Math.sin(omega) + 100, y : r * Math.cos(omega) + 100, press : 1. * i};
			postite_dro_Star._coords.push(postite_geom__$CoolPoint_Point_$Impl_$.fromPress(pt));
			--i;
		}
	}
	return postite_dro_Star._coords;
};
postite_dro_Star.assert = function() {
};
var postite_dro__$Couleur_Couleur_$Impl_$ = {};
postite_dro__$Couleur_Couleur_$Impl_$.__name__ = "postite.dro._Couleur.Couleur_Impl_";
postite_dro__$Couleur_Couleur_$Impl_$.__properties__ = {set_alpha:"set_alpha",get_alpha:"get_alpha",set_blue:"set_blue",get_blue:"get_blue",set_green:"set_green",get_green:"get_green",set_red:"set_red",get_red:"get_red",get_allColors:"get_allColors"};
postite_dro__$Couleur_Couleur_$Impl_$.get_allColors = function() {
	return [13382400,14659372,1769883,16016923,16768629,4137476,6856049];
};
postite_dro__$Couleur_Couleur_$Impl_$._new = function(value) {
	return value;
};
postite_dro__$Couleur_Couleur_$Impl_$.get_red = function(this1) {
	return (this1 & 16711680) >>> 16;
};
postite_dro__$Couleur_Couleur_$Impl_$.get_green = function(this1) {
	return (this1 & 65280) >>> 8;
};
postite_dro__$Couleur_Couleur_$Impl_$.get_blue = function(this1) {
	return this1 & 255;
};
postite_dro__$Couleur_Couleur_$Impl_$.get_alpha = function(this1) {
	return this1 >>> 24;
};
postite_dro__$Couleur_Couleur_$Impl_$.set_red = function(this1,value) {
	this1 = this1 >>> 24 << 24 | value << 16 | (this1 & 65280) >>> 8 << 8 | this1 & 255;
	return value;
};
postite_dro__$Couleur_Couleur_$Impl_$.set_green = function(this1,value) {
	this1 = this1 >>> 24 << 24 | (this1 & 16711680) >>> 16 << 16 | value << 8 | this1 & 255;
	return value;
};
postite_dro__$Couleur_Couleur_$Impl_$.set_blue = function(this1,value) {
	this1 = this1 >>> 24 << 24 | (this1 & 16711680) >>> 16 << 16 | (this1 & 65280) >>> 8 << 8 | value;
	return value;
};
postite_dro__$Couleur_Couleur_$Impl_$.set_alpha = function(this1,value) {
	this1 = value << 24 | (this1 & 16711680) >>> 16 << 16 | (this1 & 65280) >>> 8 << 8 | this1 & 255;
	return value;
};
postite_dro__$Couleur_Couleur_$Impl_$.random = function(alpha,red,green,blue) {
	var randomCouleur = 0;
	if(alpha == null) {
		var value = Math.round(255 * Math.random());
		randomCouleur = value << 24 | (randomCouleur & 16711680) >>> 16 << 16 | (randomCouleur & 65280) >>> 8 << 8 | randomCouleur & 255;
	} else {
		randomCouleur = alpha << 24 | (randomCouleur & 16711680) >>> 16 << 16 | (randomCouleur & 65280) >>> 8 << 8 | randomCouleur & 255;
	}
	if(red == null) {
		var value1 = Math.round(255 * Math.random());
		randomCouleur = randomCouleur >>> 24 << 24 | value1 << 16 | (randomCouleur & 65280) >>> 8 << 8 | randomCouleur & 255;
	} else {
		randomCouleur = randomCouleur >>> 24 << 24 | red << 16 | (randomCouleur & 65280) >>> 8 << 8 | randomCouleur & 255;
	}
	if(green == null) {
		var value2 = Math.round(255 * Math.random());
		randomCouleur = randomCouleur >>> 24 << 24 | (randomCouleur & 16711680) >>> 16 << 16 | value2 << 8 | randomCouleur & 255;
	} else {
		randomCouleur = randomCouleur >>> 24 << 24 | (randomCouleur & 16711680) >>> 16 << 16 | green << 8 | randomCouleur & 255;
	}
	if(blue == null) {
		var value3 = Math.round(255 * Math.random());
		randomCouleur = randomCouleur >>> 24 << 24 | (randomCouleur & 16711680) >>> 16 << 16 | (randomCouleur & 65280) >>> 8 << 8 | value3;
	} else {
		randomCouleur = randomCouleur >>> 24 << 24 | (randomCouleur & 16711680) >>> 16 << 16 | (randomCouleur & 65280) >>> 8 << 8 | blue;
	}
	return randomCouleur;
};
postite_dro__$Couleur_Couleur_$Impl_$.randomInRange = function(range) {
	return range[Std.random(range.length)];
};
postite_dro__$Couleur_Couleur_$Impl_$.fromString = function(s) {
	if(s.indexOf("#") == 0) {
		return postite_dro__$Couleur_Couleur_$Impl_$._new(Std.parseInt("0x" + s.substring(1,s.length)));
	} else if(s.indexOf("0x") == 0) {
		return postite_dro__$Couleur_Couleur_$Impl_$._new(Std.parseInt(s));
	}
	return postite_dro__$Couleur_Couleur_$Impl_$._new(0);
};
postite_dro__$Couleur_Couleur_$Impl_$.toFloat = function(n) {
	return n * 1.0;
};
postite_dro__$Couleur_Couleur_$Impl_$.fromFloat = function(n) {
	return postite_dro__$Couleur_Couleur_$Impl_$._new(n | 0);
};
postite_dro__$Couleur_Couleur_$Impl_$.mix = function(this1,color,strength) {
	var output = postite_dro__$Couleur_Couleur_$Impl_$._new(0);
	var value = Math.floor(_$UInt_UInt_$Impl_$.toFloat((this1 & 16711680) >>> 16) * (1 - strength) + _$UInt_UInt_$Impl_$.toFloat((color & 16711680) >>> 16) * strength);
	output = output >>> 24 << 24 | value << 16 | (output & 65280) >>> 8 << 8 | output & 255;
	var value1 = Math.floor(_$UInt_UInt_$Impl_$.toFloat((this1 & 65280) >>> 8) * (1 - strength) + _$UInt_UInt_$Impl_$.toFloat((color & 65280) >>> 8) * strength);
	output = output >>> 24 << 24 | (output & 16711680) >>> 16 << 16 | value1 << 8 | output & 255;
	var value2 = Math.floor(_$UInt_UInt_$Impl_$.toFloat(this1 & 255) * (1 - strength) + _$UInt_UInt_$Impl_$.toFloat(color & 255) * strength);
	output = output >>> 24 << 24 | (output & 16711680) >>> 16 << 16 | (output & 65280) >>> 8 << 8 | value2;
	var value3 = Math.floor(_$UInt_UInt_$Impl_$.toFloat(this1 >>> 24) * (1 - strength) + _$UInt_UInt_$Impl_$.toFloat(color >>> 24) * strength);
	output = value3 << 24 | (output & 16711680) >>> 16 << 16 | (output & 65280) >>> 8 << 8 | output & 255;
	return output;
};
postite_dro__$Couleur_Couleur_$Impl_$.add = function(this1,color) {
	return this1 + color;
};
postite_dro__$Couleur_Couleur_$Impl_$.darken = function(this1,strength) {
	return postite_dro__$Couleur_Couleur_$Impl_$.mix(this1,0,strength);
};
postite_dro__$Couleur_Couleur_$Impl_$.lighten = function(this1,strength) {
	return postite_dro__$Couleur_Couleur_$Impl_$.mix(this1,16777215,strength);
};
postite_dro__$Couleur_Couleur_$Impl_$.withAlpha = function(this1,perc) {
	this1 = perc << 24 | (this1 & 16711680) >>> 16 << 16 | (this1 & 65280) >>> 8 << 8 | this1 & 255;
	return perc;
};
postite_dro__$Couleur_Couleur_$Impl_$.toHex = function(c) {
	return "#" + StringTools.hex(c);
};
postite_dro__$Couleur_Couleur_$Impl_$.toString = function(this1) {
	return "0x" + StringTools.hex(this1,8);
};
var postite_dro_Dro = function() {
};
postite_dro_Dro.__name__ = "postite.dro.Dro";
postite_dro_Dro.droPoint = function(ctx,_point,col,opacity) {
	if(opacity == null) {
		opacity = 1.0;
	}
	ctx.beginPath();
	ctx.arc(_point.x,_point.y,_point.press / 2,0,2 * Math.PI,true);
	ctx.fillStyle = postite_dro__$Couleur_Couleur_$Impl_$.toHex(col);
	ctx.fill();
};
postite_dro_Dro.droBox = function(ctx,box) {
	box = box != null ? box : postite_dro_Box.create();
	ctx.beginPath();
	ctx.rect(box.x,box.y,box.width,box.height);
	ctx.fillStyle = postite_dro__$Couleur_Couleur_$Impl_$.toHex(box.color);
	ctx.fill();
	return box;
};
postite_dro_Dro.drawPoly = function(ctx,poly,col) {
	if(col == null) {
		col = "#000";
	}
	var p0 = poly[0];
	ctx.strokeStyle = col;
	ctx.moveTo(p0.x / 1,p0.y / 1);
	var _g = 1;
	var _g1 = poly.length;
	while(_g < _g1) {
		var i = _g++;
		var p = poly[i];
		ctx.lineTo(p.x / 1,p.y / 1);
	}
	ctx.lineTo(p0.x / 1,p0.y / 1);
	ctx.stroke();
	ctx.lineWidth = 1;
	ctx.strokeStyle = "#000";
};
postite_dro_Dro.drawPath = function(ctx,poly,col) {
	if(col == null) {
		col = "#000";
	}
	var p0 = poly[0];
	ctx.strokeStyle = col;
	ctx.moveTo(p0.x / 1,p0.y / 1);
	var _g = 1;
	var _g1 = poly.length;
	while(_g < _g1) {
		var i = _g++;
		var p = poly[i];
		ctx.lineTo(p.x / 1,p.y / 1);
	}
	ctx.stroke();
	ctx.lineWidth = 1;
	ctx.strokeStyle = "#000";
};
postite_dro_Dro.droSegments = function(ctx,segments,col,fillColor,opacity) {
	if(opacity == null) {
		opacity = 1.0;
	}
	if(col == null) {
		col = "#000";
	}
	ctx.strokeStyle = col;
	ctx.lineWidth = 3;
	var _g = 0;
	while(_g < segments.length) {
		var segment = segments[_g];
		++_g;
		ctx.moveTo(segment.x,segment.y);
		ctx.lineTo(segment.dx + segment.x,segment.dy + segment.y);
	}
	ctx.stroke();
};
postite_dro_Dro.droRect = function(ctx,rect,col) {
	if(col == null) {
		col = "#000";
	}
	ctx.strokeRect(rect.x,rect.y,rect.width,rect.height);
	ctx.stroke();
};
postite_dro_Dro.droPaths = function(ctx,paths,col) {
	if(col == null) {
		col = "#000";
	}
	ctx.strokeStyle = col;
	ctx.lineWidth = 5;
	var _g = 0;
	while(_g < paths.length) {
		var path = paths[_g];
		++_g;
		ctx.moveTo(path[0].x,path[0].y);
		var _g1 = 0;
		while(_g1 < path.length) {
			var point = path[_g1];
			++_g1;
			ctx.lineTo(point.x,point.y);
		}
		ctx.lineTo(path[0].x,path[0].y);
	}
	ctx.stroke();
};
postite_dro_Dro.prototype = {
	__class__: postite_dro_Dro
};
var postite_geom__$CoolPoint_Points_$Impl_$ = {};
postite_geom__$CoolPoint_Points_$Impl_$.__name__ = "postite.geom._CoolPoint.Points_Impl_";
postite_geom__$CoolPoint_Points_$Impl_$.fromArrayInt = function(a) {
	return a;
};
postite_geom__$CoolPoint_Points_$Impl_$.fromArrayPress = function(a) {
	return a;
};
var postite_geom__$CoolPoint_Point_$Impl_$ = {};
postite_geom__$CoolPoint_Point_$Impl_$.__name__ = "postite.geom._CoolPoint.Point_Impl_";
postite_geom__$CoolPoint_Point_$Impl_$._new = function(x,y) {
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	var this1 = { x : x, y : y};
	return this1;
};
postite_geom__$CoolPoint_Point_$Impl_$.add = function(this1,p) {
	return postite_geom__$CoolPoint_Point_$Impl_$._new(this1.x + p.x,this1.y + p.y);
};
postite_geom__$CoolPoint_Point_$Impl_$.fromAnonInt = function(a) {
	return postite_geom__$CoolPoint_Point_$Impl_$._new(a.x * 1.0,a.y * 1.0);
};
postite_geom__$CoolPoint_Point_$Impl_$.fromPress = function(p) {
	return postite_geom__$CoolPoint_Point_$Impl_$._new(p.x,p.y);
};
postite_geom__$CoolPoint_Point_$Impl_$.toPress = function(this1) {
	return { x : this1.x, y : this1.y, press : 10};
};
var postite_geom__$CoolPoint_CoolPoint_$Impl_$ = {};
postite_geom__$CoolPoint_CoolPoint_$Impl_$.__name__ = "postite.geom._CoolPoint.CoolPoint_Impl_";
postite_geom__$CoolPoint_CoolPoint_$Impl_$._new = function(x,y,p) {
	var this1 = { x : x, y : y, press : p};
	return this1;
};
postite_geom__$CoolPoint_CoolPoint_$Impl_$.fromArray = function(a) {
	return postite_geom__$CoolPoint_CoolPoint_$Impl_$._new(a[0],a[1],a[2]);
};
postite_geom__$CoolPoint_CoolPoint_$Impl_$.fromAnon = function(a) {
	return postite_geom__$CoolPoint_CoolPoint_$Impl_$._new(a.x,a.y);
};
postite_geom__$CoolPoint_CoolPoint_$Impl_$.fromAnonInt = function(a) {
	return postite_geom__$CoolPoint_CoolPoint_$Impl_$._new(a.x * 1.0,a.y * 1.0);
};
postite_geom__$CoolPoint_CoolPoint_$Impl_$.fromAnonIntPress = function(a) {
	return postite_geom__$CoolPoint_CoolPoint_$Impl_$._new(a.x * 1.0,a.y * 1.0);
};
postite_geom__$CoolPoint_CoolPoint_$Impl_$.toPoint = function(p) {
	return { x : p.x, y : p.y};
};
var postite_geom_GeomFilters = function() {
};
postite_geom_GeomFilters.__name__ = "postite.geom.GeomFilters";
postite_geom_GeomFilters.rectToArray = function(rect) {
	var a = [];
	a.push({ x : rect.x, y : rect.y});
	a.push({ x : rect.x + rect.width, y : rect.y});
	a.push({ x : rect.x + rect.width, y : rect.y + rect.height});
	a.push({ x : rect.x, y : rect.y + rect.height});
	a.push({ x : rect.x, y : rect.y});
	return a;
};
postite_geom_GeomFilters.clipOff = function(segs,scale) {
	if(scale == null) {
		scale = 10.0;
	}
	var ints = [];
	segs.map(function(seg) {
		ints.push(seg.x | 0);
		ints.push(seg.y | 0);
	});
	var paths = [];
	var path = postite_geom_GeomFilters.MakePolygonFromInts(ints);
	paths.push(path);
	var co = new hxClipper_ClipperOffset();
	co.addPaths(paths,hxClipper_JoinType.JT_MITER,hxClipper_EndType.ET_CLOSED_POLYGON);
	var solution = [];
	co.executePaths(solution,scale);
	return solution;
};
postite_geom_GeomFilters.MakePolygonFromInts = function(ints,scale) {
	if(scale == null) {
		scale = 1.0;
	}
	var i = 0;
	var p = [];
	while(i < ints.length) {
		p.push(new hxClipper_IntPoint(ints[i] * scale | 0,ints[i + 1] * scale | 0));
		i += 2;
	}
	return p;
};
postite_geom_GeomFilters.boundRectForPoly = function(poly) {
	var minX = poly[0].x;
	var maxX = poly[0].y;
	var minY = poly[0].y;
	var maxY = poly[0].y;
	var _g = 0;
	while(_g < poly.length) {
		var point = poly[_g];
		++_g;
		minX = Math.min(minX,point.x);
		maxX = Math.max(maxX,point.x);
		minY = Math.min(minY,point.y);
		maxY = Math.max(maxY,point.y);
	}
	var width = maxX - minX;
	var height = maxY - minY;
	return { x : minX, y : minY, width : width, height : height};
};
postite_geom_GeomFilters.isClosed = function(pts,simplify) {
	if(simplify == null) {
		simplify = true;
	}
	haxe_Log.trace(pts.length,{ fileName : "src/postite/geom/GeomFilters.hx", lineNumber : 78, className : "postite.geom.GeomFilters", methodName : "isClosed"});
	if(simplify) {
		var simplepts = postite_geom_Simplify.simplify(pts,5);
		var begin = new postite_geom_Segment(simplepts[0],simplepts[1]);
		var end = new postite_geom_Ray(simplepts[simplepts.length - 1],simplepts[simplepts.length - 2]);
		haxe_Log.trace("begin=" + Std.string(begin),{ fileName : "src/postite/geom/GeomFilters.hx", lineNumber : 85, className : "postite.geom.GeomFilters", methodName : "isClosed"});
		haxe_Log.trace(" end=" + Std.string(end),{ fileName : "src/postite/geom/GeomFilters.hx", lineNumber : 86, className : "postite.geom.GeomFilters", methodName : "isClosed"});
		var pt = null;
		var inter;
		var p = postite_geom__$CoolPoint_Point_$Impl_$._new(begin.x,begin.y);
		var p1 = postite_geom__$CoolPoint_Point_$Impl_$._new(begin.x + begin.dx,begin.y + begin.dy);
		if((end.dx * (p.y - end.y) - end.dy * (p.x - end.x)) * (end.dx * (p1.y - end.y) - end.dy * (p1.x - end.x)) > 0) {
			inter = null;
		} else {
			var u = (end.dx * (begin.y - end.y) - end.dy * (begin.x - end.x)) / (end.dy * begin.dx - end.dx * begin.dy);
			if(u < 0 || u > 1) {
				inter = null;
			} else {
				pt = postite_geom__$CoolPoint_Point_$Impl_$._new();
				pt.x = begin.x + u * begin.dx;
				pt.y = begin.y + u * begin.dy;
				inter = pt;
			}
		}
		if(inter != null) {
			haxe_Log.trace(inter,{ fileName : "src/postite/geom/GeomFilters.hx", lineNumber : 90, className : "postite.geom.GeomFilters", methodName : "isClosed"});
			haxe_Log.trace("side=" + (begin.dx * (inter.y - begin.y) - begin.dy * (inter.x - begin.x)),{ fileName : "src/postite/geom/GeomFilters.hx", lineNumber : 91, className : "postite.geom.GeomFilters", methodName : "isClosed"});
			return inter;
		}
		return null;
	}
	return null;
};
postite_geom_GeomFilters.isInsideRect = function(p,rect) {
	var minX = rect.x;
	var minY = rect.y;
	var maxX = rect.width + minX;
	var maxY = rect.height + minY;
	if(p.x < minX || p.x > maxX || p.y < minY || p.y > maxY) {
		return false;
	}
	return true;
};
postite_geom_GeomFilters.pnPoly = function(pt,pos,verts) {
	var c = false;
	var nvert = verts.length;
	var j = nvert - 1;
	var _g = 0;
	while(_g < nvert) {
		var i = _g++;
		if(verts[i].y + pos.y > pt.y != verts[j].y + pos.y > pt.y && pt.x < (verts[j].x + pos.x - (verts[i].x + pos.x)) * (pt.y - (verts[i].y + pos.y)) / (verts[j].y + pos.y - (verts[i].y + pos.y)) + (verts[i].x + pos.x)) {
			c = !c;
		}
		j = i;
	}
	return c;
};
postite_geom_GeomFilters.centroid = function(points) {
	var x = 0.0;
	var y = 0.0;
	var point = HxOverrides.iter(points);
	while(point.hasNext()) {
		var point1 = point.next();
		x += point1.x;
		y += point1.y;
	}
	x /= points.length;
	y /= points.length;
	return postite_geom__$CoolPoint_Point_$Impl_$._new(x,y);
};
postite_geom_GeomFilters.rotateBy = function(points,radians) {
	var c = postite_geom_GeomFilters.centroid(points);
	var cos = Math.cos(radians);
	var sin = Math.sin(radians);
	var newpoints = [];
	var point = HxOverrides.iter(points);
	while(point.hasNext()) {
		var point1 = point.next();
		var qx = (point1.x - c.x) * cos - (point1.y - c.y) * sin + c.x;
		var qy = (point1.x - c.x) * sin + (point1.y - c.y) * cos + c.y;
		newpoints[newpoints.length] = postite_geom__$CoolPoint_Point_$Impl_$._new(qx,qy);
	}
	return newpoints;
};
postite_geom_GeomFilters.translateTo = function(points,pt) {
	var c = postite_geom_GeomFilters.centroid(points);
	var newpoints = [];
	var point = HxOverrides.iter(points);
	while(point.hasNext()) {
		var point1 = point.next();
		var qx = point1.x + pt.x - c.x;
		var qy = point1.y + pt.y - c.y;
		newpoints[newpoints.length] = postite_geom__$CoolPoint_Point_$Impl_$._new(qx,qy);
	}
	return newpoints;
};
postite_geom_GeomFilters.prototype = {
	__class__: postite_geom_GeomFilters
};
var postite_geom_Geste = function() {
	this.NumUnistrokes = 16;
	this.Unistrokes = [];
	var a = postite_geom_UnistrokePatterns.unimap.keys();
	while(a.hasNext()) {
		var a1 = a.next();
		var _this = postite_geom_UnistrokePatterns.unimap;
		this.Unistrokes.push(new postite_geom_UniStroke(a1,__map_reserved[a1] != null ? _this.getReserved(a1) : _this.h[a1]));
	}
};
postite_geom_Geste.__name__ = "postite.geom.Geste";
postite_geom_Geste.Resample = function(origpoints,n) {
	var points = origpoints.slice();
	var I = postite_geom_Geste.PathLength(points) / (n - 1);
	var D = 0.0;
	var newpoints = [points[0]];
	var i = 1;
	var _g = 0;
	while(_g < points.length) {
		++_g;
		var d = postite_geom_Geste.Distance(points[i - 1],points[i]);
		if(D + d >= I) {
			var qx = points[i - 1].x + (I - D) / d * (points[i].x - points[i - 1].x);
			var qy = points[i - 1].y + (I - D) / d * (points[i].y - points[i - 1].y);
			var q = postite_geom__$CoolPoint_Point_$Impl_$._new(qx,qy);
			newpoints.push(q);
			points.slice(i);
			points.splice(i,0,q);
			D = 0.0;
		} else {
			D += d;
		}
		if(i < points.length - 1) {
			++i;
		}
	}
	if(newpoints.length == n - 1) {
		newpoints[newpoints.length] = postite_geom__$CoolPoint_Point_$Impl_$._new(points[points.length - 1].x,points[points.length - 1].y);
	}
	return newpoints;
};
postite_geom_Geste.IndicativeAngle = function(points) {
	var c = postite_geom_Geste.Centroid(points);
	return Math.atan2(c.y - points[0].y,c.x - points[0].x);
};
postite_geom_Geste.RotateBy = function(points,radians) {
	return postite_geom_GeomFilters.rotateBy(points,radians);
};
postite_geom_Geste.ScaleTo = function(points,size) {
	var B = postite_geom_Geste.BoundingBox(points);
	var newpoints = [];
	var point = HxOverrides.iter(points);
	while(point.hasNext()) {
		var point1 = point.next();
		var qx = point1.x * (size / B.width);
		var qy = point1.y * (size / B.height);
		newpoints[newpoints.length] = postite_geom__$CoolPoint_Point_$Impl_$._new(qx,qy);
	}
	return newpoints;
};
postite_geom_Geste.TranslateTo = function(points,pt) {
	return postite_geom_GeomFilters.translateTo(points,pt);
};
postite_geom_Geste.Vectorize = function(points) {
	var sum = 0.0;
	var vector = [];
	var point = HxOverrides.iter(points);
	while(point.hasNext()) {
		var point1 = point.next();
		vector[vector.length] = point1.x;
		vector[vector.length] = point1.y;
		sum += point1.x * point1.x + point1.y * point1.y;
	}
	var magnitude = Math.sqrt(sum);
	var _g = 0;
	var _g1 = vector.length;
	while(_g < _g1) {
		var i = _g++;
		vector[i] /= magnitude;
	}
	return vector;
};
postite_geom_Geste.OptimalCosineDistance = function(v1,v2) {
	var a = 0.0;
	var b = 0.0;
	var end = v1.length;
	var _g_index = 0;
	while(_g_index < end) {
		var i = (_g_index += 2) - 2;
		try {
			a += v1[i] * v2[i] + v1[i + 1] * v2[i + 1];
			b += v1[i] * v2[i + 1] - v1[i + 1] * v2[i];
		} catch( msg ) {
			haxe_CallStack.lastException = msg;
			haxe_Log.trace("eer" + Std.string(((msg) instanceof js__$Boot_HaxeError) ? msg.val : msg),{ fileName : "src/postite/geom/Geste.hx", lineNumber : 211, className : "postite.geom.Geste", methodName : "OptimalCosineDistance"});
		}
	}
	var angle = Math.atan(b / a);
	return Math.acos(a * Math.cos(angle) + b * Math.sin(angle));
};
postite_geom_Geste.DistanceAtBestAngle = function(points,t,a,b,threshold) {
	var x1 = postite_geom_Geste.Phi * a + (1.0 - postite_geom_Geste.Phi) * b;
	var f1 = postite_geom_Geste.DistanceAtAngle(points,t,x1);
	var x2 = (1.0 - postite_geom_Geste.Phi) * a + postite_geom_Geste.Phi * b;
	var f2 = postite_geom_Geste.DistanceAtAngle(points,t,x2);
	while(Math.abs(b - a) > threshold) if(f1 < f2) {
		b = x2;
		x2 = x1;
		f2 = f1;
		x1 = postite_geom_Geste.Phi * a + (1.0 - postite_geom_Geste.Phi) * b;
		f1 = postite_geom_Geste.DistanceAtAngle(points,t,x1);
	} else {
		a = x1;
		x1 = x2;
		f1 = f2;
		x2 = (1.0 - postite_geom_Geste.Phi) * a + postite_geom_Geste.Phi * b;
		f2 = postite_geom_Geste.DistanceAtAngle(points,t,x2);
	}
	return Math.min(f1,f2);
};
postite_geom_Geste.DistanceAtAngle = function(points,t,radians) {
	var newpoints = postite_geom_Geste.RotateBy(points,radians);
	return postite_geom_Geste.PathDistance(newpoints,t.Points);
};
postite_geom_Geste.Centroid = function(points) {
	return postite_geom_GeomFilters.centroid(points);
};
postite_geom_Geste.BoundingBox = function(points) {
	var minX = Infinity;
	var maxX = -Infinity;
	var minY = Infinity;
	var maxY = -Infinity;
	var _g = 0;
	while(_g < points.length) {
		var point = points[_g];
		++_g;
		minX = Math.min(minX,point.x);
		minY = Math.min(minY,point.y);
		maxX = Math.max(maxX,point.x);
		maxY = Math.max(maxY,point.y);
	}
	return { x : minX, y : minY, width : maxX - minX, height : maxY - minY};
};
postite_geom_Geste.PathDistance = function(pts1,pts2) {
	var d = 0.0;
	var _g = 0;
	var _g1 = pts1.length;
	while(_g < _g1) {
		var i = _g++;
		d += postite_geom_Geste.Distance(pts1[i],pts2[i]);
	}
	return d / pts1.length;
};
postite_geom_Geste.PathLength = function(points) {
	var d = 0.0;
	var _g = 1;
	var _g1 = points.length;
	while(_g < _g1) {
		var i = _g++;
		d += postite_geom_Geste.Distance(points[i - 1],points[i]);
	}
	return d;
};
postite_geom_Geste.Distance = function(p1,p2) {
	var dx = p2.x - p1.x;
	var dy = p2.y - p1.y;
	return Math.sqrt(dx * dx + dy * dy);
};
postite_geom_Geste.Deg2Rad = function(d) {
	return d * Math.PI / 180.0;
};
postite_geom_Geste.prototype = {
	NumUnistrokes: null
	,Unistrokes: null
	,Recognize: function(points,useProtractor) {
		var t0 = new Date();
		points = postite_geom_Geste.Resample(points,postite_geom_Geste.NumPoints);
		var radians = postite_geom_Geste.IndicativeAngle(points);
		points = postite_geom_Geste.RotateBy(points,-radians);
		points = postite_geom_Geste.ScaleTo(points,postite_geom_Geste.SquareSize);
		points = postite_geom_Geste.TranslateTo(points,postite_geom_Geste.Origin);
		var vector = postite_geom_Geste.Vectorize(points);
		var b = Infinity;
		haxe_Log.trace(this.Unistrokes.length,{ fileName : "src/postite/geom/Geste.hx", lineNumber : 38, className : "postite.geom.Geste", methodName : "Recognize"});
		var u = -1;
		var _g = 0;
		var _g1 = this.Unistrokes.length;
		while(_g < _g1) {
			var i = _g++;
			var d;
			if(useProtractor) {
				d = postite_geom_Geste.OptimalCosineDistance(this.Unistrokes[i].Vector,vector);
			} else {
				d = postite_geom_Geste.DistanceAtBestAngle(points,this.Unistrokes[i],-postite_geom_Geste.AngleRange,postite_geom_Geste.AngleRange,postite_geom_Geste.AnglePrecision);
			}
			if(d < b) {
				b = d;
				u = i;
			}
		}
		var t1 = new Date();
		var t = -t0.getTime();
		var newdate = new Date(t1.getTime() + t);
		if(u == -1) {
			return new postite_geom_Result("No match.",0.0,newdate);
		} else {
			return new postite_geom_Result(this.Unistrokes[u].Name,useProtractor ? 1.0 / b : 1.0 - b / postite_geom_Geste.HalfDiagonal,newdate);
		}
	}
	,addGesture: function(name,points) {
		this.Unistrokes[this.Unistrokes.length] = new postite_geom_UniStroke(name,points);
		var num = 0;
		var _g = 0;
		var _g1 = this.Unistrokes.length;
		while(_g < _g1) {
			var i = _g++;
			if(this.Unistrokes[i].Name == name) {
				++num;
			}
		}
		return num;
	}
	,DeleteUserGestures: function() {
		this.Unistrokes = [];
		return this.NumUnistrokes;
	}
	,__class__: postite_geom_Geste
};
var postite_geom_UniStroke = function(name,points) {
	this.Name = name;
	this.Points = postite_geom_Geste.Resample(points,postite_geom_Geste.NumPoints);
	var radians = postite_geom_Geste.IndicativeAngle(this.Points);
	this.Points = postite_geom_Geste.RotateBy(this.Points,-radians);
	this.Points = postite_geom_Geste.ScaleTo(this.Points,postite_geom_Geste.SquareSize);
	this.Points = postite_geom_Geste.TranslateTo(this.Points,postite_geom_Geste.Origin);
	this.Vector = postite_geom_Geste.Vectorize(this.Points);
};
postite_geom_UniStroke.__name__ = "postite.geom.UniStroke";
postite_geom_UniStroke.prototype = {
	Name: null
	,Points: null
	,radians: null
	,Vector: null
	,__class__: postite_geom_UniStroke
};
var postite_geom_Result = function(name,score,ms) {
	this.Name = name;
	this.Score = score;
	this.Time = ms;
};
postite_geom_Result.__name__ = "postite.geom.Result";
postite_geom_Result.prototype = {
	Name: null
	,Score: null
	,Time: null
	,__class__: postite_geom_Result
};
var postite_geom__$PolyGon_PolyGon_$Impl_$ = {};
postite_geom__$PolyGon_PolyGon_$Impl_$.__name__ = "postite.geom._PolyGon.PolyGon_Impl_";
postite_geom__$PolyGon_PolyGon_$Impl_$.__properties__ = {get_length:"get_length",get_points:"get_points"};
postite_geom__$PolyGon_PolyGon_$Impl_$.toPoints = function(this1) {
	return this1;
};
postite_geom__$PolyGon_PolyGon_$Impl_$.get_length = function(this1) {
	return this1.length;
};
postite_geom__$PolyGon_PolyGon_$Impl_$.get_points = function(this1) {
	return this1;
};
postite_geom__$PolyGon_PolyGon_$Impl_$._new = function(points) {
	var this1 = points == null ? [] : points;
	return this1;
};
postite_geom__$PolyGon_PolyGon_$Impl_$.convexHull = function(this1) {
	if(this1.length < 3) {
		return this1;
	}
	this1.sort(function(a,b) {
		if(a.x == b.x) {
			if(a.y < b.y) {
				return -1;
			} else {
				return 1;
			}
		} else if(a.x < b.x) {
			return -1;
		} else {
			return 1;
		}
	});
	var hull = [];
	var k = 0;
	var _g = 0;
	while(_g < this1.length) {
		var p = this1[_g];
		++_g;
		while(true) {
			var tmp;
			if(k >= 2) {
				var p1 = hull[k - 2];
				var p2 = hull[k - 1];
				tmp = (p2.x - p1.x) * (p.y - p1.y) - (p2.y - p1.y) * (p.x - p1.x) <= 0;
			} else {
				tmp = false;
			}
			if(!tmp) {
				break;
			}
			--k;
		}
		hull[k++] = p;
	}
	var i = this1.length - 2;
	var len = k + 1;
	while(i >= 0) {
		var p3 = this1[i];
		while(true) {
			var tmp1;
			if(k >= len) {
				var p11 = hull[k - 2];
				var p21 = hull[k - 1];
				tmp1 = (p21.x - p11.x) * (p3.y - p11.y) - (p21.y - p11.y) * (p3.x - p11.x) <= 0;
			} else {
				tmp1 = false;
			}
			if(!tmp1) {
				break;
			}
			--k;
		}
		hull[k++] = p3;
		--i;
	}
	while(hull.length >= k) hull.pop();
	return hull;
};
postite_geom__$PolyGon_PolyGon_$Impl_$.xSort = function(this1,a,b) {
	if(a.x == b.x) {
		if(a.y < b.y) {
			return -1;
		} else {
			return 1;
		}
	}
	if(a.x < b.x) {
		return -1;
	} else {
		return 1;
	}
};
postite_geom__$PolyGon_PolyGon_$Impl_$.contains = function(this1,p,isConvex) {
	if(isConvex == null) {
		isConvex = false;
	}
	if(isConvex) {
		var p1 = this1[this1.length - 1];
		var _g = 0;
		while(_g < this1.length) {
			var p2 = this1[_g];
			++_g;
			if((p2.x - p1.x) * (p.y - p1.y) - (p2.y - p1.y) * (p.x - p1.x) < 0) {
				return false;
			}
			p1 = p2;
		}
		return true;
	} else {
		var w = 0;
		var p11 = this1[this1.length - 1];
		var _g1 = 0;
		while(_g1 < this1.length) {
			var p21 = this1[_g1];
			++_g1;
			if(p21.y <= p.y) {
				if(p11.y > p.y && (p11.x - p21.x) * (p.y - p21.y) - (p11.y - p21.y) * (p.x - p21.x) > 0) {
					++w;
				}
			} else if(p11.y <= p.y && (p11.x - p21.x) * (p.y - p21.y) - (p11.y - p21.y) * (p.x - p21.x) < 0) {
				--w;
			}
			p11 = p21;
		}
		return w != 0;
	}
};
postite_geom__$PolyGon_PolyGon_$Impl_$.side = function(this1,p1,p2,t) {
	return (p2.x - p1.x) * (t.y - p1.y) - (p2.y - p1.y) * (t.x - p1.x);
};
postite_geom__$PolyGon_PolyGon_$Impl_$.optimize = function(this1,epsilon) {
	var out = [];
	postite_geom__$PolyGon_PolyGon_$Impl_$.optimizeRec(this1,0,this1.length - 1,out,epsilon);
	return out;
};
postite_geom__$PolyGon_PolyGon_$Impl_$.optimizeRec = function(points,start,end,out,epsilon) {
	var dmax = 0.;
	var pfirst = points[start];
	var plast = points[end];
	var index = 0;
	var _g = start + 1;
	while(_g < end) {
		var i = _g++;
		var p0 = points[i];
		var A = p0.x - pfirst.x;
		var B = p0.y - pfirst.y;
		var C = plast.x - pfirst.x;
		var D = plast.y - pfirst.y;
		var dot = A * C + B * D;
		var dist = C * C + D * D;
		var param = -1.;
		if(dist != 0) {
			param = dot / dist;
		}
		var xx;
		var yy;
		if(param < 0) {
			xx = pfirst.x;
			yy = pfirst.y;
		} else if(param > 1) {
			xx = plast.x;
			yy = plast.y;
		} else {
			xx = pfirst.x + param * C;
			yy = pfirst.y + param * D;
		}
		var dx = p0.x - xx;
		var dy = p0.y - yy;
		var d = dx * dx + dy * dy;
		if(d > dmax) {
			index = i;
			dmax = d;
		}
	}
	if(dmax >= epsilon * epsilon) {
		postite_geom__$PolyGon_PolyGon_$Impl_$.optimizeRec(points,start,index,out,epsilon);
		out.pop();
		postite_geom__$PolyGon_PolyGon_$Impl_$.optimizeRec(points,index,end,out,epsilon);
	} else {
		out.push(points[start]);
		out.push(points[end]);
	}
};
var postite_geom_Segment = function(p1,p2) {
	this.x = p1.x;
	this.y = p1.y;
	this.dx = p2.x - this.x;
	this.dy = p2.y - this.y;
	this.lenSq = this.dx * this.dx + this.dy * this.dy;
	this.invLenSq = 1 / this.lenSq;
};
postite_geom_Segment.__name__ = "postite.geom.Segment";
postite_geom_Segment.prototype = {
	x: null
	,y: null
	,dx: null
	,dy: null
	,lenSq: null
	,invLenSq: null
	,setPoints: function(p1,p2) {
		this.x = p1.x;
		this.y = p1.y;
		this.dx = p2.x - this.x;
		this.dy = p2.y - this.y;
		this.lenSq = this.dx * this.dx + this.dy * this.dy;
		this.invLenSq = 1 / this.lenSq;
	}
	,side: function(p) {
		return this.dx * (p.y - this.y) - this.dy * (p.x - this.x);
	}
	,distanceSq: function(p) {
		var px = p.x - this.x;
		var py = p.y - this.y;
		var t = px * this.dx + py * this.dy;
		if(t < 0) {
			return px * px + py * py;
		} else if(t > this.lenSq) {
			var kx = p.x - (this.x + this.dx);
			var ky = p.y - (this.y + this.dy);
			return kx * kx + ky * ky;
		} else {
			var tl2 = t * this.invLenSq;
			var pdx = this.x + tl2 * this.dx - p.x;
			var pdy = this.y + tl2 * this.dy - p.y;
			return pdx * pdx + pdy * pdy;
		}
	}
	,distance: function(p) {
		var px = p.x - this.x;
		var py = p.y - this.y;
		var t = px * this.dx + py * this.dy;
		var tmp;
		if(t < 0) {
			tmp = px * px + py * py;
		} else if(t > this.lenSq) {
			var kx = p.x - (this.x + this.dx);
			var ky = p.y - (this.y + this.dy);
			tmp = kx * kx + ky * ky;
		} else {
			var tl2 = t * this.invLenSq;
			var pdx = this.x + tl2 * this.dx - p.x;
			var pdy = this.y + tl2 * this.dy - p.y;
			tmp = pdx * pdx + pdy * pdy;
		}
		return Math.sqrt(tmp);
	}
	,project: function(p) {
		var px = p.x - this.x;
		var py = p.y - this.y;
		var t = px * this.dx + py * this.dy;
		if(t < 0) {
			return postite_geom__$CoolPoint_Point_$Impl_$._new(this.x,this.y);
		} else if(t > this.lenSq) {
			return postite_geom__$CoolPoint_Point_$Impl_$._new(this.x + this.dx,this.y + this.dy);
		} else {
			var tl2 = t * this.invLenSq;
			return postite_geom__$CoolPoint_Point_$Impl_$._new(this.x + tl2 * this.dx,this.y + tl2 * this.dy);
		}
	}
	,lineIntersection: function(r,pt) {
		var p = postite_geom__$CoolPoint_Point_$Impl_$._new(this.x,this.y);
		var p1 = postite_geom__$CoolPoint_Point_$Impl_$._new(this.x + this.dx,this.y + this.dy);
		if((r.dx * (p.y - r.y) - r.dy * (p.x - r.x)) * (r.dx * (p1.y - r.y) - r.dy * (p1.x - r.x)) > 0) {
			return null;
		}
		var u = (r.dx * (this.y - r.y) - r.dy * (this.x - r.x)) / (r.dy * this.dx - r.dx * this.dy);
		if(u < 0 || u > 1) {
			return null;
		}
		if(pt == null) {
			pt = postite_geom__$CoolPoint_Point_$Impl_$._new();
		}
		pt.x = this.x + u * this.dx;
		pt.y = this.y + u * this.dy;
		return pt;
	}
	,__class__: postite_geom_Segment
};
var postite_geom_Ray = function(p1,p2) {
	this.x = p1.x;
	this.y = p1.y;
	this.dx = p2.x - this.x;
	this.dy = p2.y - this.y;
};
postite_geom_Ray.__name__ = "postite.geom.Ray";
postite_geom_Ray.prototype = {
	x: null
	,y: null
	,dx: null
	,dy: null
	,setPoints: function(p1,p2) {
		this.x = p1.x;
		this.y = p1.y;
		this.dx = p2.x - this.x;
		this.dy = p2.y - this.y;
	}
	,side: function(p) {
		return this.dx * (p.y - this.y) - this.dy * (p.x - this.x);
	}
	,getPos: function() {
		return postite_geom__$CoolPoint_Point_$Impl_$._new(this.x,this.y);
	}
	,getDir: function() {
		return postite_geom__$CoolPoint_Point_$Impl_$._new(this.dx,this.dy);
	}
	,__class__: postite_geom_Ray
};
var postite_geom_Simplify = function() {
};
postite_geom_Simplify.__name__ = "postite.geom.Simplify";
postite_geom_Simplify.getSquareDistance = function(p1,p2) {
	var dx = p1.x - p2.x;
	var dy = p1.y - p2.y;
	return dx * dx + dy * dy;
};
postite_geom_Simplify.getSquareSegmentDistance = function(p,p1,p2) {
	var x = p1.x;
	var y = p1.y;
	var dx = p2.x - x;
	var dy = p2.y - y;
	var t;
	if(dx != 0 || dy != 0) {
		t = ((p.x - x) * dx + (p.y - y) * dy) / (dx * dx + dy * dy);
		if(t > 1) {
			x = p2.x;
			y = p2.y;
		} else if(t > 0) {
			x += dx * t;
			y += dy * t;
		}
	}
	dx = p.x - x;
	dy = p.y - y;
	return dx * dx + dy * dy;
};
postite_geom_Simplify.simplifyRadialDistance = function(points,sqTolerance) {
	var len = points.length;
	var point = null;
	var prevPoint = points[0];
	var newPoints = null;
	newPoints = [prevPoint];
	var _g = 0;
	while(_g < len) {
		var i = _g++;
		point = points[i];
		if(postite_geom_Simplify.getSquareDistance(point,prevPoint) > sqTolerance) {
			newPoints.push(point);
			prevPoint = point;
		}
	}
	if(prevPoint != point) {
		newPoints.push(point);
	}
	return newPoints;
};
postite_geom_Simplify.simplifyDouglasPeucker = function(points,sqTolerance) {
	var len = points.length;
	var markers = null;
	markers = [];
	var first = 0;
	var last = len - 1;
	var maxSqDist;
	var sqDist;
	var index = 0;
	var firstStack = null;
	firstStack = [];
	var lastStack = null;
	lastStack = [];
	var newPoints = null;
	newPoints = [];
	markers[last] = 1;
	markers[0] = 1;
	while(last != null) {
		maxSqDist = 0;
		var _g = first;
		var _g1 = last;
		while(_g < _g1) {
			var i = _g++;
			sqDist = postite_geom_Simplify.getSquareSegmentDistance(points[i],points[first],points[last]);
			if(sqDist > maxSqDist) {
				index = i;
				maxSqDist = sqDist;
			}
		}
		if(maxSqDist > sqTolerance) {
			markers[index] = 1;
			firstStack.push(first);
			lastStack.push(index);
			firstStack.push(index);
			lastStack.push(last);
		}
		first = firstStack.pop();
		last = lastStack.pop();
	}
	var _g2 = 0;
	while(_g2 < len) {
		var i1 = _g2++;
		if(markers[i1] != null) {
			newPoints.push(points[i1]);
		}
	}
	return newPoints;
};
postite_geom_Simplify.simplify = function(points,tolerance,highestQuality) {
	if(highestQuality == null) {
		highestQuality = false;
	}
	if(tolerance == null) {
		tolerance = 1;
	}
	var sqTolerance = tolerance * tolerance;
	if(!highestQuality) {
		points = postite_geom_Simplify.simplifyRadialDistance(points,sqTolerance);
	}
	points = postite_geom_Simplify.simplifyDouglasPeucker(points,sqTolerance);
	return points;
};
postite_geom_Simplify.prototype = {
	__class__: postite_geom_Simplify
};
var postite_geom_UnistrokePatterns = function() { };
postite_geom_UnistrokePatterns.__name__ = "postite.geom.UnistrokePatterns";
var postite_geom_units__$Angle_Degree_$Impl_$ = {};
postite_geom_units__$Angle_Degree_$Impl_$.__name__ = "postite.geom.units._Angle.Degree_Impl_";
postite_geom_units__$Angle_Degree_$Impl_$.fromFloat = function(value) {
	return value;
};
postite_geom_units__$Angle_Degree_$Impl_$.fromInt = function(value) {
	var this1 = value;
	return this1;
};
postite_geom_units__$Angle_Degree_$Impl_$.toFloat = function(this1) {
	return this1;
};
postite_geom_units__$Angle_Degree_$Impl_$._new = function(value) {
	return value;
};
postite_geom_units__$Angle_Degree_$Impl_$.toRadian = function(this1) {
	return this1 * postite_geom_units__$Angle_Degree_$Impl_$.ofUnit / postite_geom_units__$Angle_Degree_$Impl_$.dividerRadian;
};
postite_geom_units__$Angle_Degree_$Impl_$.toString = function(this1) {
	return "" + this1 + "°";
};
var postite_geom_units__$Angle_Radian_$Impl_$ = {};
postite_geom_units__$Angle_Radian_$Impl_$.__name__ = "postite.geom.units._Angle.Radian_Impl_";
postite_geom_units__$Angle_Radian_$Impl_$.fromFloat = function(value) {
	return value;
};
postite_geom_units__$Angle_Radian_$Impl_$.fromInt = function(value) {
	var this1 = value;
	return this1;
};
postite_geom_units__$Angle_Radian_$Impl_$._new = function(value) {
	return value;
};
postite_geom_units__$Angle_Radian_$Impl_$.toDegree = function(this1) {
	return this1 * postite_geom_units__$Angle_Radian_$Impl_$.ofUnit / postite_geom_units__$Angle_Radian_$Impl_$.dividerDegree;
};
postite_geom_units__$Angle_Radian_$Impl_$.toString = function(this1) {
	return "" + this1 + "rad";
};
postite_geom_units__$Angle_Radian_$Impl_$.toFloat = function(this1) {
	return this1;
};
var postite_math_Matools = function() { };
postite_math_Matools.__name__ = "postite.math.Matools";
postite_math_Matools.lerp = function(a,b,k) {
	return a + k * (b - a);
};
postite_math_Matools.inverseLerp = function(min,max,value) {
	if(Math.abs(max - min) < 1e-10) {
		return min;
	}
	return (value - min) / (max - min);
};
postite_math_Matools.scale = function(old,neo,OldValue) {
	var OldRange = old[1] - old[0];
	var NewRange = neo[1] - neo[0];
	var NewValue = (OldValue - old[0]) * NewRange / OldRange + neo[0];
	return NewValue;
};
postite_math_Matools.wrap = function(x,n) {
	if(x < 0) {
		return n - -x % n;
	} else {
		return x % n;
	}
};
postite_math_Matools.clamp = function(f,min,max) {
	if(max == null) {
		max = 1.;
	}
	if(min == null) {
		min = 0.;
	}
	if(f < min) {
		return min;
	} else if(f > max) {
		return max;
	} else {
		return f;
	}
};
postite_math_Matools.getRandomInt = function(min,max) {
	min = Math.ceil(min);
	max = Math.floor(max);
	return Math.floor(Math.random() * (max - min + 1)) + min;
};
var postite_uz__$Debug_LogLevel_$Impl_$ = {};
postite_uz__$Debug_LogLevel_$Impl_$.__name__ = "postite.uz._Debug.LogLevel_Impl_";
postite_uz__$Debug_LogLevel_$Impl_$.toString = function(this1) {
	switch(this1) {
	case 20:
		return "INF";
	case 30:
		return "WRN";
	case 40:
		return "ERR";
	case 50:
		return "!!!";
	default:
		return "DBG";
	}
};
postite_uz__$Debug_LogLevel_$Impl_$.format = function(this1,s,color,pos) {
	if(color == null) {
		color = true;
	}
	HxOverrides.dateStr(new Date());
	var p = StringTools.lpad(pos.fileName," ",postite_uz__$Debug_LogLevel_$Impl_$.longest) + ":" + StringTools.lpad(pos.lineNumber == null ? "null" : "" + pos.lineNumber," ",4) + ":";
	var l;
	switch(this1) {
	case 20:
		l = "INF";
		break;
	case 30:
		l = "WRN";
		break;
	case 40:
		l = "ERR";
		break;
	case 50:
		l = "!!!";
		break;
	default:
		l = "DBG";
	}
	return "" + p + " " + l + ":" + s;
};
var postite_uz_Debug = function() { };
postite_uz_Debug.__name__ = "postite.uz.Debug";
postite_uz_Debug.log = function(msg,level,pos) {
	if(level == null) {
		level = 20;
	}
	switch(level) {
	case 10:
		var tmp = window.console;
		var s = Std.string(msg);
		HxOverrides.dateStr(new Date());
		var p = StringTools.lpad(pos.fileName," ",postite_uz__$Debug_LogLevel_$Impl_$.longest) + ":" + StringTools.lpad(pos.lineNumber == null ? "null" : "" + pos.lineNumber," ",4) + ":";
		var l;
		switch(level) {
		case 20:
			l = "INF";
			break;
		case 30:
			l = "WRN";
			break;
		case 40:
			l = "ERR";
			break;
		case 50:
			l = "!!!";
			break;
		default:
			l = "DBG";
		}
		tmp.log("" + p + " " + l + ":" + s);
		break;
	case 20:
		var tmp1 = window.console;
		var s1 = Std.string(msg);
		HxOverrides.dateStr(new Date());
		var p1 = StringTools.lpad(pos.fileName," ",postite_uz__$Debug_LogLevel_$Impl_$.longest) + ":" + StringTools.lpad(pos.lineNumber == null ? "null" : "" + pos.lineNumber," ",4) + ":";
		var l1;
		switch(level) {
		case 20:
			l1 = "INF";
			break;
		case 30:
			l1 = "WRN";
			break;
		case 40:
			l1 = "ERR";
			break;
		case 50:
			l1 = "!!!";
			break;
		default:
			l1 = "DBG";
		}
		tmp1.log("" + p1 + " " + l1 + ":" + s1);
		break;
	case 30:
		var tmp2 = window.console;
		var s2 = Std.string(msg);
		HxOverrides.dateStr(new Date());
		var p2 = StringTools.lpad(pos.fileName," ",postite_uz__$Debug_LogLevel_$Impl_$.longest) + ":" + StringTools.lpad(pos.lineNumber == null ? "null" : "" + pos.lineNumber," ",4) + ":";
		var l2;
		switch(level) {
		case 20:
			l2 = "INF";
			break;
		case 30:
			l2 = "WRN";
			break;
		case 40:
			l2 = "ERR";
			break;
		case 50:
			l2 = "!!!";
			break;
		default:
			l2 = "DBG";
		}
		tmp2.warn("" + p2 + " " + l2 + ":" + s2);
		break;
	case 40:
		var tmp3 = window.console;
		var s3 = Std.string(msg);
		HxOverrides.dateStr(new Date());
		var p3 = StringTools.lpad(pos.fileName," ",postite_uz__$Debug_LogLevel_$Impl_$.longest) + ":" + StringTools.lpad(pos.lineNumber == null ? "null" : "" + pos.lineNumber," ",4) + ":";
		var l3;
		switch(level) {
		case 20:
			l3 = "INF";
			break;
		case 30:
			l3 = "WRN";
			break;
		case 40:
			l3 = "ERR";
			break;
		case 50:
			l3 = "!!!";
			break;
		default:
			l3 = "DBG";
		}
		tmp3.error("" + p3 + " " + l3 + ":" + s3);
		break;
	case 50:
		var tmp4 = window.console;
		var s4 = Std.string(msg);
		HxOverrides.dateStr(new Date());
		var p4 = StringTools.lpad(pos.fileName," ",postite_uz__$Debug_LogLevel_$Impl_$.longest) + ":" + StringTools.lpad(pos.lineNumber == null ? "null" : "" + pos.lineNumber," ",4) + ":";
		var l4;
		switch(level) {
		case 20:
			l4 = "INF";
			break;
		case 30:
			l4 = "WRN";
			break;
		case 40:
			l4 = "ERR";
			break;
		case 50:
			l4 = "!!!";
			break;
		default:
			l4 = "DBG";
		}
		tmp4.error("" + p4 + " " + l4 + ":" + s4);
		break;
	}
	return msg;
};
postite_uz_Debug.warn = function(msg,level,pos) {
	if(level == null) {
		level = 20;
	}
	return postite_uz_Debug.log(msg,30,pos);
};
postite_uz_Debug.error = function(msg,level,pos) {
	if(level == null) {
		level = 20;
	}
	return postite_uz_Debug.log(msg,40,pos);
};
var postite_uz_StepIterator = function(start,end,step) {
	this.index = start;
	this.end = end;
	this.step = step;
};
postite_uz_StepIterator.__name__ = "postite.uz.StepIterator";
postite_uz_StepIterator.prototype = {
	end: null
	,step: null
	,index: null
	,hasNext: function() {
		return this.index < this.end;
	}
	,next: function() {
		var tmp = this;
		return (tmp.index += this.step) - this.step;
	}
	,__class__: postite_uz_StepIterator
};
var pst_It = function() { };
pst_It.__name__ = "pst.It";
var tests_IRenderMock = function() {
	this.enabled = true;
};
tests_IRenderMock.__name__ = "tests.IRenderMock";
tests_IRenderMock.__interfaces__ = [postite_display_IRenderable];
tests_IRenderMock.prototype = {
	enabled: null
	,render: function(r) {
	}
	,__class__: tests_IRenderMock
};
var tests_TestAll = function() { };
tests_TestAll.__name__ = "tests.TestAll";
tests_TestAll.main = function() {
	postite_uz_Debug.log("op",null,{ fileName : "tests/TestAll.hx", lineNumber : 10, className : "tests.TestAll", methodName : "main"});
	haxe_Log.trace("hop",{ fileName : "tests/TestAll.hx", lineNumber : 12, className : "tests.TestAll", methodName : "main"});
	var runner = new utest_Runner();
	runner.addCase(new tests_TestApp());
	runner.addCase(new tests_TestGesteStatics());
	runner.addCase(new tests_TestResample());
	runner.addCase(new tests_TestGeste());
	runner.addCase(new tests_TestCouleur());
	runner.addCase(new tests_TestDisplay());
	runner.addCase(new tests_TestVector2d());
	utest_ui_Report.create(runner);
	runner.run();
};
var tests_TestVrac = function(dims,can) {
	this.enabled = true;
	this.can = can;
};
tests_TestVrac.__name__ = "tests.TestVrac";
tests_TestVrac.__interfaces__ = [postite_display_IRenderable];
tests_TestVrac.prototype = {
	can: null
	,enabled: null
	,render: function(r) {
		var seg = new postite_geom_Segment({ x : 20.0, y : 10.0},{ x : 210.0, y : 220.0});
		postite_dro_Dro.droSegments(r.ctx,[seg]);
		var pt = postite_geom__$CoolPoint_CoolPoint_$Impl_$._new(20,130,10);
		postite_dro_Dro.droPoint(r.ctx,pt);
		var p = postite_geom__$CoolPoint_CoolPoint_$Impl_$.toPoint(pt);
		haxe_Log.trace(seg.dx * (p.y - seg.y) - seg.dy * (p.x - seg.x),{ fileName : "tests/TestApp.hx", lineNumber : 34, className : "tests.TestVrac", methodName : "render"});
	}
	,__class__: tests_TestVrac
};
var tests_TestApp = function() {
	haxe_Log.trace("new Appli",{ fileName : "tests/TestApp.hx", lineNumber : 45, className : "tests.TestApp", methodName : "new"});
	var can = window.document.createElement("canvas");
	can.width = 800;
	can.height = 800;
	window.document.body.appendChild(can);
	var display = new postite_display_canvas_CanvasDisplay();
	var mock = new tests_TestVrac(null,can);
	display.addRenderable(mock);
	display.enterframe(12);
};
tests_TestApp.__name__ = "tests.TestApp";
tests_TestApp.main = function() {
	new tests_TestApp();
};
tests_TestApp.prototype = {
	raf: null
	,__class__: tests_TestApp
};
var utest_ITest = function() { };
utest_ITest.__name__ = "utest.ITest";
var utest_Test = function() {
};
utest_Test.__name__ = "utest.Test";
utest_Test.__interfaces__ = [utest_ITest];
utest_Test.prototype = {
	__initializeUtest__: function() {
		var init = { tests : [], accessories : { }};
		return init;
	}
	,__class__: utest_Test
};
var tests_TestCouleur = function() {
	this.pureYellow = 16776960;
	this.pureBlue = 255;
	this.pureGreen = 65280;
	this.pureRed = 16711680;
	utest_Test.call(this);
};
tests_TestCouleur.__name__ = "tests.TestCouleur";
tests_TestCouleur.__super__ = utest_Test;
tests_TestCouleur.prototype = $extend(utest_Test.prototype,{
	pureRed: null
	,pureGreen: null
	,pureBlue: null
	,pureYellow: null
	,testNoir: function() {
		utest_Assert.equals(13382400,13382400,null,{ fileName : "tests/TestCouleur.hx", lineNumber : 12, className : "tests.TestCouleur", methodName : "testNoir"});
		utest_Assert.equals("#CC3300",postite_dro__$Couleur_Couleur_$Impl_$.toHex(13382400),null,{ fileName : "tests/TestCouleur.hx", lineNumber : 13, className : "tests.TestCouleur", methodName : "testNoir"});
	}
	,testDarken: function() {
		utest_Assert.equals(8355711,postite_dro__$Couleur_Couleur_$Impl_$.darken(16777215,.5),null,{ fileName : "tests/TestCouleur.hx", lineNumber : 17, className : "tests.TestCouleur", methodName : "testDarken"});
	}
	,testLighten: function() {
		utest_Assert.equals(8355711,postite_dro__$Couleur_Couleur_$Impl_$.lighten(0,.5),null,{ fileName : "tests/TestCouleur.hx", lineNumber : 20, className : "tests.TestCouleur", methodName : "testLighten"});
	}
	,testMix: function() {
		var middleColor = postite_dro__$Couleur_Couleur_$Impl_$._new(0);
		middleColor = middleColor >>> 24 << 24 | 127 << 16 | (middleColor & 65280) >>> 8 << 8 | middleColor & 255;
		middleColor = middleColor >>> 24 << 24 | (middleColor & 16711680) >>> 16 << 16 | 127 << 8 | middleColor & 255;
		utest_Assert.equals(middleColor,postite_dro__$Couleur_Couleur_$Impl_$.mix(this.pureRed,this.pureGreen,.5),null,{ fileName : "tests/TestCouleur.hx", lineNumber : 28, className : "tests.TestCouleur", methodName : "testMix"});
		utest_Assert.equals(8355711,postite_dro__$Couleur_Couleur_$Impl_$.add(postite_dro__$Couleur_Couleur_$Impl_$.fromString("#00007F"),middleColor),null,{ fileName : "tests/TestCouleur.hx", lineNumber : 30, className : "tests.TestCouleur", methodName : "testMix"});
	}
	,testAdd: function() {
		utest_Assert.equals(this.pureYellow,postite_dro__$Couleur_Couleur_$Impl_$.add(this.pureRed,this.pureGreen),null,{ fileName : "tests/TestCouleur.hx", lineNumber : 35, className : "tests.TestCouleur", methodName : "testAdd"});
	}
	,testAlpha: function() {
		var middleColor = postite_dro__$Couleur_Couleur_$Impl_$._new(0);
		middleColor = middleColor >>> 24 << 24 | 127 << 16 | (middleColor & 65280) >>> 8 << 8 | middleColor & 255;
		middleColor = middleColor >>> 24 << 24 | (middleColor & 16711680) >>> 16 << 16 | 127 << 8 | middleColor & 255;
		haxe_Log.trace("middle color bef=" + postite_dro__$Couleur_Couleur_$Impl_$.toString(middleColor),{ fileName : "tests/TestCouleur.hx", lineNumber : 42, className : "tests.TestCouleur", methodName : "testAlpha"});
		middleColor = 20 << 24 | (middleColor & 16711680) >>> 16 << 16 | (middleColor & 65280) >>> 8 << 8 | middleColor & 255;
		haxe_Log.trace("middle color=" + postite_dro__$Couleur_Couleur_$Impl_$.toString(middleColor),{ fileName : "tests/TestCouleur.hx", lineNumber : 44, className : "tests.TestCouleur", methodName : "testAlpha"});
		utest_Assert.equals(20,middleColor,null,{ fileName : "tests/TestCouleur.hx", lineNumber : 45, className : "tests.TestCouleur", methodName : "testAlpha"});
	}
	,__initializeUtest__: function() {
		var _gthis = this;
		var init = utest_Test.prototype.__initializeUtest__.call(this);
		init.tests.push({ name : "testNoir", execute : function() {
			_gthis.testNoir();
			return utest_Async.getResolved();
		}});
		init.tests.push({ name : "testDarken", execute : function() {
			_gthis.testDarken();
			return utest_Async.getResolved();
		}});
		init.tests.push({ name : "testLighten", execute : function() {
			_gthis.testLighten();
			return utest_Async.getResolved();
		}});
		init.tests.push({ name : "testMix", execute : function() {
			_gthis.testMix();
			return utest_Async.getResolved();
		}});
		init.tests.push({ name : "testAdd", execute : function() {
			_gthis.testAdd();
			return utest_Async.getResolved();
		}});
		init.tests.push({ name : "testAlpha", execute : function() {
			_gthis.testAlpha();
			return utest_Async.getResolved();
		}});
		return init;
	}
	,__class__: tests_TestCouleur
});
var tests_TestDisplay = function() {
	this.counter = 0;
	utest_Test.call(this);
};
tests_TestDisplay.__name__ = "tests.TestDisplay";
tests_TestDisplay.__super__ = utest_Test;
tests_TestDisplay.prototype = $extend(utest_Test.prototype,{
	counter: null
	,Opp: null
	,display: null
	,setupClass: function() {
	}
	,setup: function() {
		var _gthis = this;
		this.display = new postite_display_canvas_CanvasDisplay();
		this.Opp = new postite_display_canvas_CanvasDisplay();
		this.counter = 0;
		this.display.addRenderable(new tests_IRenderMock());
		this.display.enterframe(12);
		this.display.onFrame = function(frame) {
			_gthis.counter = frame;
		};
	}
	,testigTested: function(async) {
		var _gthis = this;
		haxe_Timer.delay(function() {
			utest_Assert.equals(24,_gthis.counter,null,{ fileName : "tests/TestDisplay.hx", lineNumber : 25, className : "tests.TestDisplay", methodName : "testigTested"});
			async.done({ fileName : "tests/TestDisplay.hx", lineNumber : 26, className : "tests.TestDisplay", methodName : "testigTested"});
		},2000);
	}
	,testPause: function(async) {
		var _gthis = this;
		this.display.togPause();
		haxe_Timer.delay(function() {
			utest_Assert.equals(0,_gthis.counter,null,{ fileName : "tests/TestDisplay.hx", lineNumber : 34, className : "tests.TestDisplay", methodName : "testPause"});
			async.done({ fileName : "tests/TestDisplay.hx", lineNumber : 35, className : "tests.TestDisplay", methodName : "testPause"});
		},1000);
	}
	,testAfterPause: function(async) {
		var _gthis = this;
		this.display.togPause();
		haxe_Timer.delay(function() {
			_gthis.display.togPause();
			utest_Assert.equals(12,_gthis.counter,null,{ fileName : "tests/TestDisplay.hx", lineNumber : 43, className : "tests.TestDisplay", methodName : "testAfterPause"});
			async.done({ fileName : "tests/TestDisplay.hx", lineNumber : 44, className : "tests.TestDisplay", methodName : "testAfterPause"});
		},1000);
	}
	,teardown: function() {
		this.display.remove();
	}
	,__initializeUtest__: function() {
		var _gthis = this;
		var init = utest_Test.prototype.__initializeUtest__.call(this);
		init.accessories.setupClass = function() {
			return utest_Async.getResolved();
		};
		init.accessories.setup = function() {
			_gthis.setup();
			return utest_Async.getResolved();
		};
		init.tests.push({ name : "testigTested", execute : function() {
			var async = new utest_Async(2500);
			_gthis.testigTested(async);
			return async;
		}});
		init.tests.push({ name : "testPause", execute : function() {
			var async1 = new utest_Async(1200);
			_gthis.testPause(async1);
			return async1;
		}});
		init.tests.push({ name : "testAfterPause", execute : function() {
			var async2 = new utest_Async(1200);
			_gthis.testAfterPause(async2);
			return async2;
		}});
		init.accessories.teardown = function() {
			_gthis.teardown();
			return utest_Async.getResolved();
		};
		return init;
	}
	,__class__: tests_TestDisplay
});
var tests_TestGeste = function() {
	utest_Test.call(this);
};
tests_TestGeste.__name__ = "tests.TestGeste";
tests_TestGeste.__super__ = utest_Test;
tests_TestGeste.prototype = $extend(utest_Test.prototype,{
	geste: null
	,stroke: null
	,setup: function() {
		this.geste = new postite_geom_Geste();
		var _this = postite_geom_UnistrokePatterns.unimap;
		this.stroke = __map_reserved["circle"] != null ? _this.getReserved("circle") : _this.h["circle"];
	}
	,testRecognise: function() {
		var t = this.geste.Recognize(this.stroke,false);
		haxe_Log.trace(t.Score,{ fileName : "tests/TestGeste.hx", lineNumber : 19, className : "tests.TestGeste", methodName : "testRecognise"});
		utest_Assert.equals("circle",t.Name,null,{ fileName : "tests/TestGeste.hx", lineNumber : 20, className : "tests.TestGeste", methodName : "testRecognise"});
	}
	,testRecogniseCustom: function() {
		var clocl = postite_dro_Coords.clockcircle.map(function(p) {
			return postite_geom__$CoolPoint_CoolPoint_$Impl_$.fromAnon({ x : p.x, y : p.y});
		});
		var t = this.geste.Recognize(postite_geom__$CoolPoint_Points_$Impl_$.fromArrayPress(clocl),false);
		haxe_Log.trace(t.Score,{ fileName : "tests/TestGeste.hx", lineNumber : 27, className : "tests.TestGeste", methodName : "testRecogniseCustom"});
		utest_Assert.notEquals("circle",t.Name,null,{ fileName : "tests/TestGeste.hx", lineNumber : 28, className : "tests.TestGeste", methodName : "testRecogniseCustom"});
	}
	,testRecogniseCustomnotClock: function() {
		var clocl = postite_dro_Coords.notclockcircle.map(function(p) {
			return postite_geom__$CoolPoint_CoolPoint_$Impl_$.fromAnon({ x : p.x, y : p.y});
		});
		var t = this.geste.Recognize(postite_geom__$CoolPoint_Points_$Impl_$.fromArrayPress(clocl),false);
		haxe_Log.trace(t.Score,{ fileName : "tests/TestGeste.hx", lineNumber : 36, className : "tests.TestGeste", methodName : "testRecogniseCustomnotClock"});
		haxe_Log.trace(t.Name,{ fileName : "tests/TestGeste.hx", lineNumber : 37, className : "tests.TestGeste", methodName : "testRecogniseCustomnotClock"});
		utest_Assert.equals("circle",t.Name,null,{ fileName : "tests/TestGeste.hx", lineNumber : 38, className : "tests.TestGeste", methodName : "testRecogniseCustomnotClock"});
	}
	,testRecogniseCustomnotClockProtactor: function() {
		var clocl = postite_dro_Coords.notclockcircle.map(function(p) {
			return postite_geom__$CoolPoint_CoolPoint_$Impl_$.fromAnon({ x : p.x, y : p.y});
		});
		var t = this.geste.Recognize(postite_geom__$CoolPoint_Points_$Impl_$.fromArrayPress(clocl),true);
		haxe_Log.trace(t.Score,{ fileName : "tests/TestGeste.hx", lineNumber : 46, className : "tests.TestGeste", methodName : "testRecogniseCustomnotClockProtactor"});
		haxe_Log.trace(t.Name,{ fileName : "tests/TestGeste.hx", lineNumber : 47, className : "tests.TestGeste", methodName : "testRecogniseCustomnotClockProtactor"});
		utest_Assert.equals("circle",t.Name,null,{ fileName : "tests/TestGeste.hx", lineNumber : 48, className : "tests.TestGeste", methodName : "testRecogniseCustomnotClockProtactor"});
	}
	,__initializeUtest__: function() {
		var _gthis = this;
		var init = utest_Test.prototype.__initializeUtest__.call(this);
		init.accessories.setup = function() {
			_gthis.setup();
			return utest_Async.getResolved();
		};
		init.tests.push({ name : "testRecognise", execute : function() {
			_gthis.testRecognise();
			return utest_Async.getResolved();
		}});
		init.tests.push({ name : "testRecogniseCustom", execute : function() {
			_gthis.testRecogniseCustom();
			return utest_Async.getResolved();
		}});
		init.tests.push({ name : "testRecogniseCustomnotClock", execute : function() {
			_gthis.testRecogniseCustomnotClock();
			return utest_Async.getResolved();
		}});
		init.tests.push({ name : "testRecogniseCustomnotClockProtactor", execute : function() {
			_gthis.testRecogniseCustomnotClockProtactor();
			return utest_Async.getResolved();
		}});
		return init;
	}
	,__class__: tests_TestGeste
});
var tests_TestGesteStatics = function() {
	utest_Test.call(this);
};
tests_TestGesteStatics.__name__ = "tests.TestGesteStatics";
tests_TestGesteStatics.getMaxPoint = function(rr) {
	var getMax = function(a,b) {
		if(a.x > b.x || a.y > b.y) {
			return a;
		}
		return b;
	};
	return Lambda.fold(rr,getMax,rr[0]);
};
tests_TestGesteStatics.toPoints = function(val) {
	return val.map(function(p) {
		return { x : p, y : p};
	});
};
tests_TestGesteStatics.__super__ = utest_Test;
tests_TestGesteStatics.prototype = $extend(utest_Test.prototype,{
	setup: function() {
		tests_TestGesteStatics.path = postite_dro_Coords.small;
	}
	,testTest: function() {
		utest_Assert.isTrue(true,null,{ fileName : "tests/TestGesteStatics.hx", lineNumber : 24, className : "tests.TestGesteStatics", methodName : "testTest"});
	}
	,testDeg2Rad: function() {
		var p = postite_geom_Geste.Deg2Rad(45.0);
		utest_Assert.floatEquals(0.785398,p,null,null,{ fileName : "tests/TestGesteStatics.hx", lineNumber : 29, className : "tests.TestGesteStatics", methodName : "testDeg2Rad"});
	}
	,testDistance: function() {
		var d = postite_geom_Geste.Distance(tests_TestGesteStatics.p1,tests_TestGesteStatics.p2);
		utest_Assert.floatEquals(282.84,d,1e-2,null,{ fileName : "tests/TestGesteStatics.hx", lineNumber : 34, className : "tests.TestGesteStatics", methodName : "testDistance"});
	}
	,testPathLength: function() {
		var p = postite_geom_Geste.PathLength([tests_TestGesteStatics.p1,tests_TestGesteStatics.p2]);
		utest_Assert.floatEquals(282.84,p,1e-2,null,{ fileName : "tests/TestGesteStatics.hx", lineNumber : 39, className : "tests.TestGesteStatics", methodName : "testPathLength"});
	}
	,testPathDistance: function() {
		var p = postite_geom_Geste.PathDistance([tests_TestGesteStatics.p1,tests_TestGesteStatics.p2],postite_geom_Geste.TranslateTo(tests_TestGesteStatics.seg,postite_geom__$CoolPoint_Point_$Impl_$.fromAnonInt({ x : 400, y : 400})));
		utest_Assert.floatEquals(223.60679774997897,p,1e-2,null,{ fileName : "tests/TestGesteStatics.hx", lineNumber : 44, className : "tests.TestGesteStatics", methodName : "testPathDistance"});
	}
	,testBound: function() {
		var r = postite_geom_Geste.BoundingBox(tests_TestGesteStatics.rec);
		utest_Assert.same({ x : 0, y : 0, width : 100, height : 100},r,null,null,null,{ fileName : "tests/TestGesteStatics.hx", lineNumber : 49, className : "tests.TestGesteStatics", methodName : "testBound"});
	}
	,testCentroid: function() {
		var p = postite_geom_Geste.Centroid([tests_TestGesteStatics.p1,tests_TestGesteStatics.p2]);
		utest_Assert.same({ x : 200, y : 300},p,null,null,null,{ fileName : "tests/TestGesteStatics.hx", lineNumber : 59, className : "tests.TestGesteStatics", methodName : "testCentroid"});
	}
	,testDistanceAtAngle: function() {
		var dis = postite_geom_Geste.DistanceAtAngle(tests_TestGesteStatics.seg,{ Points : tests_TestGesteStatics.seg},45);
		utest_Assert.equals(137.79376055283058,dis,null,{ fileName : "tests/TestGesteStatics.hx", lineNumber : 64, className : "tests.TestGesteStatics", methodName : "testDistanceAtAngle"});
	}
	,testBestDistanceAtAngle: function() {
		var r = postite_geom_Geste.DistanceAtBestAngle(tests_TestGesteStatics.seg,{ Points : tests_TestGesteStatics.seg},45.0,90.0,1.0);
		utest_Assert.equals(7.265398696948875,r,null,{ fileName : "tests/TestGesteStatics.hx", lineNumber : 69, className : "tests.TestGesteStatics", methodName : "testBestDistanceAtAngle"});
	}
	,testRotateBy: function() {
		var r = postite_geom_Geste.RotateBy(tests_TestGesteStatics.seg,45.0);
		utest_Assert.same(r[0],{ x : 232.55815357163885, y : 162.37744866481518},null,null,null,{ fileName : "tests/TestGesteStatics.hx", lineNumber : 74, className : "tests.TestGesteStatics", methodName : "testRotateBy"});
	}
	,testOptimalCosineDistance: function() {
		var o = postite_geom_Geste.OptimalCosineDistance([0,1],[1,0]);
		utest_Assert.floatEquals(0,o,null,null,{ fileName : "tests/TestGesteStatics.hx", lineNumber : 82, className : "tests.TestGesteStatics", methodName : "testOptimalCosineDistance"});
	}
	,testVectorize: function() {
		var v = postite_geom_Geste.Vectorize(tests_TestGesteStatics.seg);
		utest_Assert.isTrue(v.length > 1,null,{ fileName : "tests/TestGesteStatics.hx", lineNumber : 87, className : "tests.TestGesteStatics", methodName : "testVectorize"});
	}
	,testTranslateTo: function() {
		var t = postite_geom_Geste.TranslateTo(tests_TestGesteStatics.seg,postite_geom__$CoolPoint_Point_$Impl_$.fromAnonInt({ x : 350, y : 350}));
		utest_Assert.same([{ x : 250, y : 250},{ x : 450, y : 450}],t,null,null,null,{ fileName : "tests/TestGesteStatics.hx", lineNumber : 92, className : "tests.TestGesteStatics", methodName : "testTranslateTo"});
	}
	,testScaleTo: function() {
		var s = postite_geom_Geste.ScaleTo(postite_geom__$CoolPoint_Points_$Impl_$.fromArrayInt(tests_TestGesteStatics.rec),300);
		var upPoint = tests_TestGesteStatics.getMaxPoint(s);
		var up = Math.min(upPoint.x,upPoint.y);
		utest_Assert.equals(300,up,null,{ fileName : "tests/TestGesteStatics.hx", lineNumber : 106, className : "tests.TestGesteStatics", methodName : "testScaleTo"});
	}
	,testIndicativeAngle: function() {
		var ind = postite_geom_Geste.IndicativeAngle(tests_TestGesteStatics.seg);
		utest_Assert.floatEquals(0.7853981633974483,ind,null,null,{ fileName : "tests/TestGesteStatics.hx", lineNumber : 111, className : "tests.TestGesteStatics", methodName : "testIndicativeAngle"});
	}
	,testresample: function() {
		var t = tests_TestGesteStatics.seg.slice();
		var r = postite_geom_Geste.Resample(t,3);
		utest_Assert.equals(3,r.length,null,{ fileName : "tests/TestGesteStatics.hx", lineNumber : 117, className : "tests.TestGesteStatics", methodName : "testresample"});
	}
	,testresamplebiggerArray: function() {
		var v = tests_TestGesteStatics.seg.slice();
		v = postite_geom_Geste.TranslateTo(v,postite_geom__$CoolPoint_Point_$Impl_$.fromAnonInt({ x : 700, y : 600}));
		var t = tests_TestGesteStatics.seg.slice();
		var con = t.concat(v);
		var r = postite_geom_Geste.Resample(con,3);
		utest_Assert.equals(4,con.length,null,{ fileName : "tests/TestGesteStatics.hx", lineNumber : 128, className : "tests.TestGesteStatics", methodName : "testresamplebiggerArray"});
		utest_Assert.equals(3,r.length,null,{ fileName : "tests/TestGesteStatics.hx", lineNumber : 129, className : "tests.TestGesteStatics", methodName : "testresamplebiggerArray"});
	}
	,testResampleSimple: function() {
		var dix = tests_TestGesteStatics.toPoints([1,2,3,4,5,6,7,8,9,10]);
		var n = postite_geom_Geste.Resample(postite_geom__$CoolPoint_Points_$Impl_$.fromArrayInt(dix),20);
		utest_Assert.equals(20,n.length,null,{ fileName : "tests/TestGesteStatics.hx", lineNumber : 135, className : "tests.TestGesteStatics", methodName : "testResampleSimple"});
		utest_Assert.equals(dix[0],n[0],null,{ fileName : "tests/TestGesteStatics.hx", lineNumber : 136, className : "tests.TestGesteStatics", methodName : "testResampleSimple"});
	}
	,__initializeUtest__: function() {
		var _gthis = this;
		var init = utest_Test.prototype.__initializeUtest__.call(this);
		init.accessories.setup = function() {
			_gthis.setup();
			return utest_Async.getResolved();
		};
		init.tests.push({ name : "testTest", execute : function() {
			_gthis.testTest();
			return utest_Async.getResolved();
		}});
		init.tests.push({ name : "testDeg2Rad", execute : function() {
			_gthis.testDeg2Rad();
			return utest_Async.getResolved();
		}});
		init.tests.push({ name : "testDistance", execute : function() {
			_gthis.testDistance();
			return utest_Async.getResolved();
		}});
		init.tests.push({ name : "testPathLength", execute : function() {
			_gthis.testPathLength();
			return utest_Async.getResolved();
		}});
		init.tests.push({ name : "testPathDistance", execute : function() {
			_gthis.testPathDistance();
			return utest_Async.getResolved();
		}});
		init.tests.push({ name : "testBound", execute : function() {
			_gthis.testBound();
			return utest_Async.getResolved();
		}});
		init.tests.push({ name : "testCentroid", execute : function() {
			_gthis.testCentroid();
			return utest_Async.getResolved();
		}});
		init.tests.push({ name : "testDistanceAtAngle", execute : function() {
			_gthis.testDistanceAtAngle();
			return utest_Async.getResolved();
		}});
		init.tests.push({ name : "testBestDistanceAtAngle", execute : function() {
			_gthis.testBestDistanceAtAngle();
			return utest_Async.getResolved();
		}});
		init.tests.push({ name : "testRotateBy", execute : function() {
			_gthis.testRotateBy();
			return utest_Async.getResolved();
		}});
		init.tests.push({ name : "testOptimalCosineDistance", execute : function() {
			_gthis.testOptimalCosineDistance();
			return utest_Async.getResolved();
		}});
		init.tests.push({ name : "testVectorize", execute : function() {
			_gthis.testVectorize();
			return utest_Async.getResolved();
		}});
		init.tests.push({ name : "testTranslateTo", execute : function() {
			_gthis.testTranslateTo();
			return utest_Async.getResolved();
		}});
		init.tests.push({ name : "testScaleTo", execute : function() {
			_gthis.testScaleTo();
			return utest_Async.getResolved();
		}});
		init.tests.push({ name : "testIndicativeAngle", execute : function() {
			_gthis.testIndicativeAngle();
			return utest_Async.getResolved();
		}});
		init.tests.push({ name : "testresample", execute : function() {
			_gthis.testresample();
			return utest_Async.getResolved();
		}});
		init.tests.push({ name : "testresamplebiggerArray", execute : function() {
			_gthis.testresamplebiggerArray();
			return utest_Async.getResolved();
		}});
		init.tests.push({ name : "testResampleSimple", execute : function() {
			_gthis.testResampleSimple();
			return utest_Async.getResolved();
		}});
		return init;
	}
	,__class__: tests_TestGesteStatics
});
var tests_TestResample = function() {
	utest_Test.call(this);
};
tests_TestResample.__name__ = "tests.TestResample";
tests_TestResample.toPoints = function(val) {
	return postite_geom__$CoolPoint_Points_$Impl_$.fromArrayInt(val.map(function(p) {
		return { x : p * 10, y : p * 10 + 100};
	}));
};
tests_TestResample.__super__ = utest_Test;
tests_TestResample.prototype = $extend(utest_Test.prototype,{
	testCircle: function() {
		haxe_Log.trace("circl",{ fileName : "tests/TestResample.hx", lineNumber : 31, className : "tests.TestResample", methodName : "testCircle"});
		var _this = postite_geom_UnistrokePatterns.unimap;
		var circle = __map_reserved["circle"] != null ? _this.getReserved("circle") : _this.h["circle"];
		var n = postite_geom_Geste.Resample(circle,64);
		utest_Assert.equals(64,n.length,null,{ fileName : "tests/TestResample.hx", lineNumber : 34, className : "tests.TestResample", methodName : "testCircle"});
	}
	,__initializeUtest__: function() {
		var _gthis = this;
		var init = utest_Test.prototype.__initializeUtest__.call(this);
		init.tests.push({ name : "testCircle", execute : function() {
			_gthis.testCircle();
			return utest_Async.getResolved();
		}});
		return init;
	}
	,__class__: tests_TestResample
});
var tests_TestVector2d = function() {
	utest_Test.call(this);
};
tests_TestVector2d.__name__ = "tests.TestVector2d";
tests_TestVector2d.__super__ = utest_Test;
tests_TestVector2d.prototype = $extend(utest_Test.prototype,{
	testTest: function() {
		utest_Assert.isTrue(true,null,{ fileName : "tests/TestVector2d.hx", lineNumber : 7, className : "tests.TestVector2d", methodName : "testTest"});
	}
	,testVector: function() {
		var this1 = { x : 10, y : 20};
		var vec = this1;
		var magn = Math.sqrt(vec.x * vec.x + vec.y * vec.y);
		utest_Assert.equals(10,magn,null,{ fileName : "tests/TestVector2d.hx", lineNumber : 13, className : "tests.TestVector2d", methodName : "testVector"});
	}
	,__initializeUtest__: function() {
		var _gthis = this;
		var init = utest_Test.prototype.__initializeUtest__.call(this);
		init.tests.push({ name : "testTest", execute : function() {
			_gthis.testTest();
			return utest_Async.getResolved();
		}});
		init.tests.push({ name : "testVector", execute : function() {
			_gthis.testVector();
			return utest_Async.getResolved();
		}});
		return init;
	}
	,__class__: tests_TestVector2d
});
var utest_Assert = function() { };
utest_Assert.__name__ = "utest.Assert";
utest_Assert.processResult = function(cond,getMessage,pos) {
	if(utest_Assert.results == null) {
		throw new js__$Boot_HaxeError("Assert at " + pos.fileName + ":" + pos.lineNumber + " out of context. Most likely you are trying to assert after a test timeout.");
	}
	if(cond) {
		utest_Assert.results.add(utest_Assertation.Success(pos));
	} else {
		utest_Assert.results.add(utest_Assertation.Failure(getMessage(),pos));
	}
};
utest_Assert.isTrue = function(cond,msg,pos) {
	if(utest_Assert.results == null) {
		throw new js__$Boot_HaxeError("Assert at " + pos.fileName + ":" + pos.lineNumber + " out of context. Most likely you are trying to assert after a test timeout.");
	}
	if(cond) {
		utest_Assert.results.add(utest_Assertation.Success(pos));
	} else {
		utest_Assert.results.add(utest_Assertation.Failure(msg != null ? msg : "expected true",pos));
	}
};
utest_Assert.isFalse = function(value,msg,pos) {
	if(utest_Assert.results == null) {
		throw new js__$Boot_HaxeError("Assert at " + pos.fileName + ":" + pos.lineNumber + " out of context. Most likely you are trying to assert after a test timeout.");
	}
	if(value == false) {
		utest_Assert.results.add(utest_Assertation.Success(pos));
	} else {
		utest_Assert.results.add(utest_Assertation.Failure(msg != null ? msg : "expected false",pos));
	}
};
utest_Assert.isNull = function(value,msg,pos) {
	if(utest_Assert.results == null) {
		throw new js__$Boot_HaxeError("Assert at " + pos.fileName + ":" + pos.lineNumber + " out of context. Most likely you are trying to assert after a test timeout.");
	}
	if(value == null) {
		utest_Assert.results.add(utest_Assertation.Success(pos));
	} else {
		utest_Assert.results.add(utest_Assertation.Failure(msg != null ? msg : "expected null but it is " + utest_Assert.q(value),pos));
	}
};
utest_Assert.notNull = function(value,msg,pos) {
	if(utest_Assert.results == null) {
		throw new js__$Boot_HaxeError("Assert at " + pos.fileName + ":" + pos.lineNumber + " out of context. Most likely you are trying to assert after a test timeout.");
	}
	if(value != null) {
		utest_Assert.results.add(utest_Assertation.Success(pos));
	} else {
		utest_Assert.results.add(utest_Assertation.Failure(msg != null ? msg : "expected not null",pos));
	}
};
utest_Assert.is = function(value,type,msg,pos) {
	if(utest_Assert.results == null) {
		throw new js__$Boot_HaxeError("Assert at " + pos.fileName + ":" + pos.lineNumber + " out of context. Most likely you are trying to assert after a test timeout.");
	}
	if(js_Boot.__instanceof(value,type)) {
		utest_Assert.results.add(utest_Assertation.Success(pos));
	} else {
		utest_Assert.results.add(utest_Assertation.Failure(msg != null ? msg : "expected type " + utest_Assert.typeToString(type) + " but it is " + utest_Assert.typeToString(value),pos));
	}
};
utest_Assert.notEquals = function(expected,value,msg,pos) {
	if(utest_Assert.results == null) {
		throw new js__$Boot_HaxeError("Assert at " + pos.fileName + ":" + pos.lineNumber + " out of context. Most likely you are trying to assert after a test timeout.");
	}
	if(expected != value) {
		utest_Assert.results.add(utest_Assertation.Success(pos));
	} else {
		utest_Assert.results.add(utest_Assertation.Failure(msg != null ? msg : "expected " + utest_Assert.q(expected) + " and test value " + utest_Assert.q(value) + " should be different",pos));
	}
};
utest_Assert.equals = function(expected,value,msg,pos) {
	if(utest_Assert.results == null) {
		throw new js__$Boot_HaxeError("Assert at " + pos.fileName + ":" + pos.lineNumber + " out of context. Most likely you are trying to assert after a test timeout.");
	}
	if(expected == value) {
		utest_Assert.results.add(utest_Assertation.Success(pos));
	} else {
		utest_Assert.results.add(utest_Assertation.Failure(msg != null ? msg : "expected " + utest_Assert.q(expected) + " but it is " + utest_Assert.q(value),pos));
	}
};
utest_Assert.match = function(pattern,value,msg,pos) {
	var cond = pattern.match(value);
	if(utest_Assert.results == null) {
		throw new js__$Boot_HaxeError("Assert at " + pos.fileName + ":" + pos.lineNumber + " out of context. Most likely you are trying to assert after a test timeout.");
	}
	if(cond) {
		utest_Assert.results.add(utest_Assertation.Success(pos));
	} else {
		utest_Assert.results.add(utest_Assertation.Failure(msg != null ? msg : "the value " + utest_Assert.q(value) + " does not match the provided pattern",pos));
	}
};
utest_Assert.floatEquals = function(expected,value,approx,msg,pos) {
	if(utest_Assert.results == null) {
		throw new js__$Boot_HaxeError("Assert at " + pos.fileName + ":" + pos.lineNumber + " out of context. Most likely you are trying to assert after a test timeout.");
	}
	if(utest_Assert._floatEquals(expected,value,approx)) {
		utest_Assert.results.add(utest_Assertation.Success(pos));
	} else {
		utest_Assert.results.add(utest_Assertation.Failure(msg != null ? msg : "expected " + utest_Assert.q(expected) + " but it is " + utest_Assert.q(value),pos));
	}
};
utest_Assert._floatEquals = function(expected,value,approx) {
	if(isNaN(expected)) {
		return isNaN(value);
	} else if(isNaN(value)) {
		return false;
	} else if(!isFinite(expected) && !isFinite(value)) {
		return expected > 0 == value > 0;
	}
	if(null == approx) {
		approx = 1e-5;
	}
	return Math.abs(value - expected) <= approx;
};
utest_Assert.getTypeName = function(v) {
	var _g = Type.typeof(v);
	switch(_g._hx_index) {
	case 0:
		return "`null`";
	case 1:
		return "Int";
	case 2:
		return "Float";
	case 3:
		return "Bool";
	case 4:
		return "Object";
	case 5:
		return "function";
	case 6:
		var c = _g.c;
		return c.__name__;
	case 7:
		var e = _g.e;
		return e.__ename__;
	case 8:
		return "`Unknown`";
	}
};
utest_Assert.isIterable = function(v,isAnonym) {
	var fields = isAnonym ? Reflect.fields(v) : Type.getInstanceFields(v == null ? null : js_Boot.getClass(v));
	if(!Lambda.has(fields,"iterator")) {
		return false;
	}
	return Reflect.isFunction(Reflect.field(v,"iterator"));
};
utest_Assert.isIterator = function(v,isAnonym) {
	var fields = isAnonym ? Reflect.fields(v) : Type.getInstanceFields(v == null ? null : js_Boot.getClass(v));
	if(!Lambda.has(fields,"next") || !Lambda.has(fields,"hasNext")) {
		return false;
	}
	if(Reflect.isFunction(Reflect.field(v,"next"))) {
		return Reflect.isFunction(Reflect.field(v,"hasNext"));
	} else {
		return false;
	}
};
utest_Assert.sameAs = function(expected,value,status,approx) {
	var texpected = utest_Assert.getTypeName(expected);
	var tvalue = utest_Assert.getTypeName(value);
	status.expectedValue = expected;
	status.actualValue = value;
	if(texpected != tvalue && !(texpected == "Int" && tvalue == "Float" || texpected == "Float" && tvalue == "Int")) {
		status.error = "expected type " + texpected + " but it is " + tvalue + (status.path == "" ? "" : " for field " + status.path);
		return false;
	}
	var _g = Type.typeof(expected);
	switch(_g._hx_index) {
	case 1:case 2:
		if(!utest_Assert._floatEquals(expected,value,approx)) {
			status.error = "expected " + utest_Assert.q(expected) + " but it is " + utest_Assert.q(value) + (status.path == "" ? "" : " for field " + status.path);
			return false;
		}
		return true;
	case 0:case 3:
		if(expected != value) {
			status.error = "expected " + utest_Assert.q(expected) + " but it is " + utest_Assert.q(value) + (status.path == "" ? "" : " for field " + status.path);
			return false;
		}
		return true;
	case 4:
		if(status.recursive || status.path == "") {
			var tfields = Reflect.fields(value);
			var fields = Reflect.fields(expected);
			var path = status.path;
			var _g1 = 0;
			while(_g1 < fields.length) {
				var field = fields[_g1];
				++_g1;
				HxOverrides.remove(tfields,field);
				status.path = path == "" ? field : path + "." + field;
				if(!Object.prototype.hasOwnProperty.call(value,field)) {
					status.error = "expected field " + status.path + " does not exist in " + utest_Assert.q(value);
					return false;
				}
				var e = Reflect.field(expected,field);
				if(Reflect.isFunction(e)) {
					continue;
				}
				var v = Reflect.field(value,field);
				if(!utest_Assert.sameAs(e,v,status,approx)) {
					return false;
				}
			}
			if(tfields.length > 0) {
				status.error = "the tested object has extra field(s) (" + tfields.join(", ") + ") not included in the expected ones";
				return false;
			}
		}
		if(utest_Assert.isIterator(expected,true)) {
			if(!utest_Assert.isIterator(value,true)) {
				status.error = "expected Iterable but it is not " + (status.path == "" ? "" : " for field " + status.path);
				return false;
			}
			if(status.recursive || status.path == "") {
				var evalues = Lambda.array({ iterator : function() {
					return expected;
				}});
				var vvalues = Lambda.array({ iterator : function() {
					return value;
				}});
				if(evalues.length != vvalues.length) {
					status.error = "expected " + evalues.length + " values in Iterator but they are " + vvalues.length + (status.path == "" ? "" : " for field " + status.path);
					return false;
				}
				var path1 = status.path;
				var _g2 = 0;
				var _g11 = evalues.length;
				while(_g2 < _g11) {
					var i = _g2++;
					status.path = path1 == "" ? "iterator[" + i + "]" : path1 + "[" + i + "]";
					if(!utest_Assert.sameAs(evalues[i],vvalues[i],status,approx)) {
						status.error = "expected " + utest_Assert.q(status.expectedValue) + " but it is " + utest_Assert.q(status.actualValue) + (status.path == "" ? "" : " for field " + status.path);
						return false;
					}
				}
			}
			return true;
		}
		if(utest_Assert.isIterable(expected,true)) {
			if(!utest_Assert.isIterable(value,true)) {
				status.error = "expected Iterator but it is not " + (status.path == "" ? "" : " for field " + status.path);
				return false;
			}
			if(status.recursive || status.path == "") {
				var evalues1 = Lambda.array(expected);
				var vvalues1 = Lambda.array(value);
				if(evalues1.length != vvalues1.length) {
					status.error = "expected " + evalues1.length + " values in Iterable but they are " + vvalues1.length + (status.path == "" ? "" : " for field " + status.path);
					return false;
				}
				var path2 = status.path;
				var _g3 = 0;
				var _g12 = evalues1.length;
				while(_g3 < _g12) {
					var i1 = _g3++;
					status.path = path2 == "" ? "iterable[" + i1 + "]" : path2 + "[" + i1 + "]";
					if(!utest_Assert.sameAs(evalues1[i1],vvalues1[i1],status,approx)) {
						return false;
					}
				}
			}
			return true;
		}
		return true;
	case 5:
		if(!Reflect.compareMethods(expected,value)) {
			status.error = "expected same function reference" + (status.path == "" ? "" : " for field " + status.path);
			return false;
		}
		return true;
	case 6:
		var c = _g.c;
		var cexpected = c.__name__;
		var o = value;
		var c1 = o == null ? null : js_Boot.getClass(o);
		var cvalue = c1.__name__;
		if(cexpected != cvalue) {
			status.error = "expected instance of " + utest_Assert.q(cexpected) + " but it is " + utest_Assert.q(cvalue) + (status.path == "" ? "" : " for field " + status.path);
			return false;
		}
		if(typeof(expected) == "string") {
			if(expected == value) {
				return true;
			} else {
				status.error = "expected string '" + Std.string(expected) + "' but it is '" + Std.string(value) + "'";
				return false;
			}
		}
		if(((expected) instanceof Array) && expected.__enum__ == null) {
			if(status.recursive || status.path == "") {
				if(expected.length != value.length) {
					status.error = "expected " + Std.string(expected.length) + " elements but they are " + Std.string(value.length) + (status.path == "" ? "" : " for field " + status.path);
					return false;
				}
				var path3 = status.path;
				var _g4 = 0;
				var _g13 = expected.length;
				while(_g4 < _g13) {
					var i2 = _g4++;
					status.path = path3 == "" ? "array[" + i2 + "]" : path3 + "[" + i2 + "]";
					if(!utest_Assert.sameAs(expected[i2],value[i2],status,approx)) {
						status.error = "expected array element at [" + i2 + "] to have " + utest_Assert.q(status.expectedValue) + " but it is " + utest_Assert.q(status.actualValue) + (status.path == "" ? "" : " for field " + status.path);
						return false;
					}
				}
			}
			return true;
		}
		if(((expected) instanceof Date)) {
			if(expected.getTime() != value.getTime()) {
				status.error = "expected " + utest_Assert.q(expected) + " but it is " + utest_Assert.q(value) + (status.path == "" ? "" : " for field " + status.path);
				return false;
			}
			return true;
		}
		if(((expected) instanceof haxe_io_Bytes)) {
			if(status.recursive || status.path == "") {
				var ebytes = expected;
				var vbytes = value;
				if(ebytes.length != vbytes.length) {
					return false;
				}
				var _g5 = 0;
				var _g14 = ebytes.length;
				while(_g5 < _g14) {
					var i3 = _g5++;
					if(ebytes.b[i3] != vbytes.b[i3]) {
						status.error = "expected byte " + ebytes.b[i3] + " but it is " + vbytes.b[i3] + (status.path == "" ? "" : " for field " + status.path);
						return false;
					}
				}
			}
			return true;
		}
		if(js_Boot.__instanceof(expected,haxe_IMap)) {
			if(status.recursive || status.path == "") {
				var map = js_Boot.__cast(expected , haxe_IMap);
				var vmap = js_Boot.__cast(value , haxe_IMap);
				var _g6 = [];
				var k = map.keys();
				while(k.hasNext()) {
					var k1 = k.next();
					_g6.push(k1);
				}
				var keys = _g6;
				var _g15 = [];
				var k2 = vmap.keys();
				while(k2.hasNext()) {
					var k3 = k2.next();
					_g15.push(k3);
				}
				var vkeys = _g15;
				if(keys.length != vkeys.length) {
					status.error = "expected " + keys.length + " keys but they are " + vkeys.length + (status.path == "" ? "" : " for field " + status.path);
					return false;
				}
				var path4 = status.path;
				var _g21 = 0;
				while(_g21 < keys.length) {
					var key = keys[_g21];
					++_g21;
					status.path = path4 == "" ? "hash[" + Std.string(key) + "]" : path4 + "[" + Std.string(key) + "]";
					if(!utest_Assert.sameAs(map.get(key),vmap.get(key),status,approx)) {
						status.error = "expected " + utest_Assert.q(status.expectedValue) + " but it is " + utest_Assert.q(status.actualValue) + (status.path == "" ? "" : " for field " + status.path);
						return false;
					}
				}
			}
			return true;
		}
		if(utest_Assert.isIterator(expected,false)) {
			if(status.recursive || status.path == "") {
				var evalues2 = Lambda.array({ iterator : function() {
					return expected;
				}});
				var vvalues2 = Lambda.array({ iterator : function() {
					return value;
				}});
				if(evalues2.length != vvalues2.length) {
					status.error = "expected " + evalues2.length + " values in Iterator but they are " + vvalues2.length + (status.path == "" ? "" : " for field " + status.path);
					return false;
				}
				var path5 = status.path;
				var _g7 = 0;
				var _g16 = evalues2.length;
				while(_g7 < _g16) {
					var i4 = _g7++;
					status.path = path5 == "" ? "iterator[" + i4 + "]" : path5 + "[" + i4 + "]";
					if(!utest_Assert.sameAs(evalues2[i4],vvalues2[i4],status,approx)) {
						status.error = "expected " + utest_Assert.q(status.expectedValue) + " but it is " + utest_Assert.q(status.actualValue) + (status.path == "" ? "" : " for field " + status.path);
						return false;
					}
				}
			}
			return true;
		}
		if(utest_Assert.isIterable(expected,false)) {
			if(status.recursive || status.path == "") {
				var evalues3 = Lambda.array(expected);
				var vvalues3 = Lambda.array(value);
				if(evalues3.length != vvalues3.length) {
					status.error = "expected " + evalues3.length + " values in Iterable but they are " + vvalues3.length + (status.path == "" ? "" : " for field " + status.path);
					return false;
				}
				var path6 = status.path;
				var _g8 = 0;
				var _g17 = evalues3.length;
				while(_g8 < _g17) {
					var i5 = _g8++;
					status.path = path6 == "" ? "iterable[" + i5 + "]" : path6 + "[" + i5 + "]";
					if(!utest_Assert.sameAs(evalues3[i5],vvalues3[i5],status,approx)) {
						return false;
					}
				}
			}
			return true;
		}
		if(status.recursive || status.path == "") {
			var o1 = expected;
			var fields1 = Type.getInstanceFields(o1 == null ? null : js_Boot.getClass(o1));
			var path7 = status.path;
			var _g9 = 0;
			while(_g9 < fields1.length) {
				var field1 = fields1[_g9];
				++_g9;
				status.path = path7 == "" ? field1 : path7 + "." + field1;
				var e1 = Reflect.field(expected,field1);
				if(Reflect.isFunction(e1)) {
					continue;
				}
				var v1 = Reflect.field(value,field1);
				if(!utest_Assert.sameAs(e1,v1,status,approx)) {
					return false;
				}
			}
		}
		return true;
	case 7:
		var e2 = _g.e;
		var eexpected = e2.__ename__;
		var e3 = Type.getEnum(value);
		var evalue = e3.__ename__;
		if(eexpected != evalue) {
			status.error = "expected enumeration of " + utest_Assert.q(eexpected) + " but it is " + utest_Assert.q(evalue) + (status.path == "" ? "" : " for field " + status.path);
			return false;
		}
		if(status.recursive || status.path == "") {
			if(expected._hx_index != value._hx_index) {
				var e4 = expected;
				var tmp = "expected enum constructor " + utest_Assert.q($hxEnums[e4.__enum__].__constructs__[e4._hx_index]) + " but it is ";
				var e5 = value;
				status.error = tmp + utest_Assert.q($hxEnums[e5.__enum__].__constructs__[e5._hx_index]) + (status.path == "" ? "" : " for field " + status.path);
				return false;
			}
			var eparams = Type.enumParameters(expected);
			var vparams = Type.enumParameters(value);
			var path8 = status.path;
			var _g10 = 0;
			var _g18 = eparams.length;
			while(_g10 < _g18) {
				var i6 = _g10++;
				status.path = path8 == "" ? "enum[" + i6 + "]" : path8 + "[" + i6 + "]";
				if(!utest_Assert.sameAs(eparams[i6],vparams[i6],status,approx)) {
					status.error = "expected enum param " + utest_Assert.q(expected) + " but it is " + utest_Assert.q(value) + (status.path == "" ? "" : " for field " + status.path) + " with " + status.error;
					return false;
				}
			}
		}
		return true;
	case 8:
		throw new js__$Boot_HaxeError("Unable to compare two unknown types");
	}
};
utest_Assert.q = function(v) {
	if(typeof(v) == "string") {
		return "\"" + StringTools.replace(v,"\"","\\\"") + "\"";
	} else {
		return Std.string(v);
	}
};
utest_Assert.same = function(expected,value,recursive,msg,approx,pos) {
	if(null == approx) {
		approx = 1e-5;
	}
	var status = { recursive : null == recursive ? true : recursive, path : "", error : null, expectedValue : expected, actualValue : value};
	if(utest_Assert.sameAs(expected,value,status,approx)) {
		utest_Assert.pass(msg,pos);
	} else {
		utest_Assert.fail(msg == null ? status.error : msg,pos);
	}
};
utest_Assert.raises = function(method,type,msgNotThrown,msgWrongType,pos) {
	var name = type != null ? type.__name__ : "Dynamic";
	try {
		method();
		if(null == msgNotThrown) {
			msgNotThrown = "exception of type " + name + " not raised";
		}
		utest_Assert.fail(msgNotThrown,pos);
	} catch( ex ) {
		haxe_CallStack.lastException = ex;
		var ex1 = ((ex) instanceof js__$Boot_HaxeError) ? ex.val : ex;
		if(null == type) {
			utest_Assert.pass(null,pos);
		} else {
			if(null == msgWrongType) {
				msgWrongType = "expected throw of type " + name + " but it is " + Std.string(ex1);
			}
			utest_Assert.isTrue(js_Boot.__instanceof(ex1,type),msgWrongType,pos);
		}
	}
};
utest_Assert.allows = function(possibilities,value,msg,pos) {
	if(Lambda.has(possibilities,value)) {
		utest_Assert.isTrue(true,msg,pos);
	} else {
		utest_Assert.fail(msg == null ? "value " + utest_Assert.q(value) + " not found in the expected possibilities " + Std.string(possibilities) : msg,pos);
	}
};
utest_Assert.contains = function(match,values,msg,pos) {
	if(Lambda.has(values,match)) {
		utest_Assert.isTrue(true,msg,pos);
	} else {
		utest_Assert.fail(msg == null ? "values " + utest_Assert.q(values) + " do not contain " + Std.string(match) : msg,pos);
	}
};
utest_Assert.notContains = function(match,values,msg,pos) {
	if(!Lambda.has(values,match)) {
		utest_Assert.isTrue(true,msg,pos);
	} else {
		utest_Assert.fail(msg == null ? "values " + utest_Assert.q(values) + " do contain " + Std.string(match) : msg,pos);
	}
};
utest_Assert.stringContains = function(match,value,msg,pos) {
	if(value != null && value.indexOf(match) >= 0) {
		utest_Assert.isTrue(true,msg,pos);
	} else {
		utest_Assert.fail(msg == null ? "value " + utest_Assert.q(value) + " does not contain " + utest_Assert.q(match) : msg,pos);
	}
};
utest_Assert.stringSequence = function(sequence,value,msg,pos) {
	if(null == value) {
		utest_Assert.fail(msg == null ? "null argument value" : msg,pos);
		return;
	}
	var p = 0;
	var _g = 0;
	while(_g < sequence.length) {
		var s = sequence[_g];
		++_g;
		var p2 = value.indexOf(s,p);
		if(p2 < 0) {
			if(msg == null) {
				msg = "expected '" + s + "' after ";
				if(p > 0) {
					var cut = HxOverrides.substr(value,0,p);
					if(cut.length > 30) {
						cut = "..." + HxOverrides.substr(cut,-27,null);
					}
					msg += " '" + cut + "'";
				} else {
					msg += " begin";
				}
			}
			utest_Assert.fail(msg,pos);
			return;
		}
		p = p2 + s.length;
	}
	utest_Assert.isTrue(true,msg,pos);
};
utest_Assert.pass = function(msg,pos) {
	if(msg == null) {
		msg = "pass expected";
	}
	utest_Assert.isTrue(true,msg,pos);
};
utest_Assert.fail = function(msg,pos) {
	if(msg == null) {
		msg = "failure expected";
	}
	utest_Assert.isTrue(false,msg,pos);
};
utest_Assert.warn = function(msg) {
	utest_Assert.results.add(utest_Assertation.Warning(msg));
};
utest_Assert.createAsync = function(f,timeout) {
	return function() {
	};
};
utest_Assert.createEvent = function(f,timeout) {
	return function(e) {
	};
};
utest_Assert.typeToString = function(t) {
	try {
		var o = t;
		var _t = o == null ? null : js_Boot.getClass(o);
		if(_t != null) {
			t = _t;
		}
	} catch( e ) {
		haxe_CallStack.lastException = e;
	}
	try {
		return t.__name__;
	} catch( e1 ) {
		haxe_CallStack.lastException = e1;
	}
	try {
		var _t1 = Type.getEnum(t);
		if(_t1 != null) {
			t = _t1;
		}
	} catch( e2 ) {
		haxe_CallStack.lastException = e2;
	}
	try {
		return t.__ename__;
	} catch( e3 ) {
		haxe_CallStack.lastException = e3;
	}
	try {
		return Std.string(Type.typeof(t));
	} catch( e4 ) {
		haxe_CallStack.lastException = e4;
	}
	try {
		return Std.string(t);
	} catch( e5 ) {
		haxe_CallStack.lastException = e5;
	}
	return "<unable to retrieve type name>";
};
var utest_Assertation = $hxEnums["utest.Assertation"] = { __ename__ : "utest.Assertation", __constructs__ : ["Success","Failure","Error","SetupError","TeardownError","TimeoutError","AsyncError","Warning","Ignore"]
	,Success: ($_=function(pos) { return {_hx_index:0,pos:pos,__enum__:"utest.Assertation",toString:$estr}; },$_.__params__ = ["pos"],$_)
	,Failure: ($_=function(msg,pos) { return {_hx_index:1,msg:msg,pos:pos,__enum__:"utest.Assertation",toString:$estr}; },$_.__params__ = ["msg","pos"],$_)
	,Error: ($_=function(e,stack) { return {_hx_index:2,e:e,stack:stack,__enum__:"utest.Assertation",toString:$estr}; },$_.__params__ = ["e","stack"],$_)
	,SetupError: ($_=function(e,stack) { return {_hx_index:3,e:e,stack:stack,__enum__:"utest.Assertation",toString:$estr}; },$_.__params__ = ["e","stack"],$_)
	,TeardownError: ($_=function(e,stack) { return {_hx_index:4,e:e,stack:stack,__enum__:"utest.Assertation",toString:$estr}; },$_.__params__ = ["e","stack"],$_)
	,TimeoutError: ($_=function(missedAsyncs,stack) { return {_hx_index:5,missedAsyncs:missedAsyncs,stack:stack,__enum__:"utest.Assertation",toString:$estr}; },$_.__params__ = ["missedAsyncs","stack"],$_)
	,AsyncError: ($_=function(e,stack) { return {_hx_index:6,e:e,stack:stack,__enum__:"utest.Assertation",toString:$estr}; },$_.__params__ = ["e","stack"],$_)
	,Warning: ($_=function(msg) { return {_hx_index:7,msg:msg,__enum__:"utest.Assertation",toString:$estr}; },$_.__params__ = ["msg"],$_)
	,Ignore: ($_=function(reason) { return {_hx_index:8,reason:reason,__enum__:"utest.Assertation",toString:$estr}; },$_.__params__ = ["reason"],$_)
};
var utest_Async = function(timeoutMs) {
	if(timeoutMs == null) {
		timeoutMs = 250;
	}
	this.callbacks = [];
	this.timedOut = false;
	this.resolved = false;
	this.startTime = Date.now() / 1000;
	this.timer = haxe_Timer.delay($bind(this,this.setTimedOutState),timeoutMs);
};
utest_Async.__name__ = "utest.Async";
utest_Async.getResolved = function() {
	if(utest_Async.resolvedInstance == null) {
		utest_Async.resolvedInstance = new utest_Async();
		utest_Async.resolvedInstance.done({ fileName : "utest/Async.hx", lineNumber : 28, className : "utest.Async", methodName : "getResolved"});
	}
	return utest_Async.resolvedInstance;
};
utest_Async.prototype = {
	resolved: null
	,timedOut: null
	,callbacks: null
	,startTime: null
	,timer: null
	,done: function(pos) {
		if(this.resolved) {
			if(this.timedOut) {
				throw new js__$Boot_HaxeError("Cannot done() at " + pos.fileName + ":" + pos.lineNumber + " because async is timed out.");
			} else {
				throw new js__$Boot_HaxeError("Cannot done() at " + pos.fileName + ":" + pos.lineNumber + " because async is done already.");
			}
		}
		this.resolved = true;
		var _g = 0;
		var _g1 = this.callbacks;
		while(_g < _g1.length) {
			var cb = _g1[_g];
			++_g;
			cb();
		}
	}
	,setTimeout: function(timeoutMs,pos) {
		if(this.resolved) {
			throw new js__$Boot_HaxeError("Cannot setTimeout(" + timeoutMs + ") at " + pos.fileName + ":" + pos.lineNumber + " because async is done.");
		}
		if(this.timedOut) {
			throw new js__$Boot_HaxeError("Cannot setTimeout(" + timeoutMs + ") at " + pos.fileName + ":" + pos.lineNumber + " because async is timed out.");
		}
		this.timer.stop();
		var delay = timeoutMs - Math.round(1000 * (Date.now() / 1000 - this.startTime));
		this.timer = haxe_Timer.delay($bind(this,this.setTimedOutState),delay);
	}
	,then: function(cb) {
		if(this.resolved) {
			cb();
		} else {
			this.callbacks.push(cb);
		}
	}
	,setTimedOutState: function() {
		if(this.resolved) {
			return;
		}
		this.timedOut = true;
		this.done({ fileName : "utest/Async.hx", lineNumber : 78, className : "utest.Async", methodName : "setTimedOutState"});
	}
	,__class__: utest_Async
};
var utest__$Dispatcher_EventException = $hxEnums["utest._Dispatcher.EventException"] = { __ename__ : "utest._Dispatcher.EventException", __constructs__ : ["StopPropagation"]
	,StopPropagation: {_hx_index:0,__enum__:"utest._Dispatcher.EventException",toString:$estr}
};
var utest_Dispatcher = function() {
	this.handlers = [];
};
utest_Dispatcher.__name__ = "utest.Dispatcher";
utest_Dispatcher.stop = function() {
	throw new js__$Boot_HaxeError(utest__$Dispatcher_EventException.StopPropagation);
};
utest_Dispatcher.prototype = {
	handlers: null
	,add: function(h) {
		this.handlers.push(h);
		return h;
	}
	,remove: function(h) {
		var _g = 0;
		var _g1 = this.handlers.length;
		while(_g < _g1) {
			var i = _g++;
			if(Reflect.compareMethods(this.handlers[i],h)) {
				return this.handlers.splice(i,1)[0];
			}
		}
		return null;
	}
	,clear: function() {
		this.handlers = [];
	}
	,dispatch: function(e) {
		try {
			var list = this.handlers.slice();
			var _g = 0;
			while(_g < list.length) {
				var l = list[_g];
				++_g;
				l(e);
			}
			return true;
		} catch( exc ) {
			haxe_CallStack.lastException = exc;
			if(js_Boot.__instanceof(((exc) instanceof js__$Boot_HaxeError) ? exc.val : exc,utest__$Dispatcher_EventException)) {
				return false;
			} else {
				throw exc;
			}
		}
	}
	,has: function() {
		return this.handlers.length > 0;
	}
	,__class__: utest_Dispatcher
};
var utest_Notifier = function() {
	this.handlers = [];
};
utest_Notifier.__name__ = "utest.Notifier";
utest_Notifier.stop = function() {
	throw new js__$Boot_HaxeError(utest__$Dispatcher_EventException.StopPropagation);
};
utest_Notifier.prototype = {
	handlers: null
	,add: function(h) {
		this.handlers.push(h);
		return h;
	}
	,remove: function(h) {
		var _g = 0;
		var _g1 = this.handlers.length;
		while(_g < _g1) {
			var i = _g++;
			if(Reflect.compareMethods(this.handlers[i],h)) {
				return this.handlers.splice(i,1)[0];
			}
		}
		return null;
	}
	,clear: function() {
		this.handlers = [];
	}
	,dispatch: function() {
		try {
			var list = this.handlers.slice();
			var _g = 0;
			while(_g < list.length) {
				var l = list[_g];
				++_g;
				l();
			}
			return true;
		} catch( exc ) {
			haxe_CallStack.lastException = exc;
			if(js_Boot.__instanceof(((exc) instanceof js__$Boot_HaxeError) ? exc.val : exc,utest__$Dispatcher_EventException)) {
				return false;
			} else {
				throw exc;
			}
		}
	}
	,has: function() {
		return this.handlers.length > 0;
	}
	,__class__: utest_Notifier
};
var utest_TestHandler = function(fixture) {
	this.wasBound = false;
	this.finished = false;
	if(fixture == null) {
		throw new js__$Boot_HaxeError("fixture argument is null");
	}
	this.fixture = fixture;
	this.results = new haxe_ds_List();
	this.asyncStack = new haxe_ds_List();
	this.onTested = new utest_Dispatcher();
	this.onTimeout = new utest_Dispatcher();
	this.onComplete = new utest_Dispatcher();
	this.onPrecheck = new utest_Dispatcher();
	if(fixture.ignoringInfo != null) {
		this.results.add(utest_Assertation.Ignore(fixture.ignoringInfo));
	}
};
utest_TestHandler.__name__ = "utest.TestHandler";
utest_TestHandler.exceptionStack = function(pops) {
	if(pops == null) {
		pops = 2;
	}
	var stack = haxe_CallStack.exceptionStack();
	while(pops-- > 0) stack.pop();
	return stack;
};
utest_TestHandler.prototype = {
	results: null
	,fixture: null
	,finished: null
	,asyncStack: null
	,onTested: null
	,onTimeout: null
	,onComplete: null
	,onPrecheck: null
	,precheck: null
	,wasBound: null
	,execute: function() {
		var _gthis = this;
		if(this.fixture.ignoringInfo != null) {
			this.executeFinally();
			return;
		}
		var isSync = true;
		var expectingAsync = true;
		var run = function() {
			if(isSync) {
				expectingAsync = false;
				return;
			}
			_gthis.executeFixtureMethod();
			_gthis.executeFinally();
		};
		try {
			this.executeMethod(this.fixture.setup);
			this.executeAsyncMethod(this.fixture.setupAsync,run);
			if(!expectingAsync) {
				this.executeFixtureMethod();
			}
		} catch( e ) {
			haxe_CallStack.lastException = e;
			this.results.add(utest_Assertation.SetupError(((e) instanceof js__$Boot_HaxeError) ? e.val : e,utest_TestHandler.exceptionStack()));
		}
		isSync = false;
		if(!expectingAsync) {
			this.executeFinally();
		}
	}
	,executeFixtureMethod: function() {
		try {
			this.executeMethod(this.fixture.method);
		} catch( e ) {
			haxe_CallStack.lastException = e;
			this.results.add(utest_Assertation.Error(((e) instanceof js__$Boot_HaxeError) ? e.val : e,utest_TestHandler.exceptionStack()));
		}
	}
	,executeFinally: function() {
		this.onPrecheck.dispatch(this);
		this.checkTested();
	}
	,checkTested: function() {
		if(this.expiration == null || this.asyncStack.length == 0) {
			this.tested();
		} else if(Date.now() / 1000 > this.expiration) {
			this.timeout();
		} else {
			haxe_Timer.delay($bind(this,this.checkTested),10);
		}
	}
	,expiration: null
	,setTimeout: function(timeout) {
		var newExpire = Date.now() / 1000 + timeout / 1000;
		this.expiration = this.expiration == null ? newExpire : newExpire > this.expiration ? newExpire : this.expiration;
	}
	,bindHandler: function() {
		if(this.wasBound) {
			return;
		}
		utest_Assert.results = this.results;
		utest_Assert.createAsync = $bind(this,this.addAsync);
		utest_Assert.createEvent = $bind(this,this.addEvent);
		this.wasBound = true;
	}
	,unbindHandler: function() {
		if(!this.wasBound) {
			return;
		}
		utest_Assert.results = null;
		utest_Assert.createAsync = function(f,t) {
			return function() {
			};
		};
		utest_Assert.createEvent = function(f1,t1) {
			return function(e) {
			};
		};
		this.wasBound = false;
	}
	,addAsync: function(f,timeout) {
		if(timeout == null) {
			timeout = 250;
		}
		if(null == f) {
			f = function() {
			};
		}
		this.asyncStack.add(f);
		var handler = this;
		this.setTimeout(timeout);
		return function() {
			if(!handler.asyncStack.remove(f)) {
				handler.results.add(utest_Assertation.AsyncError("async function already executed",[]));
				return;
			}
			try {
				handler.bindHandler();
				f();
			} catch( e ) {
				haxe_CallStack.lastException = e;
				handler.results.add(utest_Assertation.AsyncError(((e) instanceof js__$Boot_HaxeError) ? e.val : e,utest_TestHandler.exceptionStack(0)));
			}
		};
	}
	,addEvent: function(f,timeout) {
		if(timeout == null) {
			timeout = 250;
		}
		this.asyncStack.add(f);
		var handler = this;
		this.setTimeout(timeout);
		return function(e) {
			if(!handler.asyncStack.remove(f)) {
				handler.results.add(utest_Assertation.AsyncError("event already executed",[]));
				return;
			}
			try {
				handler.bindHandler();
				f(e);
			} catch( e1 ) {
				haxe_CallStack.lastException = e1;
				handler.results.add(utest_Assertation.AsyncError(((e1) instanceof js__$Boot_HaxeError) ? e1.val : e1,utest_TestHandler.exceptionStack(0)));
			}
		};
	}
	,executeMethod: function(name) {
		if(name == null) {
			return;
		}
		this.bindHandler();
		Reflect.field(this.fixture.target,name).apply(this.fixture.target,[]);
	}
	,executeAsyncMethod: function(name,done) {
		if(name == null) {
			done();
			return;
		}
		this.bindHandler();
		Reflect.field(this.fixture.target,name).apply(this.fixture.target,[done]);
	}
	,tested: function() {
		if(this.results.length == 0) {
			this.results.add(utest_Assertation.Warning("no assertions"));
		}
		this.onTested.dispatch(this);
		this.completed();
	}
	,timeout: function() {
		this.results.add(utest_Assertation.TimeoutError(this.asyncStack.length,[]));
		this.onTimeout.dispatch(this);
		this.completed();
	}
	,completed: function() {
		var _gthis = this;
		if(this.fixture.ignoringInfo != null) {
			this.completedFinally();
			return;
		}
		var isSync = true;
		var expectingAsync = true;
		var complete = function() {
			if(isSync) {
				expectingAsync = false;
				return;
			}
			_gthis.completedFinally();
		};
		try {
			this.executeMethod(this.fixture.teardown);
			this.executeAsyncMethod(this.fixture.teardownAsync,complete);
		} catch( e ) {
			haxe_CallStack.lastException = e;
			this.results.add(utest_Assertation.TeardownError(((e) instanceof js__$Boot_HaxeError) ? e.val : e,utest_TestHandler.exceptionStack(2)));
		}
		isSync = false;
		if(!expectingAsync) {
			this.completedFinally();
		}
	}
	,completedFinally: function() {
		this.finished = true;
		this.unbindHandler();
		this.onComplete.dispatch(this);
	}
	,__class__: utest_TestHandler
};
var utest_ITestHandler = function(fixture) {
	utest_TestHandler.call(this,fixture);
	if(!fixture.isITest) {
		throw new js__$Boot_HaxeError("Invalid fixture type for utest.ITestHandler");
	}
	this.testCase = js_Boot.__cast(fixture.target , utest_ITest);
	this.test = fixture.test;
	if(this.test == null) {
		throw new js__$Boot_HaxeError("Fixture is missing test data");
	}
};
utest_ITestHandler.__name__ = "utest.ITestHandler";
utest_ITestHandler.__super__ = utest_TestHandler;
utest_ITestHandler.prototype = $extend(utest_TestHandler.prototype,{
	testCase: null
	,test: null
	,setupAsync: null
	,testAsync: null
	,teardownAsync: null
	,execute: function() {
		if(this.fixture.ignoringInfo != null) {
			this.executeFinally();
			return;
		}
		this.bindHandler();
		this.runSetup();
	}
	,runSetup: function() {
		try {
			this.setupAsync = this.fixture.setupMethod();
		} catch( e ) {
			haxe_CallStack.lastException = e;
			this.results.add(utest_Assertation.SetupError(((e) instanceof js__$Boot_HaxeError) ? e.val : e,haxe_CallStack.exceptionStack()));
			this.completedFinally();
			return;
		}
		this.setupAsync.then($bind(this,this.checkSetup));
	}
	,checkSetup: function() {
		if(this.setupAsync.timedOut) {
			this.results.add(utest_Assertation.SetupError("Setup timeout",[]));
			this.completedFinally();
		} else {
			this.runTest();
		}
	}
	,runTest: function() {
		try {
			this.testAsync = this.test.execute();
		} catch( e ) {
			haxe_CallStack.lastException = e;
			this.results.add(utest_Assertation.Error(((e) instanceof js__$Boot_HaxeError) ? e.val : e,haxe_CallStack.exceptionStack()));
			this.runTeardown();
			return;
		}
		this.testAsync.then($bind(this,this.checkTest));
	}
	,checkTest: function() {
		this.onPrecheck.dispatch(this);
		if(this.testAsync.timedOut) {
			this.results.add(utest_Assertation.TimeoutError(1,[]));
			this.onTimeout.dispatch(this);
		} else if(this.testAsync.resolved) {
			if(this.results.length == 0) {
				this.results.add(utest_Assertation.Warning("no assertions"));
			}
			this.onTested.dispatch(this);
		} else {
			throw new js__$Boot_HaxeError("Unexpected test state");
		}
		this.runTeardown();
	}
	,runTeardown: function() {
		try {
			this.teardownAsync = this.fixture.teardownMethod();
		} catch( e ) {
			haxe_CallStack.lastException = e;
			this.results.add(utest_Assertation.TeardownError(((e) instanceof js__$Boot_HaxeError) ? e.val : e,haxe_CallStack.exceptionStack()));
			this.completedFinally();
			return;
		}
		this.teardownAsync.then($bind(this,this.checkTeardown));
	}
	,checkTeardown: function() {
		if(this.teardownAsync.timedOut) {
			this.results.add(utest_Assertation.TeardownError("Teardown timeout",[]));
		}
		this.completedFinally();
	}
	,bindHandler: function() {
		if(this.wasBound) {
			return;
		}
		utest_Assert.results = this.results;
		var msg = " is not allowed in tests extending utest.ITest. Add `async:utest.Async` argument to the test method instead.";
		utest_Assert.createAsync = function(f,t) {
			throw new js__$Boot_HaxeError("Assert.createAsync() " + msg);
		};
		utest_Assert.createEvent = function(f1,t1) {
			throw new js__$Boot_HaxeError("Assert.createEvent() " + msg);
		};
		this.wasBound = true;
	}
	,__class__: utest_ITestHandler
});
var utest__$IgnoredFixture_IgnoredFixture_$Impl_$ = {};
utest__$IgnoredFixture_IgnoredFixture_$Impl_$.__name__ = "utest._IgnoredFixture.IgnoredFixture_Impl_";
utest__$IgnoredFixture_IgnoredFixture_$Impl_$.__properties__ = {get_ignoreReason:"get_ignoreReason",get_isIgnored:"get_isIgnored"};
utest__$IgnoredFixture_IgnoredFixture_$Impl_$.NotIgnored = function() {
	var this1 = null;
	return this1;
};
utest__$IgnoredFixture_IgnoredFixture_$Impl_$.Ignored = function(reason) {
	var this1 = reason != null ? reason : "";
	return this1;
};
utest__$IgnoredFixture_IgnoredFixture_$Impl_$._new = function(reason) {
	return reason;
};
utest__$IgnoredFixture_IgnoredFixture_$Impl_$.get_isIgnored = function(this1) {
	return this1 != null;
};
utest__$IgnoredFixture_IgnoredFixture_$Impl_$.get_ignoreReason = function(this1) {
	return this1;
};
var utest_Runner = function() {
	this.executedFixtures = 0;
	this.pos = 0;
	this.complete = false;
	this.globalPattern = null;
	this.iTestFixtures = new haxe_ds_ObjectMap();
	this.fixtures = [];
	this.onProgress = new utest_Dispatcher();
	this.onStart = new utest_Dispatcher();
	this.onComplete = new utest_Dispatcher();
	this.onPrecheck = new utest_Dispatcher();
	this.onTestStart = new utest_Dispatcher();
	this.onTestComplete = new utest_Dispatcher();
	this.length = 0;
};
utest_Runner.__name__ = "utest.Runner";
utest_Runner.prototype = {
	fixtures: null
	,iTestFixtures: null
	,onProgress: null
	,onStart: null
	,onComplete: null
	,onPrecheck: null
	,onTestStart: null
	,onTestComplete: null
	,length: null
	,globalPattern: null
	,complete: null
	,addCase: function(test,setup,teardown,prefix,pattern,setupAsync,teardownAsync) {
		if(teardownAsync == null) {
			teardownAsync = "teardownAsync";
		}
		if(setupAsync == null) {
			setupAsync = "setupAsync";
		}
		if(prefix == null) {
			prefix = "test";
		}
		if(teardown == null) {
			teardown = "teardown";
		}
		if(setup == null) {
			setup = "setup";
		}
		if(js_Boot.__instanceof(test,utest_ITest)) {
			this.addITest(test,pattern);
		} else {
			this.addCaseOld(test,setup,teardown,prefix,pattern,setupAsync,teardownAsync);
		}
	}
	,addITest: function(testCase,pattern) {
		if(this.iTestFixtures.h.__keys__[testCase.__id__] != null) {
			throw new js__$Boot_HaxeError("Cannot add the same test twice.");
		}
		var fixtures = [];
		var init = testCase.__initializeUtest__();
		var _g = 0;
		var _g1 = init.tests;
		while(_g < _g1.length) {
			var test = _g1[_g];
			++_g;
			if(!this.isTestFixtureName(test.name,["test","spec"],pattern,this.globalPattern)) {
				continue;
			}
			var fixture = utest_TestFixture.ofData(testCase,test,init.accessories);
			this.addFixture(fixture);
			fixtures.push(fixture);
		}
		this.iTestFixtures.set(testCase,{ setupClass : utest_utils_AccessoriesUtils.getSetupClass(init.accessories), fixtures : fixtures, teardownClass : utest_utils_AccessoriesUtils.getTeardownClass(init.accessories)});
	}
	,addCaseOld: function(test,setup,teardown,prefix,pattern,setupAsync,teardownAsync) {
		if(teardownAsync == null) {
			teardownAsync = "teardownAsync";
		}
		if(setupAsync == null) {
			setupAsync = "setupAsync";
		}
		if(prefix == null) {
			prefix = "test";
		}
		if(teardown == null) {
			teardown = "teardown";
		}
		if(setup == null) {
			setup = "setup";
		}
		if(!Reflect.isObject(test)) {
			throw new js__$Boot_HaxeError("can't add a null object as a test case");
		}
		if(!this.isMethod(test,setup)) {
			setup = null;
		}
		if(!this.isMethod(test,setupAsync)) {
			setupAsync = null;
		}
		if(!this.isMethod(test,teardown)) {
			teardown = null;
		}
		if(!this.isMethod(test,teardownAsync)) {
			teardownAsync = null;
		}
		var fields = Type.getInstanceFields(test == null ? null : js_Boot.getClass(test));
		var _g = 0;
		while(_g < fields.length) {
			var field = fields[_g];
			++_g;
			if(!this.isMethod(test,field)) {
				continue;
			}
			if(!this.isTestFixtureName(field,[prefix],pattern,this.globalPattern)) {
				continue;
			}
			this.addFixture(new utest_TestFixture(test,field,setup,teardown,setupAsync,teardownAsync));
		}
	}
	,isTestFixtureName: function(name,prefixes,pattern,globalPattern) {
		if(pattern == null && globalPattern == null) {
			var _g = 0;
			while(_g < prefixes.length) {
				var prefix = prefixes[_g];
				++_g;
				if(StringTools.startsWith(name,prefix)) {
					return true;
				}
			}
			return false;
		}
		if(pattern == null) {
			pattern = globalPattern;
		}
		return pattern.match(name);
	}
	,addFixture: function(fixture) {
		this.fixtures.push(fixture);
		this.length++;
	}
	,getFixture: function(index) {
		return this.fixtures[index];
	}
	,isMethod: function(test,name) {
		try {
			return Reflect.isFunction(Reflect.field(test,name));
		} catch( e ) {
			haxe_CallStack.lastException = e;
			return false;
		}
	}
	,run: function() {
		this.onStart.dispatch(this);
		var iTestRunner = new utest__$Runner_ITestRunner(this);
		iTestRunner.run();
		this.waitForCompletion();
	}
	,waitForCompletion: function() {
		if(!this.complete) {
			haxe_Timer.delay($bind(this,this.waitForCompletion),100);
		}
	}
	,pos: null
	,executedFixtures: null
	,runNext: function(finishedHandler) {
		var _g = this.pos;
		var _g1 = this.fixtures.length;
		while(_g < _g1) {
			++_g;
			var fixture = this.fixtures[this.pos++];
			if(fixture.isITest) {
				continue;
			}
			var handler = this.runFixture(fixture);
			if(!handler.finished) {
				handler.onComplete.add($bind(this,this.runNext));
				return;
			}
		}
		this.complete = true;
		this.onComplete.dispatch(this);
	}
	,runFixture: function(fixture) {
		var handler = fixture.isITest ? new utest_ITestHandler(fixture) : new utest_TestHandler(fixture);
		handler.onComplete.add($bind(this,this.testComplete));
		handler.onPrecheck.add(($_=this.onPrecheck,$bind($_,$_.dispatch)));
		this.onTestStart.dispatch(handler);
		handler.execute();
		return handler;
	}
	,testComplete: function(h) {
		++this.executedFixtures;
		this.onTestComplete.dispatch(h);
		this.onProgress.dispatch({ result : utest_TestResult.ofHandler(h), done : this.executedFixtures, totals : this.length});
	}
	,__class__: utest_Runner
};
var utest__$Runner_ITestRunner = function(runner) {
	this.runner = runner;
};
utest__$Runner_ITestRunner.__name__ = "utest._Runner.ITestRunner";
utest__$Runner_ITestRunner.prototype = {
	runner: null
	,cases: null
	,currentCase: null
	,currentCaseFixtures: null
	,teardownClass: null
	,setupAsync: null
	,teardownAsync: null
	,run: function() {
		this.cases = this.runner.iTestFixtures.keys();
		this.runCases();
	}
	,runCases: function() {
		while(this.cases.hasNext()) {
			this.currentCase = this.cases.next();
			var data = this.runner.iTestFixtures.h[this.currentCase.__id__];
			this.currentCaseFixtures = data.fixtures;
			this.teardownClass = data.teardownClass;
			try {
				this.setupAsync = data.setupClass();
			} catch( e ) {
				haxe_CallStack.lastException = e;
				this.setupFailed(utest_Assertation.SetupError("setupClass failed: " + Std.string(((e) instanceof js__$Boot_HaxeError) ? e.val : e),haxe_CallStack.exceptionStack()));
				return;
			}
			if(this.setupAsync.resolved) {
				if(!this.runFixtures()) {
					return;
				}
			} else {
				this.setupAsync.then($bind(this,this.checkSetup));
				return;
			}
		}
		this.runner.runNext();
	}
	,checkSetup: function() {
		if(this.setupAsync.timedOut) {
			this.setupFailed(utest_Assertation.SetupError("setupClass timeout",[]));
		} else {
			this.runFixtures();
		}
	}
	,setupFailed: function(assertation) {
		this.runner.executedFixtures += this.currentCaseFixtures.length;
		this.runner.onProgress.dispatch({ totals : this.runner.length, result : utest_TestResult.ofFailedSetupClass(this.currentCase,assertation), done : this.runner.executedFixtures});
		this.runCases();
	}
	,runFixtures: function(finishedHandler) {
		while(this.currentCaseFixtures.length > 0) {
			var handler = this.runner.runFixture(this.currentCaseFixtures.pop());
			if(!handler.finished) {
				handler.onComplete.add($bind(this,this.runFixtures));
				return false;
			}
		}
		try {
			this.teardownAsync = this.teardownClass();
		} catch( e ) {
			haxe_CallStack.lastException = e;
			this.teardownFailed(utest_Assertation.TeardownError("teardownClass failed: " + Std.string(((e) instanceof js__$Boot_HaxeError) ? e.val : e),haxe_CallStack.exceptionStack()));
			return true;
		}
		if(this.teardownAsync.resolved && finishedHandler == null) {
			return true;
		}
		this.teardownAsync.then($bind(this,this.checkTeardown));
		return false;
	}
	,checkTeardown: function() {
		if(this.teardownAsync.timedOut) {
			this.teardownFailed(utest_Assertation.TeardownError("teardownClass timeout",[]));
		}
		this.runCases();
	}
	,teardownFailed: function(assertation) {
		this.runner.onProgress.dispatch({ totals : this.runner.length, result : utest_TestResult.ofFailedTeardownClass(this.currentCase,assertation), done : this.runner.executedFixtures});
	}
	,__class__: utest__$Runner_ITestRunner
};
var utest_AccessoryName = function() { };
utest_AccessoryName.__name__ = "utest.AccessoryName";
var utest_TestFixture = function(target,method,setup,teardown,setupAsync,teardownAsync) {
	this.isITest = false;
	this.target = target;
	this.method = method;
	this.setup = setup;
	this.setupAsync = setupAsync;
	this.teardown = teardown;
	this.teardownAsync = teardownAsync;
	this.ignoringInfo = this.getIgnored();
};
utest_TestFixture.__name__ = "utest.TestFixture";
utest_TestFixture.ofData = function(target,test,accessories) {
	var fixture = new utest_TestFixture(target,test.name);
	fixture.isITest = true;
	fixture.test = test;
	fixture.setupMethod = utest_utils_AccessoriesUtils.getSetup(accessories);
	fixture.teardownMethod = utest_utils_AccessoriesUtils.getTeardown(accessories);
	return fixture;
};
utest_TestFixture.prototype = {
	target: null
	,method: null
	,setup: null
	,setupAsync: null
	,teardown: null
	,teardownAsync: null
	,ignoringInfo: null
	,isITest: null
	,test: null
	,setupMethod: null
	,teardownMethod: null
	,checkMethod: function(name,arg) {
		var field = Reflect.field(this.target,name);
		if(field == null) {
			throw new js__$Boot_HaxeError(arg + " function " + name + " is not a field of target");
		}
		if(!Reflect.isFunction(field)) {
			throw new js__$Boot_HaxeError(arg + " function " + name + " is not a function");
		}
	}
	,getIgnored: function() {
		var o = this.target;
		var metas = haxe_rtti_Meta.getFields(o == null ? null : js_Boot.getClass(o));
		var metasForTestMetas = Reflect.getProperty(metas,this.method);
		if(metasForTestMetas == null || !Object.prototype.hasOwnProperty.call(metasForTestMetas,"Ignored")) {
			return utest__$IgnoredFixture_IgnoredFixture_$Impl_$.NotIgnored();
		}
		var ignoredArgs = Reflect.getProperty(metasForTestMetas,"Ignored");
		if(ignoredArgs == null || ignoredArgs.length == 0 || ignoredArgs[0] == null) {
			return utest__$IgnoredFixture_IgnoredFixture_$Impl_$.Ignored();
		}
		var ignoredReason = Std.string(ignoredArgs[0]);
		return utest__$IgnoredFixture_IgnoredFixture_$Impl_$.Ignored(ignoredReason);
	}
	,__class__: utest_TestFixture
};
var utest_TestResult = function() {
};
utest_TestResult.__name__ = "utest.TestResult";
utest_TestResult.ofHandler = function(handler) {
	var r = new utest_TestResult();
	var o = handler.fixture.target;
	var c = o == null ? null : js_Boot.getClass(o);
	var path = c.__name__.split(".");
	r.cls = path.pop();
	r.pack = path.join(".");
	r.method = handler.fixture.method;
	r.setup = handler.fixture.setup;
	r.setupAsync = handler.fixture.setupAsync;
	r.teardown = handler.fixture.teardown;
	r.teardownAsync = handler.fixture.teardownAsync;
	r.assertations = handler.results;
	return r;
};
utest_TestResult.ofFailedSetupClass = function(testCase,assertation) {
	var r = new utest_TestResult();
	var c = testCase == null ? null : js_Boot.getClass(testCase);
	var path = c.__name__.split(".");
	r.cls = path.pop();
	r.pack = path.join(".");
	r.method = "setup";
	r.assertations = new haxe_ds_List();
	r.assertations.add(assertation);
	return r;
};
utest_TestResult.ofFailedTeardownClass = function(testCase,assertation) {
	var r = new utest_TestResult();
	var c = testCase == null ? null : js_Boot.getClass(testCase);
	var path = c.__name__.split(".");
	r.cls = path.pop();
	r.pack = path.join(".");
	r.method = "setup";
	r.assertations = new haxe_ds_List();
	r.assertations.add(assertation);
	return r;
};
utest_TestResult.prototype = {
	pack: null
	,cls: null
	,method: null
	,setup: null
	,setupAsync: null
	,teardown: null
	,teardownAsync: null
	,assertations: null
	,allOk: function() {
		var head = this.assertations.h;
		while(head != null) {
			var val = head.item;
			if(val._hx_index == 0) {
				break;
			} else {
				return false;
			}
		}
		return true;
	}
	,__class__: utest_TestResult
};
var utest_ui_Report = function() { };
utest_ui_Report.__name__ = "utest.ui.Report";
utest_ui_Report.create = function(runner,displaySuccessResults,headerDisplayMode) {
	var report;
	if(typeof window != 'undefined') {
		report = new utest_ui_text_HtmlReport(runner,null,true);
	} else {
		report = new utest_ui_text_PrintReport(runner);
	}
	if(null == displaySuccessResults) {
		report.displaySuccessResults = utest_ui_common_SuccessResultsDisplayMode.ShowSuccessResultsWithNoErrors;
	} else {
		report.displaySuccessResults = displaySuccessResults;
	}
	if(null == headerDisplayMode) {
		report.displayHeader = utest_ui_common_HeaderDisplayMode.ShowHeaderWithResults;
	} else {
		report.displayHeader = headerDisplayMode;
	}
	return report;
};
var utest_ui_common_ClassResult = function(className,setupName,teardownName) {
	this.fixtures = new haxe_ds_StringMap();
	this.className = className;
	this.setupName = setupName;
	this.hasSetup = setupName != null;
	this.teardownName = teardownName;
	this.hasTeardown = teardownName != null;
	this.methods = 0;
	this.stats = new utest_ui_common_ResultStats();
};
utest_ui_common_ClassResult.__name__ = "utest.ui.common.ClassResult";
utest_ui_common_ClassResult.prototype = {
	fixtures: null
	,className: null
	,setupName: null
	,teardownName: null
	,hasSetup: null
	,hasTeardown: null
	,methods: null
	,stats: null
	,add: function(result) {
		var key = result.methodName;
		var _this = this.fixtures;
		if(__map_reserved[key] != null ? _this.existsReserved(key) : _this.h.hasOwnProperty(key)) {
			throw new js__$Boot_HaxeError("invalid duplicated fixture: " + this.className + "." + result.methodName);
		}
		this.stats.wire(result.stats);
		this.methods++;
		var key1 = result.methodName;
		var _this1 = this.fixtures;
		if(__map_reserved[key1] != null) {
			_this1.setReserved(key1,result);
		} else {
			_this1.h[key1] = result;
		}
	}
	,get: function(method) {
		var _this = this.fixtures;
		if(__map_reserved[method] != null) {
			return _this.getReserved(method);
		} else {
			return _this.h[method];
		}
	}
	,exists: function(method) {
		var _this = this.fixtures;
		if(__map_reserved[method] != null) {
			return _this.existsReserved(method);
		} else {
			return _this.h.hasOwnProperty(method);
		}
	}
	,methodNames: function(errorsHavePriority) {
		if(errorsHavePriority == null) {
			errorsHavePriority = true;
		}
		var names = [];
		var name = this.fixtures.keys();
		while(name.hasNext()) {
			var name1 = name.next();
			names.push(name1);
		}
		if(errorsHavePriority) {
			var me = this;
			names.sort(function(a,b) {
				var as = me.get(a).stats;
				var bs = me.get(b).stats;
				if(as.hasErrors) {
					if(!bs.hasErrors) {
						return -1;
					} else if(as.errors == bs.errors) {
						return Reflect.compare(a,b);
					} else {
						return Reflect.compare(as.errors,bs.errors);
					}
				} else if(bs.hasErrors) {
					return 1;
				} else if(as.hasFailures) {
					if(!bs.hasFailures) {
						return -1;
					} else if(as.failures == bs.failures) {
						return Reflect.compare(a,b);
					} else {
						return Reflect.compare(as.failures,bs.failures);
					}
				} else if(bs.hasFailures) {
					return 1;
				} else if(as.hasWarnings) {
					if(!bs.hasWarnings) {
						return -1;
					} else if(as.warnings == bs.warnings) {
						return Reflect.compare(a,b);
					} else {
						return Reflect.compare(as.warnings,bs.warnings);
					}
				} else if(bs.hasWarnings) {
					return 1;
				} else {
					return Reflect.compare(a,b);
				}
			});
		} else {
			names.sort(function(a1,b1) {
				return Reflect.compare(a1,b1);
			});
		}
		return names;
	}
	,__class__: utest_ui_common_ClassResult
};
var utest_ui_common_FixtureResult = function(methodName) {
	this.methodName = methodName;
	this.list = new haxe_ds_List();
	this.hasTestError = false;
	this.hasSetupError = false;
	this.hasTeardownError = false;
	this.hasTimeoutError = false;
	this.hasAsyncError = false;
	this.stats = new utest_ui_common_ResultStats();
};
utest_ui_common_FixtureResult.__name__ = "utest.ui.common.FixtureResult";
utest_ui_common_FixtureResult.prototype = {
	methodName: null
	,hasTestError: null
	,hasSetupError: null
	,hasTeardownError: null
	,hasTimeoutError: null
	,hasAsyncError: null
	,stats: null
	,list: null
	,iterator: function() {
		return new haxe_ds__$List_ListIterator(this.list.h);
	}
	,add: function(assertation) {
		this.list.add(assertation);
		switch(assertation._hx_index) {
		case 0:
			this.stats.addSuccesses(1);
			break;
		case 1:
			this.stats.addFailures(1);
			break;
		case 2:
			this.stats.addErrors(1);
			break;
		case 3:
			this.stats.addErrors(1);
			this.hasSetupError = true;
			break;
		case 4:
			this.stats.addErrors(1);
			this.hasTeardownError = true;
			break;
		case 5:
			this.stats.addErrors(1);
			this.hasTimeoutError = true;
			break;
		case 6:
			this.stats.addErrors(1);
			this.hasAsyncError = true;
			break;
		case 7:
			this.stats.addWarnings(1);
			break;
		case 8:
			this.stats.addIgnores(1);
			break;
		}
	}
	,__class__: utest_ui_common_FixtureResult
};
var utest_ui_common_HeaderDisplayMode = $hxEnums["utest.ui.common.HeaderDisplayMode"] = { __ename__ : "utest.ui.common.HeaderDisplayMode", __constructs__ : ["AlwaysShowHeader","NeverShowHeader","ShowHeaderWithResults"]
	,AlwaysShowHeader: {_hx_index:0,__enum__:"utest.ui.common.HeaderDisplayMode",toString:$estr}
	,NeverShowHeader: {_hx_index:1,__enum__:"utest.ui.common.HeaderDisplayMode",toString:$estr}
	,ShowHeaderWithResults: {_hx_index:2,__enum__:"utest.ui.common.HeaderDisplayMode",toString:$estr}
};
var utest_ui_common_SuccessResultsDisplayMode = $hxEnums["utest.ui.common.SuccessResultsDisplayMode"] = { __ename__ : "utest.ui.common.SuccessResultsDisplayMode", __constructs__ : ["AlwaysShowSuccessResults","NeverShowSuccessResults","ShowSuccessResultsWithNoErrors"]
	,AlwaysShowSuccessResults: {_hx_index:0,__enum__:"utest.ui.common.SuccessResultsDisplayMode",toString:$estr}
	,NeverShowSuccessResults: {_hx_index:1,__enum__:"utest.ui.common.SuccessResultsDisplayMode",toString:$estr}
	,ShowSuccessResultsWithNoErrors: {_hx_index:2,__enum__:"utest.ui.common.SuccessResultsDisplayMode",toString:$estr}
};
var utest_ui_common_IReport = function() { };
utest_ui_common_IReport.__name__ = "utest.ui.common.IReport";
utest_ui_common_IReport.prototype = {
	displaySuccessResults: null
	,displayHeader: null
	,setHandler: null
	,__class__: utest_ui_common_IReport
};
var utest_ui_common_PackageResult = function(packageName) {
	this.isEmpty = true;
	this.packageName = packageName;
	this.classes = new haxe_ds_StringMap();
	this.packages = new haxe_ds_StringMap();
	this.stats = new utest_ui_common_ResultStats();
};
utest_ui_common_PackageResult.__name__ = "utest.ui.common.PackageResult";
utest_ui_common_PackageResult.prototype = {
	packageName: null
	,isEmpty: null
	,classes: null
	,packages: null
	,stats: null
	,addResult: function(result,flattenPackage) {
		this.isEmpty = false;
		var pack = this.getOrCreatePackage(result.pack,flattenPackage,this);
		var cls = this.getOrCreateClass(pack,result.cls,result.setup,result.teardown);
		var fix = this.createFixture(result.method,result.assertations);
		cls.add(fix);
	}
	,addClass: function(result) {
		this.isEmpty = false;
		var key = result.className;
		var _this = this.classes;
		if(__map_reserved[key] != null) {
			_this.setReserved(key,result);
		} else {
			_this.h[key] = result;
		}
		this.stats.wire(result.stats);
	}
	,addPackage: function(result) {
		this.isEmpty = false;
		var key = result.packageName;
		var _this = this.packages;
		if(__map_reserved[key] != null) {
			_this.setReserved(key,result);
		} else {
			_this.h[key] = result;
		}
		this.stats.wire(result.stats);
	}
	,existsPackage: function(name) {
		var _this = this.packages;
		if(__map_reserved[name] != null) {
			return _this.existsReserved(name);
		} else {
			return _this.h.hasOwnProperty(name);
		}
	}
	,existsClass: function(name) {
		var _this = this.classes;
		if(__map_reserved[name] != null) {
			return _this.existsReserved(name);
		} else {
			return _this.h.hasOwnProperty(name);
		}
	}
	,getPackage: function(name) {
		if(this.packageName == null && name == "") {
			return this;
		}
		var _this = this.packages;
		if(__map_reserved[name] != null) {
			return _this.getReserved(name);
		} else {
			return _this.h[name];
		}
	}
	,getClass: function(name) {
		var _this = this.classes;
		if(__map_reserved[name] != null) {
			return _this.getReserved(name);
		} else {
			return _this.h[name];
		}
	}
	,classNames: function(errorsHavePriority) {
		if(errorsHavePriority == null) {
			errorsHavePriority = true;
		}
		var names = [];
		var name = this.classes.keys();
		while(name.hasNext()) {
			var name1 = name.next();
			names.push(name1);
		}
		if(errorsHavePriority) {
			var me = this;
			names.sort(function(a,b) {
				var as = me.getClass(a).stats;
				var bs = me.getClass(b).stats;
				if(as.hasErrors) {
					if(!bs.hasErrors) {
						return -1;
					} else if(as.errors == bs.errors) {
						return Reflect.compare(a,b);
					} else {
						return Reflect.compare(as.errors,bs.errors);
					}
				} else if(bs.hasErrors) {
					return 1;
				} else if(as.hasFailures) {
					if(!bs.hasFailures) {
						return -1;
					} else if(as.failures == bs.failures) {
						return Reflect.compare(a,b);
					} else {
						return Reflect.compare(as.failures,bs.failures);
					}
				} else if(bs.hasFailures) {
					return 1;
				} else if(as.hasWarnings) {
					if(!bs.hasWarnings) {
						return -1;
					} else if(as.warnings == bs.warnings) {
						return Reflect.compare(a,b);
					} else {
						return Reflect.compare(as.warnings,bs.warnings);
					}
				} else if(bs.hasWarnings) {
					return 1;
				} else {
					return Reflect.compare(a,b);
				}
			});
		} else {
			names.sort(function(a1,b1) {
				return Reflect.compare(a1,b1);
			});
		}
		return names;
	}
	,packageNames: function(errorsHavePriority) {
		if(errorsHavePriority == null) {
			errorsHavePriority = true;
		}
		var names = [];
		if(this.packageName == null) {
			names.push("");
		}
		var name = this.packages.keys();
		while(name.hasNext()) {
			var name1 = name.next();
			names.push(name1);
		}
		if(errorsHavePriority) {
			var me = this;
			names.sort(function(a,b) {
				var as = me.getPackage(a).stats;
				var bs = me.getPackage(b).stats;
				if(as.hasErrors) {
					if(!bs.hasErrors) {
						return -1;
					} else if(as.errors == bs.errors) {
						return Reflect.compare(a,b);
					} else {
						return Reflect.compare(as.errors,bs.errors);
					}
				} else if(bs.hasErrors) {
					return 1;
				} else if(as.hasFailures) {
					if(!bs.hasFailures) {
						return -1;
					} else if(as.failures == bs.failures) {
						return Reflect.compare(a,b);
					} else {
						return Reflect.compare(as.failures,bs.failures);
					}
				} else if(bs.hasFailures) {
					return 1;
				} else if(as.hasWarnings) {
					if(!bs.hasWarnings) {
						return -1;
					} else if(as.warnings == bs.warnings) {
						return Reflect.compare(a,b);
					} else {
						return Reflect.compare(as.warnings,bs.warnings);
					}
				} else if(bs.hasWarnings) {
					return 1;
				} else {
					return Reflect.compare(a,b);
				}
			});
		} else {
			names.sort(function(a1,b1) {
				return Reflect.compare(a1,b1);
			});
		}
		return names;
	}
	,createFixture: function(method,assertations) {
		var f = new utest_ui_common_FixtureResult(method);
		var assertation = $getIterator(assertations);
		while(assertation.hasNext()) {
			var assertation1 = assertation.next();
			f.add(assertation1);
		}
		return f;
	}
	,getOrCreateClass: function(pack,cls,setup,teardown) {
		if(pack.existsClass(cls)) {
			return pack.getClass(cls);
		}
		var c = new utest_ui_common_ClassResult(cls,setup,teardown);
		pack.addClass(c);
		return c;
	}
	,getOrCreatePackage: function(pack,flat,ref) {
		if(pack == null || pack == "") {
			return ref;
		}
		if(flat) {
			if(ref.existsPackage(pack)) {
				return ref.getPackage(pack);
			}
			var p = new utest_ui_common_PackageResult(pack);
			ref.addPackage(p);
			return p;
		} else {
			var parts = pack.split(".");
			var _g = 0;
			while(_g < parts.length) {
				var part = parts[_g];
				++_g;
				ref = this.getOrCreatePackage(part,true,ref);
			}
			return ref;
		}
	}
	,__class__: utest_ui_common_PackageResult
};
var utest_ui_common_ReportTools = function() { };
utest_ui_common_ReportTools.__name__ = "utest.ui.common.ReportTools";
utest_ui_common_ReportTools.hasHeader = function(report,stats) {
	switch(report.displayHeader._hx_index) {
	case 0:
		return true;
	case 1:
		return false;
	case 2:
		if(!stats.isOk) {
			return true;
		}
		switch(report.displaySuccessResults._hx_index) {
		case 1:
			return false;
		case 0:case 2:
			return true;
		}
		break;
	}
};
utest_ui_common_ReportTools.skipResult = function(report,stats,isOk) {
	if(!stats.isOk) {
		return false;
	}
	switch(report.displaySuccessResults._hx_index) {
	case 0:
		return false;
	case 1:
		return true;
	case 2:
		return !isOk;
	}
};
utest_ui_common_ReportTools.hasOutput = function(report,stats) {
	if(!stats.isOk) {
		return true;
	}
	return utest_ui_common_ReportTools.hasHeader(report,stats);
};
var utest_ui_common_ResultAggregator = function(runner,flattenPackage) {
	if(flattenPackage == null) {
		flattenPackage = false;
	}
	if(runner == null) {
		throw new js__$Boot_HaxeError("runner argument is null");
	}
	this.flattenPackage = flattenPackage;
	this.runner = runner;
	runner.onStart.add($bind(this,this.start));
	runner.onProgress.add($bind(this,this.progress));
	runner.onComplete.add($bind(this,this.complete));
	this.onStart = new utest_Notifier();
	this.onComplete = new utest_Dispatcher();
	this.onProgress = new utest_Dispatcher();
};
utest_ui_common_ResultAggregator.__name__ = "utest.ui.common.ResultAggregator";
utest_ui_common_ResultAggregator.prototype = {
	runner: null
	,flattenPackage: null
	,root: null
	,onStart: null
	,onComplete: null
	,onProgress: null
	,start: function(runner) {
		this.checkNonITest();
		this.root = new utest_ui_common_PackageResult(null);
		this.onStart.dispatch();
	}
	,checkNonITest: function() {
		var first = null;
		var total = 0;
		var _g = 0;
		var _g1 = this.runner.length;
		while(_g < _g1) {
			var i = _g++;
			var fixture = this.runner.getFixture(i);
			if(!fixture.isITest) {
				++total;
				if(first == null) {
					var o = fixture.target;
					var c = o == null ? null : js_Boot.getClass(o);
					first = c.__name__;
				}
			}
		}
		if(total > 0) {
			var baseMsg = "implement utest.ITest. Non-ITest tests are deprecated. Implement utest.ITest or extend utest.Test.";
			var msg;
			switch(total) {
			case 1:
				msg = "" + first + " doesn't " + baseMsg;
				break;
			case 2:
				msg = "" + first + " and 1 other don't " + baseMsg;
				break;
			default:
				msg = "" + first + " and " + total + " others don't " + baseMsg;
			}
			haxe_Log.trace(msg,{ fileName : "utest/ui/common/ResultAggregator.hx", lineNumber : 54, className : "utest.ui.common.ResultAggregator", methodName : "checkNonITest"});
		}
	}
	,getOrCreatePackage: function(pack,flat,ref) {
		if(ref == null) {
			ref = this.root;
		}
		if(pack == null || pack == "") {
			return ref;
		}
		if(flat) {
			if(ref.existsPackage(pack)) {
				return ref.getPackage(pack);
			}
			var p = new utest_ui_common_PackageResult(pack);
			ref.addPackage(p);
			return p;
		} else {
			var parts = pack.split(".");
			var _g = 0;
			while(_g < parts.length) {
				var part = parts[_g];
				++_g;
				ref = this.getOrCreatePackage(part,true,ref);
			}
			return ref;
		}
	}
	,getOrCreateClass: function(pack,cls,setup,teardown) {
		if(pack.existsClass(cls)) {
			return pack.getClass(cls);
		}
		var c = new utest_ui_common_ClassResult(cls,setup,teardown);
		pack.addClass(c);
		return c;
	}
	,createFixture: function(result) {
		var f = new utest_ui_common_FixtureResult(result.method);
		var _g_head = result.assertations.h;
		while(_g_head != null) {
			var val = _g_head.item;
			_g_head = _g_head.next;
			f.add(val);
		}
		return f;
	}
	,progress: function(e) {
		this.root.addResult(e.result,this.flattenPackage);
		this.onProgress.dispatch(e);
	}
	,complete: function(runner) {
		if(this.root.isEmpty) {
			this.root.addResult(this.createNoTestsResult(),false);
		}
		this.onComplete.dispatch(this.root);
	}
	,createNoTestsResult: function() {
		var result = new utest_TestResult();
		result.pack = "";
		result.cls = "";
		result.method = "";
		result.assertations = new haxe_ds_List();
		var pos = { fileName : "", lineNumber : 1, className : "utest.Runner", methodName : "run"};
		result.assertations.add(utest_Assertation.Failure("No tests executed.",pos));
		return result;
	}
	,__class__: utest_ui_common_ResultAggregator
};
var utest_ui_common_ResultStats = function() {
	this.assertations = 0;
	this.successes = 0;
	this.failures = 0;
	this.errors = 0;
	this.warnings = 0;
	this.ignores = 0;
	this.isOk = true;
	this.hasFailures = false;
	this.hasErrors = false;
	this.hasWarnings = false;
	this.hasIgnores = false;
	this.onAddSuccesses = new utest_Dispatcher();
	this.onAddFailures = new utest_Dispatcher();
	this.onAddErrors = new utest_Dispatcher();
	this.onAddWarnings = new utest_Dispatcher();
	this.onAddIgnores = new utest_Dispatcher();
};
utest_ui_common_ResultStats.__name__ = "utest.ui.common.ResultStats";
utest_ui_common_ResultStats.prototype = {
	assertations: null
	,successes: null
	,failures: null
	,errors: null
	,warnings: null
	,ignores: null
	,onAddSuccesses: null
	,onAddFailures: null
	,onAddErrors: null
	,onAddWarnings: null
	,onAddIgnores: null
	,isOk: null
	,hasFailures: null
	,hasErrors: null
	,hasWarnings: null
	,hasIgnores: null
	,addSuccesses: function(v) {
		if(v == 0) {
			return;
		}
		this.assertations += v;
		this.successes += v;
		this.onAddSuccesses.dispatch(v);
	}
	,addFailures: function(v) {
		if(v == 0) {
			return;
		}
		this.assertations += v;
		this.failures += v;
		this.hasFailures = this.failures > 0;
		this.isOk = !(this.hasFailures || this.hasErrors || this.hasWarnings);
		this.onAddFailures.dispatch(v);
	}
	,addErrors: function(v) {
		if(v == 0) {
			return;
		}
		this.assertations += v;
		this.errors += v;
		this.hasErrors = this.errors > 0;
		this.isOk = !(this.hasFailures || this.hasErrors || this.hasWarnings);
		this.onAddErrors.dispatch(v);
	}
	,addIgnores: function(v) {
		if(v == 0) {
			return;
		}
		this.assertations += v;
		this.ignores += v;
		this.hasIgnores = this.ignores > 0;
		this.onAddIgnores.dispatch(v);
	}
	,addWarnings: function(v) {
		if(v == 0) {
			return;
		}
		this.assertations += v;
		this.warnings += v;
		this.hasWarnings = this.warnings > 0;
		this.isOk = !(this.hasFailures || this.hasErrors || this.hasWarnings);
		this.onAddWarnings.dispatch(v);
	}
	,sum: function(other) {
		this.addSuccesses(other.successes);
		this.addFailures(other.failures);
		this.addErrors(other.errors);
		this.addWarnings(other.warnings);
		this.addIgnores(other.ignores);
	}
	,subtract: function(other) {
		this.addSuccesses(-other.successes);
		this.addFailures(-other.failures);
		this.addErrors(-other.errors);
		this.addWarnings(-other.warnings);
		this.addIgnores(-other.ignores);
	}
	,wire: function(dependant) {
		dependant.onAddSuccesses.add($bind(this,this.addSuccesses));
		dependant.onAddFailures.add($bind(this,this.addFailures));
		dependant.onAddErrors.add($bind(this,this.addErrors));
		dependant.onAddWarnings.add($bind(this,this.addWarnings));
		dependant.onAddIgnores.add($bind(this,this.addIgnores));
		this.sum(dependant);
	}
	,unwire: function(dependant) {
		dependant.onAddSuccesses.remove($bind(this,this.addSuccesses));
		dependant.onAddFailures.remove($bind(this,this.addFailures));
		dependant.onAddErrors.remove($bind(this,this.addErrors));
		dependant.onAddWarnings.remove($bind(this,this.addWarnings));
		dependant.onAddIgnores.remove($bind(this,this.addIgnores));
		this.subtract(dependant);
	}
	,__class__: utest_ui_common_ResultStats
};
var utest_ui_text_HtmlReport = function(runner,outputHandler,traceRedirected) {
	if(traceRedirected == null) {
		traceRedirected = true;
	}
	this.aggregator = new utest_ui_common_ResultAggregator(runner,true);
	runner.onStart.add($bind(this,this.start));
	this.aggregator.onComplete.add($bind(this,this.complete));
	if(null == outputHandler) {
		this.setHandler($bind(this,this._handler));
	} else {
		this.setHandler(outputHandler);
	}
	if(traceRedirected) {
		this.redirectTrace();
	}
	this.displaySuccessResults = utest_ui_common_SuccessResultsDisplayMode.AlwaysShowSuccessResults;
	this.displayHeader = utest_ui_common_HeaderDisplayMode.AlwaysShowHeader;
};
utest_ui_text_HtmlReport.__name__ = "utest.ui.text.HtmlReport";
utest_ui_text_HtmlReport.__interfaces__ = [utest_ui_common_IReport];
utest_ui_text_HtmlReport.prototype = {
	traceRedirected: null
	,displaySuccessResults: null
	,displayHeader: null
	,handler: null
	,aggregator: null
	,oldTrace: null
	,_traces: null
	,setHandler: function(handler) {
		this.handler = handler;
	}
	,redirectTrace: function() {
		if(this.traceRedirected) {
			return;
		}
		this._traces = [];
		this.oldTrace = haxe_Log.trace;
		haxe_Log.trace = $bind(this,this._trace);
	}
	,restoreTrace: function() {
		if(!this.traceRedirected) {
			return;
		}
		haxe_Log.trace = this.oldTrace;
	}
	,_traceTime: null
	,_trace: function(v,infos) {
		var time = Date.now() / 1000;
		var delta = this._traceTime == null ? 0 : time - this._traceTime;
		this._traces.push({ msg : StringTools.htmlEscape(Std.string(v)), infos : infos, time : time - this.startTime, delta : delta, stack : haxe_CallStack.callStack()});
		this._traceTime = Date.now() / 1000;
	}
	,startTime: null
	,start: function(e) {
		this.startTime = Date.now() / 1000;
	}
	,cls: function(stats) {
		if(stats.hasErrors) {
			return "error";
		} else if(stats.hasFailures) {
			return "failure";
		} else if(stats.hasWarnings) {
			return "warn";
		} else {
			return "ok";
		}
	}
	,resultNumbers: function(buf,stats) {
		var numbers = [];
		if(stats.assertations == 1) {
			numbers.push("<strong>1</strong> test");
		} else {
			numbers.push("<strong>" + stats.assertations + "</strong> tests");
		}
		if(stats.successes != stats.assertations) {
			if(stats.successes == 1) {
				numbers.push("<strong>1</strong> pass");
			} else if(stats.successes > 0) {
				numbers.push("<strong>" + stats.successes + "</strong> passes");
			}
		}
		if(stats.errors == 1) {
			numbers.push("<strong>1</strong> error");
		} else if(stats.errors > 0) {
			numbers.push("<strong>" + stats.errors + "</strong> errors");
		}
		if(stats.failures == 1) {
			numbers.push("<strong>1</strong> failure");
		} else if(stats.failures > 0) {
			numbers.push("<strong>" + stats.failures + "</strong> failures");
		}
		if(stats.warnings == 1) {
			numbers.push("<strong>1</strong> warning");
		} else if(stats.warnings > 0) {
			numbers.push("<strong>" + stats.warnings + "</strong> warnings");
		}
		var x = numbers.join(", ");
		buf.b += Std.string(x);
	}
	,blockNumbers: function(buf,stats) {
		buf.b += Std.string("<div class=\"" + this.cls(stats) + "bg statnumbers\">");
		this.resultNumbers(buf,stats);
		buf.b += "</div>";
	}
	,formatStack: function(stack,addNL) {
		if(addNL == null) {
			addNL = true;
		}
		var parts = [];
		var nl = addNL ? "\n" : "";
		var last = null;
		var count = 1;
		var _g = 0;
		var _g1 = haxe_CallStack.toString(stack).split("\n");
		while(_g < _g1.length) {
			var part = _g1[_g];
			++_g;
			if(StringTools.trim(part) == "") {
				continue;
			}
			if(-1 < part.indexOf("Called from utest.")) {
				continue;
			}
			if(part == last) {
				parts[parts.length - 1] = part + " (#" + ++count + ")";
			} else {
				count = 1;
				last = part;
				parts.push(part);
			}
		}
		var s = "<ul><li>" + parts.join("</li>" + nl + "<li>") + "</li></ul>" + nl;
		return "<div>" + s + "</div>" + nl;
	}
	,addFixture: function(buf,result,name,isOk) {
		if(utest_ui_common_ReportTools.skipResult(this,result.stats,isOk)) {
			return;
		}
		buf.b += "<li class=\"fixture\"><div class=\"li\">";
		buf.b += Std.string("<span class=\"" + this.cls(result.stats) + "bg fixtureresult\">");
		if(result.stats.isOk) {
			buf.b += "OK ";
		} else if(result.stats.hasErrors) {
			buf.b += "ERROR ";
		} else if(result.stats.hasFailures) {
			buf.b += "FAILURE ";
		} else if(result.stats.hasWarnings) {
			buf.b += "WARNING ";
		}
		buf.b = (buf.b += "</span>") + "<div class=\"fixturedetails\">";
		buf.b = (buf.b += Std.string("<strong>" + name + "</strong>")) + ": ";
		this.resultNumbers(buf,result.stats);
		var messages = [];
		var _g = result.iterator();
		while(_g.head != null) {
			var val = _g.head.item;
			_g.head = _g.head.next;
			switch(val._hx_index) {
			case 0:
				break;
			case 1:
				var pos = val.pos;
				var msg = val.msg;
				messages.push("<strong>line " + pos.lineNumber + "</strong>: <em>" + StringTools.htmlEscape(msg) + "</em>");
				break;
			case 2:
				var s = val.stack;
				var e = val.e;
				messages.push("<strong>error</strong>: <em>" + this.getErrorDescription(e) + "</em>\n<br/><strong>stack</strong>:" + this.getErrorStack(s,e));
				break;
			case 3:
				var s1 = val.stack;
				var e1 = val.e;
				messages.push("<strong>setup error</strong>: " + this.getErrorDescription(e1) + "\n<br/><strong>stack</strong>:" + this.getErrorStack(s1,e1));
				break;
			case 4:
				var s2 = val.stack;
				var e2 = val.e;
				messages.push("<strong>tear-down error</strong>: " + this.getErrorDescription(e2) + "\n<br/><strong>stack</strong>:" + this.getErrorStack(s2,e2));
				break;
			case 5:
				var missedAsyncs = val.missedAsyncs;
				messages.push("<strong>missed async call(s)</strong>: " + missedAsyncs);
				break;
			case 6:
				var s3 = val.stack;
				var e3 = val.e;
				messages.push("<strong>async error</strong>: " + this.getErrorDescription(e3) + "\n<br/><strong>stack</strong>:" + this.getErrorStack(s3,e3));
				break;
			case 7:
				var msg1 = val.msg;
				messages.push(StringTools.htmlEscape(msg1));
				break;
			case 8:
				var reason = val.reason;
				messages.push(StringTools.htmlEscape(reason));
				break;
			}
		}
		if(messages.length > 0) {
			buf.b += "<div class=\"testoutput\">";
			var x = messages.join("<br/>");
			buf.b += Std.string(x);
			buf.b += "</div>\n";
		}
		buf.b = (buf.b += "</div>\n") + "</div></li>\n";
	}
	,getErrorDescription: function(e) {
		return Std.string(e);
	}
	,getErrorStack: function(s,e) {
		return this.formatStack(s);
	}
	,addClass: function(buf,result,name,isOk) {
		if(utest_ui_common_ReportTools.skipResult(this,result.stats,isOk)) {
			return;
		}
		buf.b = (buf.b += "<li>") + Std.string("<h2 class=\"classname\">" + name + "</h2>");
		this.blockNumbers(buf,result.stats);
		buf.b += "<ul>\n";
		var _g = 0;
		var _g1 = result.methodNames();
		while(_g < _g1.length) {
			var mname = _g1[_g];
			++_g;
			this.addFixture(buf,result.get(mname),mname,isOk);
		}
		buf.b = (buf.b += "</ul>\n") + "</li>\n";
	}
	,addPackages: function(buf,result,isOk) {
		if(utest_ui_common_ReportTools.skipResult(this,result.stats,isOk)) {
			return;
		}
		buf.b += "<ul id=\"utest-results-packages\">\n";
		var _g = 0;
		var _g1 = result.packageNames(false);
		while(_g < _g1.length) {
			var name = _g1[_g];
			++_g;
			this.addPackage(buf,result.getPackage(name),name,isOk);
		}
		buf.b += "</ul>\n";
	}
	,addPackage: function(buf,result,name,isOk) {
		if(utest_ui_common_ReportTools.skipResult(this,result.stats,isOk)) {
			return;
		}
		if(name == "" && result.classNames().length == 0) {
			return;
		}
		buf.b = (buf.b += "<li>") + Std.string("<h2>" + name + "</h2>");
		this.blockNumbers(buf,result.stats);
		buf.b += "<ul>\n";
		var _g = 0;
		var _g1 = result.classNames();
		while(_g < _g1.length) {
			var cname = _g1[_g];
			++_g;
			this.addClass(buf,result.getClass(cname),cname,isOk);
		}
		buf.b = (buf.b += "</ul>\n") + "</li>\n";
	}
	,getTextResults: function() {
		var newline = "\n";
		var indents = function(count) {
			var _g = [];
			var _g1 = 0;
			while(_g1 < count) {
				++_g1;
				_g.push("  ");
			}
			return _g.join("");
		};
		var dumpStack = function(stack) {
			if(stack.length == 0) {
				return "";
			}
			var parts = haxe_CallStack.toString(stack).split("\n");
			var r = [];
			var _g2 = 0;
			while(_g2 < parts.length) {
				var part = parts[_g2];
				++_g2;
				if(part.indexOf(" utest.") >= 0) {
					continue;
				}
				r.push(part);
			}
			return r.join(newline);
		};
		var buf_b = "";
		var _g3 = 0;
		var _g11 = this.result.packageNames();
		while(_g3 < _g11.length) {
			var pname = _g11[_g3];
			++_g3;
			var pack = this.result.getPackage(pname);
			if(utest_ui_common_ReportTools.skipResult(this,pack.stats,this.result.stats.isOk)) {
				continue;
			}
			var _g4 = 0;
			var _g12 = pack.classNames();
			while(_g4 < _g12.length) {
				var cname = _g12[_g4];
				++_g4;
				var cls = pack.getClass(cname);
				if(utest_ui_common_ReportTools.skipResult(this,cls.stats,this.result.stats.isOk)) {
					continue;
				}
				buf_b += Std.string((pname == "" ? "" : pname + ".") + cname + newline);
				var _g5 = 0;
				var _g13 = cls.methodNames();
				while(_g5 < _g13.length) {
					var mname = _g13[_g5];
					++_g5;
					var fix = cls.get(mname);
					if(utest_ui_common_ReportTools.skipResult(this,fix.stats,this.result.stats.isOk)) {
						continue;
					}
					buf_b += Std.string(indents(1) + mname + ": ");
					if(fix.stats.isOk) {
						buf_b += "OK ";
					} else if(fix.stats.hasErrors) {
						buf_b += "ERROR ";
					} else if(fix.stats.hasFailures) {
						buf_b += "FAILURE ";
					} else if(fix.stats.hasWarnings) {
						buf_b += "WARNING ";
					}
					var messages = "";
					var _g6 = fix.iterator();
					while(_g6.head != null) {
						var val = _g6.head.item;
						_g6.head = _g6.head.next;
						switch(val._hx_index) {
						case 0:
							buf_b += ".";
							break;
						case 1:
							var pos = val.pos;
							var msg = val.msg;
							buf_b += "F";
							messages += indents(2) + "line: " + pos.lineNumber + ", " + msg + newline;
							break;
						case 2:
							var s = val.stack;
							var e = val.e;
							buf_b += "E";
							messages += indents(2) + Std.string(e) + dumpStack(s) + newline;
							break;
						case 3:
							var s1 = val.stack;
							var e1 = val.e;
							buf_b += "S";
							messages += indents(2) + Std.string(e1) + dumpStack(s1) + newline;
							break;
						case 4:
							var s2 = val.stack;
							var e2 = val.e;
							buf_b += "T";
							messages += indents(2) + Std.string(e2) + dumpStack(s2) + newline;
							break;
						case 5:
							var s3 = val.stack;
							var missedAsyncs = val.missedAsyncs;
							buf_b += "O";
							messages += indents(2) + "missed async calls: " + missedAsyncs + dumpStack(s3) + newline;
							break;
						case 6:
							var s4 = val.stack;
							var e3 = val.e;
							buf_b += "A";
							messages += indents(2) + Std.string(e3) + dumpStack(s4) + newline;
							break;
						case 7:
							var msg1 = val.msg;
							buf_b += "W";
							messages += indents(2) + msg1 + newline;
							break;
						case 8:
							var reason = val.reason;
							buf_b += "I";
							if(reason != null && reason != "") {
								messages += indents(2) + ("With reason: " + reason) + newline;
							}
							break;
						}
					}
					buf_b += newline == null ? "null" : "" + newline;
					buf_b += messages == null ? "null" : "" + messages;
				}
			}
		}
		return buf_b;
	}
	,getHeader: function() {
		var buf = new StringBuf();
		if(!utest_ui_common_ReportTools.hasHeader(this,this.result.stats)) {
			return "";
		}
		var end = Date.now() / 1000;
		var time = ((end - this.startTime) * 1000 | 0) / 1000;
		var msg = "TEST OK";
		if(this.result.stats.hasErrors) {
			msg = "TEST ERRORS";
		} else if(this.result.stats.hasFailures) {
			msg = "TEST FAILED";
		} else if(this.result.stats.hasWarnings) {
			msg = "WARNING REPORTED";
		}
		buf.b = (buf.b += Std.string("<h1 class=\"" + this.cls(this.result.stats) + "bg header\">" + msg + "</h1>\n")) + "<div class=\"headerinfo\">";
		this.resultNumbers(buf,this.result.stats);
		buf.b += Std.string(" performed on <strong>" + utest_ui_text_HtmlReport.platform + "</strong>, executed in <strong> " + time + " sec. </strong></div >\n ");
		return buf.b;
	}
	,getTrace: function() {
		var buf_b = "";
		if(this._traces == null || this._traces.length == 0) {
			return "";
		}
		buf_b = "<div class=\"trace\"><h2>traces</h2><ol>";
		var _g = 0;
		var _g1 = this._traces;
		while(_g < _g1.length) {
			var t = _g1[_g];
			++_g;
			buf_b += "<li><div class=\"li\">";
			var stack = StringTools.replace(this.formatStack(t.stack,false),"'","\\'");
			var method = "<span class=\"tracepackage\">" + t.infos.className + "</span><br/>" + t.infos.methodName + "(" + t.infos.lineNumber + ")";
			buf_b += Std.string("<span class=\"tracepos\" onmouseover=\"utestTooltip(this.parentNode, '" + stack + "')\" onmouseout=\"utestRemoveTooltip()\">");
			buf_b += method == null ? "null" : "" + method;
			buf_b += "</span><span class=\"tracetime\">";
			buf_b += Std.string("@ " + this.formatTime(t.time));
			if(Math.round(t.delta * 1000) > 0) {
				buf_b += Std.string(", ~" + this.formatTime(t.delta));
			}
			buf_b += "</span><span class=\"tracemsg\">";
			buf_b += Std.string(StringTools.replace(StringTools.trim(t.msg),"\n","<br/>\n"));
			buf_b += "</span><div class=\"clr\"></div></div></li>";
		}
		buf_b += "</ol></div>";
		return buf_b;
	}
	,getResults: function() {
		var buf = new StringBuf();
		this.addPackages(buf,this.result,this.result.stats.isOk);
		return buf.b;
	}
	,getAll: function() {
		if(!utest_ui_common_ReportTools.hasOutput(this,this.result.stats)) {
			return "";
		} else {
			return this.getHeader() + this.getTrace() + this.getResults();
		}
	}
	,getHtml: function(title) {
		if(null == title) {
			title = "utest: " + utest_ui_text_HtmlReport.platform;
		}
		var s = this.getAll();
		if("" == s) {
			return "";
		} else {
			return this.wrapHtml(title,s);
		}
	}
	,result: null
	,complete: function(result) {
		this.result = result;
		this.handler(this);
		this.restoreTrace();
		var exposedResult = { isOk : result.stats.isOk, message : this.getTextResults()};
		if('undefined' != typeof window) {
			window.utest_result = exposedResult;
		}
	}
	,formatTime: function(t) {
		return Math.round(t * 1000) + " ms";
	}
	,cssStyle: function() {
		return "body, dd, dt {\n  font-family: Verdana, Arial, Sans-serif;\n  font-size: 12px;\n}\ndl {\n  width: 180px;\n}\ndd, dt {\n  margin : 0;\n  padding : 2px 5px;\n  border-top: 1px solid #f0f0f0;\n  border-left: 1px solid #f0f0f0;\n  border-right: 1px solid #CCCCCC;\n  border-bottom: 1px solid #CCCCCC;\n}\ndd.value {\n  text-align: center;\n  background-color: #eeeeee;\n}\ndt {\n  text-align: left;\n  background-color: #e6e6e6;\n  float: left;\n  width: 100px;\n}\n\nh1, h2, h3, h4, h5, h6 {\n  margin: 0;\n  padding: 0;\n}\n\nh1 {\n  text-align: center;\n  font-weight: bold;\n  padding: 5px 0 4px 0;\n  font-family: Arial, Sans-serif;\n  font-size: 18px;\n  border-top: 1px solid #f0f0f0;\n  border-left: 1px solid #f0f0f0;\n  border-right: 1px solid #CCCCCC;\n  border-bottom: 1px solid #CCCCCC;\n  margin: 0 2px 0px 2px;\n}\n\nh2 {\n  font-weight: bold;\n  padding: 2px 0 2px 8px;\n  font-family: Arial, Sans-serif;\n  font-size: 13px;\n  border-top: 1px solid #f0f0f0;\n  border-left: 1px solid #f0f0f0;\n  border-right: 1px solid #CCCCCC;\n  border-bottom: 1px solid #CCCCCC;\n  margin: 0 0 0px 0;\n  background-color: #FFFFFF;\n  color: #777777;\n}\n\nh2.classname {\n  color: #000000;\n}\n\n.okbg {\n  background-color: #66FF55;\n}\n.errorbg {\n  background-color: #CC1100;\n}\n.failurebg {\n  background-color: #EE3322;\n}\n.warnbg {\n  background-color: #FFCC99;\n}\n.headerinfo {\n  text-align: right;\n  font-size: 11px;\n  font - color: 0xCCCCCC;\n  margin: 0 2px 5px 2px;\n  border-left: 1px solid #f0f0f0;\n  border-right: 1px solid #CCCCCC;\n  border-bottom: 1px solid #CCCCCC;\n  padding: 2px;\n}\n\nli {\n  padding: 4px;\n  margin: 2px;\n  border-top: 1px solid #f0f0f0;\n  border-left: 1px solid #f0f0f0;\n  border-right: 1px solid #CCCCCC;\n  border-bottom: 1px solid #CCCCCC;\n  background-color: #e6e6e6;\n}\n\nli.fixture {\n  background-color: #f6f6f6;\n  padding-bottom: 6px;\n}\n\ndiv.fixturedetails {\n  padding-left: 108px;\n}\n\nul {\n  padding: 0;\n  margin: 6px 0 0 0;\n  list-style-type: none;\n}\n\nol {\n  padding: 0 0 0 28px;\n  margin: 0px 0 0 0;\n}\n\n.statnumbers {\n  padding: 2px 8px;\n}\n\n.fixtureresult {\n  width: 100px;\n  text-align: center;\n  display: block;\n  float: left;\n  font-weight: bold;\n  padding: 1px;\n  margin: 0 0 0 0;\n}\n\n.testoutput {\n  border: 1px dashed #CCCCCC;\n  margin: 4px 0 0 0;\n  padding: 4px 8px;\n  background-color: #eeeeee;\n}\n\nspan.tracepos, span.traceposempty {\n  display: block;\n  float: left;\n  font-weight: bold;\n  font-size: 9px;\n  width: 170px;\n  margin: 2px 0 0 2px;\n}\n\nspan.tracepos:hover {\n  cursor : pointer;\n  background-color: #ffff99;\n}\n\nspan.tracemsg {\n  display: block;\n  margin-left: 180px;\n  background-color: #eeeeee;\n  padding: 7px;\n}\n\nspan.tracetime {\n  display: block;\n  float: right;\n  margin: 2px;\n  font-size: 9px;\n  color: #777777;\n}\n\n\ndiv.trace ol {\n  padding: 0 0 0 40px;\n  color: #777777;\n}\n\ndiv.trace li {\n  padding: 0;\n}\n\ndiv.trace li div.li {\n  color: #000000;\n}\n\ndiv.trace h2 {\n  margin: 0 2px 0px 2px;\n  padding-left: 4px;\n}\n\n.tracepackage {\n  color: #777777;\n  font-weight: normal;\n}\n\n.clr {\n  clear: both;\n}\n\n#utesttip {\n  margin-top: -3px;\n  margin-left: 170px;\n  font-size: 9px;\n}\n\n#utesttip li {\n  margin: 0;\n  background-color: #ffff99;\n  padding: 2px 4px;\n  border: 0;\n  border-bottom: 1px dashed #ffff33;\n}";
	}
	,jsScript: function() {
		return "function utestTooltip(ref, text) {\n  var el = document.getElementById(\"utesttip\");\n  if(!el) {\n    var el = document.createElement(\"div\")\n    el.id = \"utesttip\";\n    el.style.position = \"absolute\";\n    document.body.appendChild(el)\n  }\n  var p = utestFindPos(ref);\n  el.style.left = (4 + p[0]) + \"px\";\n  el.style.top = (p[1] - 1) + \"px\";\n  el.innerHTML =  text;\n}\n\nfunction utestFindPos(el) {\n  var left = 0;\n  var top = 0;\n  do {\n    left += el.offsetLeft;\n    top += el.offsetTop;\n  } while(el = el.offsetParent)\n  return [left, top];\n}\n\nfunction utestRemoveTooltip() {\n  var el = document.getElementById(\"utesttip\")\n  if(el)\n    document.body.removeChild(el)\n}";
	}
	,wrapHtml: function(title,s) {
		return "<head>\n<meta http-equiv=\"Content-Type\" content=\"text/html;charset=utf-8\" />\n<title>" + title + "</title>\n      <style type=\"text/css\">" + this.cssStyle() + "</style>\n      <script type=\"text/javascript\">\n" + this.jsScript() + "\n</" + "script>\n</head>\n      <body>\n" + s + "\n</body>\n</html>";
	}
	,_handler: function(report) {
		var _gthis = this;
		if(window.document.readyState == "loading") {
			var onReadyStateChange = null;
			onReadyStateChange = function() {
				if(window.document.readyState != "loading") {
					window.document.removeEventListener("readystatechange",onReadyStateChange);
					_gthis._handler(report);
				}
			};
			window.document.addEventListener("readystatechange",onReadyStateChange);
			return;
		}
		var isDef = function(v) {
			return typeof v != 'undefined';
		};
		var hasProcess = typeof process != 'undefined';
		if(hasProcess) {
			process.stdout.write(report.getHtml());
			return;
		}
		var head = window.document.getElementsByTagName("head")[0];
		var script = window.document.createElement("script");
		script.type = "text/javascript";
		var sjs = report.jsScript();
		if(isDef(script.text)) {
			script.text = sjs;
		} else {
			script.innerHTML = sjs;
		}
		head.appendChild(script);
		var style = window.document.createElement("style");
		style.type = "text/css";
		var scss = report.cssStyle();
		if(isDef(style.styleSheet)) {
			style.styleSheet.cssText = scss;
		} else if(isDef(style.cssText)) {
			style.cssText = scss;
		} else if(isDef(style.innerText)) {
			style.innerText = scss;
		} else {
			style.innerHTML = scss;
		}
		head.appendChild(style);
		var el = window.document.getElementById("utest-results");
		if(null == el) {
			el = window.document.createElement("div");
			el.id = "utest-results";
			window.document.body.appendChild(el);
		}
		el.innerHTML = report.getAll();
	}
	,__class__: utest_ui_text_HtmlReport
};
var utest_ui_text_PlainTextReport = function(runner,outputHandler) {
	this.aggregator = new utest_ui_common_ResultAggregator(runner,true);
	runner.onStart.add($bind(this,this.start));
	this.aggregator.onComplete.add($bind(this,this.complete));
	if(null != outputHandler) {
		this.setHandler(outputHandler);
	}
	this.displaySuccessResults = utest_ui_common_SuccessResultsDisplayMode.AlwaysShowSuccessResults;
	this.displayHeader = utest_ui_common_HeaderDisplayMode.AlwaysShowHeader;
};
utest_ui_text_PlainTextReport.__name__ = "utest.ui.text.PlainTextReport";
utest_ui_text_PlainTextReport.__interfaces__ = [utest_ui_common_IReport];
utest_ui_text_PlainTextReport.prototype = {
	displaySuccessResults: null
	,displayHeader: null
	,handler: null
	,aggregator: null
	,newline: null
	,indent: null
	,setHandler: function(handler) {
		this.handler = handler;
	}
	,startTime: null
	,start: function(e) {
		this.startTime = this.getTime();
	}
	,getTime: function() {
		return Date.now() / 1000;
	}
	,indents: function(c) {
		var s = "";
		while(--c >= 0) s += this.indent;
		return s;
	}
	,dumpStack: function(stack) {
		if(stack.length == 0) {
			return "";
		}
		var parts = haxe_CallStack.toString(stack).split("\n");
		var r = [];
		var _g = 0;
		while(_g < parts.length) {
			var part = parts[_g];
			++_g;
			if(part.indexOf(" utest.") >= 0) {
				continue;
			}
			r.push(part);
		}
		return r.join(this.newline);
	}
	,addHeader: function(buf,result) {
		if(!utest_ui_common_ReportTools.hasHeader(this,result.stats)) {
			return;
		}
		var end = this.getTime();
		var time = ((end - this.startTime) * 1000 | 0) / 1000;
		buf.b += Std.string("\nassertations: " + result.stats.assertations + this.newline);
		buf.b += Std.string("successes: " + result.stats.successes + this.newline);
		buf.b += Std.string("errors: " + result.stats.errors + this.newline);
		buf.b += Std.string("failures: " + result.stats.failures + this.newline);
		buf.b += Std.string("warnings: " + result.stats.warnings + this.newline);
		buf.b += Std.string("execution time: " + time + this.newline);
		buf.b += Std.string(this.newline);
		buf.b += Std.string("results: " + (result.stats.isOk ? "ALL TESTS OK (success: true)" : "SOME TESTS FAILURES (success: false)"));
		buf.b += Std.string(this.newline);
	}
	,result: null
	,getResults: function() {
		var buf = new StringBuf();
		this.addHeader(buf,this.result);
		var _g = 0;
		var _g1 = this.result.packageNames();
		while(_g < _g1.length) {
			var pname = _g1[_g];
			++_g;
			var pack = this.result.getPackage(pname);
			if(utest_ui_common_ReportTools.skipResult(this,pack.stats,this.result.stats.isOk)) {
				continue;
			}
			var _g2 = 0;
			var _g11 = pack.classNames();
			while(_g2 < _g11.length) {
				var cname = _g11[_g2];
				++_g2;
				var cls = pack.getClass(cname);
				if(utest_ui_common_ReportTools.skipResult(this,cls.stats,this.result.stats.isOk)) {
					continue;
				}
				buf.b += Std.string((pname == "" ? "" : pname + ".") + cname + this.newline);
				var _g3 = 0;
				var _g12 = cls.methodNames();
				while(_g3 < _g12.length) {
					var mname = _g12[_g3];
					++_g3;
					var fix = cls.get(mname);
					if(utest_ui_common_ReportTools.skipResult(this,fix.stats,this.result.stats.isOk)) {
						continue;
					}
					buf.b += Std.string(this.indents(1) + mname + ": ");
					if(fix.stats.isOk) {
						buf.b += "OK ";
					} else if(fix.stats.hasErrors) {
						buf.b += "ERROR ";
					} else if(fix.stats.hasFailures) {
						buf.b += "FAILURE ";
					} else if(fix.stats.hasWarnings) {
						buf.b += "WARNING ";
					}
					var messages = "";
					var _g4 = fix.iterator();
					while(_g4.head != null) {
						var val = _g4.head.item;
						_g4.head = _g4.head.next;
						switch(val._hx_index) {
						case 0:
							buf.b += ".";
							break;
						case 1:
							var pos = val.pos;
							var msg = val.msg;
							buf.b += "F";
							messages += this.indents(2) + "line: " + pos.lineNumber + ", " + msg + this.newline;
							break;
						case 2:
							var s = val.stack;
							var e = val.e;
							buf.b += "E";
							messages += this.indents(2) + Std.string(e) + this.dumpStack(s) + this.newline;
							break;
						case 3:
							var s1 = val.stack;
							var e1 = val.e;
							buf.b += "S";
							messages += this.indents(2) + Std.string(e1) + this.dumpStack(s1) + this.newline;
							break;
						case 4:
							var s2 = val.stack;
							var e2 = val.e;
							buf.b += "T";
							messages += this.indents(2) + Std.string(e2) + this.dumpStack(s2) + this.newline;
							break;
						case 5:
							var s3 = val.stack;
							var missedAsyncs = val.missedAsyncs;
							buf.b += "O";
							messages += this.indents(2) + "missed async calls: " + missedAsyncs + this.dumpStack(s3) + this.newline;
							break;
						case 6:
							var s4 = val.stack;
							var e3 = val.e;
							buf.b += "A";
							messages += this.indents(2) + Std.string(e3) + this.dumpStack(s4) + this.newline;
							break;
						case 7:
							var msg1 = val.msg;
							buf.b += "W";
							messages += this.indents(2) + msg1 + this.newline;
							break;
						case 8:
							var reason = val.reason;
							buf.b += "I";
							if(reason != null && reason != "") {
								messages += this.indents(2) + ("With reason: " + reason) + this.newline;
							}
							break;
						}
					}
					buf.b = (buf.b += Std.string(this.newline)) + (messages == null ? "null" : "" + messages);
				}
			}
		}
		return buf.b;
	}
	,complete: function(result) {
		this.result = result;
		if(this.handler != null) {
			this.handler(this);
		}
		if(typeof phantom != "undefined") {
			phantom.exit(result.stats.isOk ? 0 : 1);
		}
		if(typeof process != "undefined") {
			process.exit(result.stats.isOk ? 0 : 1);
		}
	}
	,__class__: utest_ui_text_PlainTextReport
};
var utest_ui_text_PrintReport = function(runner) {
	utest_ui_text_PlainTextReport.call(this,runner,$bind(this,this._handler));
	this.newline = "\n";
	this.indent = "  ";
};
utest_ui_text_PrintReport.__name__ = "utest.ui.text.PrintReport";
utest_ui_text_PrintReport.__super__ = utest_ui_text_PlainTextReport;
utest_ui_text_PrintReport.prototype = $extend(utest_ui_text_PlainTextReport.prototype,{
	_handler: function(report) {
		this._trace(report.getResults());
	}
	,_trace: function(s) {
		s = StringTools.replace(s,"  ",this.indent);
		s = StringTools.replace(s,"\n",this.newline);
		haxe_Log.trace(s,{ fileName : "utest/ui/text/PrintReport.hx", lineNumber : 52, className : "utest.ui.text.PrintReport", methodName : "_trace"});
	}
	,__class__: utest_ui_text_PrintReport
});
var utest_utils_AccessoriesUtils = function() { };
utest_utils_AccessoriesUtils.__name__ = "utest.utils.AccessoriesUtils";
utest_utils_AccessoriesUtils.getSetupClass = function(accessories) {
	if(accessories.setupClass == null) {
		return utest_Async.getResolved;
	} else {
		return accessories.setupClass;
	}
};
utest_utils_AccessoriesUtils.getSetup = function(accessories) {
	if(accessories.setup == null) {
		return utest_Async.getResolved;
	} else {
		return accessories.setup;
	}
};
utest_utils_AccessoriesUtils.getTeardown = function(accessories) {
	if(accessories.teardown == null) {
		return utest_Async.getResolved;
	} else {
		return accessories.teardown;
	}
};
utest_utils_AccessoriesUtils.getTeardownClass = function(accessories) {
	if(accessories.teardownClass == null) {
		return utest_Async.getResolved;
	} else {
		return accessories.teardownClass;
	}
};
var utest_utils_AsyncUtils = function() { };
utest_utils_AsyncUtils.__name__ = "utest.utils.AsyncUtils";
utest_utils_AsyncUtils.orResolved = function(_async) {
	if(_async == null) {
		return utest_Async.getResolved();
	} else {
		return _async;
	}
};
function $getIterator(o) { if( o instanceof Array ) return HxOverrides.iter(o); else return o.iterator(); }
var $fid = 0;
function $bind(o,m) { if( m == null ) return null; if( m.__id__ == null ) m.__id__ = $fid++; var f; if( o.hx__closures__ == null ) o.hx__closures__ = {}; else f = o.hx__closures__[m.__id__]; if( f == null ) { f = m.bind(o); o.hx__closures__[m.__id__] = f; } return f; }
if( String.fromCodePoint == null ) String.fromCodePoint = function(c) { return c < 0x10000 ? String.fromCharCode(c) : String.fromCharCode((c>>10)+0xD7C0)+String.fromCharCode((c&0x3FF)+0xDC00); }
String.prototype.__class__ = String;
String.__name__ = "String";
Array.__name__ = "Array";
Date.prototype.__class__ = Date;
Date.__name__ = "Date";
var Int = { };
var Dynamic = { };
var Float = Number;
var Bool = Boolean;
var Class = { };
var Enum = { };
haxe_ds_ObjectMap.count = 0;
var __map_reserved = {};
Object.defineProperty(js__$Boot_HaxeError.prototype,"message",{ get : function() {
	return String(this.val);
}});
js_Boot.__toStr = ({ }).toString;
hxClipper_ClipperBase.HORIZONTAL = -3.4E+38;
hxClipper_ClipperBase.SKIP = -2;
hxClipper_ClipperBase.UNASSIGNED = -1;
hxClipper_ClipperBase.TOLERANCE = 1.0E-20;
hxClipper_ClipperBase.LO_RANGE = 32767;
hxClipper_ClipperBase.HI_RANGE = 32767;
hxClipper_ClipperOffset.TWO_PI = 6.283185307179586476925286766559;
hxClipper_ClipperOffset.DEFAULT_ARC_TOLERANCE = 0.25;
postite_dro_Coords.notclockcircle = [{ x : 595., y : 225., press : -1.},{ x : 593., y : 225., press : 1.},{ x : 587., y : 225., press : 1.},{ x : 583., y : 225., press : 1.},{ x : 571., y : 225., press : 1.},{ x : 566., y : 225., press : 1.},{ x : 562., y : 225., press : 1.},{ x : 558., y : 225., press : 1.},{ x : 553., y : 225., press : 1.},{ x : 548., y : 226., press : 1.},{ x : 544., y : 228., press : 1.},{ x : 540., y : 230., press : 1.},{ x : 535., y : 232., press : 1.},{ x : 530., y : 235., press : 1.},{ x : 527., y : 237., press : 1.},{ x : 523., y : 239., press : 1.},{ x : 519., y : 242., press : 1.},{ x : 515., y : 245., press : 1.},{ x : 513., y : 247., press : 1.},{ x : 510., y : 250., press : 1.},{ x : 503., y : 256., press : 1.},{ x : 501., y : 259., press : 1.},{ x : 496., y : 264., press : 1.},{ x : 494., y : 267., press : 1.},{ x : 492., y : 270., press : 1.},{ x : 490., y : 273., press : 1.},{ x : 489., y : 276., press : 1.},{ x : 487., y : 280., press : 1.},{ x : 486., y : 283., press : 1.},{ x : 485., y : 287., press : 1.},{ x : 485., y : 294., press : 1.},{ x : 485., y : 297., press : 1.},{ x : 485., y : 302., press : 1.},{ x : 485., y : 306., press : 1.},{ x : 487., y : 313., press : 1.},{ x : 487., y : 316., press : 1.},{ x : 489., y : 319., press : 1.},{ x : 489., y : 322., press : 1.},{ x : 490., y : 326., press : 1.},{ x : 491., y : 329., press : 1.},{ x : 493., y : 332., press : 1.},{ x : 493., y : 335., press : 1.},{ x : 496., y : 341., press : 1.},{ x : 497., y : 345., press : 1.},{ x : 500., y : 347., press : 1.},{ x : 501., y : 349., press : 1.},{ x : 503., y : 350., press : 1.},{ x : 506., y : 352., press : 1.},{ x : 508., y : 354., press : 1.},{ x : 510., y : 354., press : 1.},{ x : 512., y : 356., press : 1.},{ x : 514., y : 357., press : 1.},{ x : 516., y : 357., press : 1.},{ x : 518., y : 358., press : 1.},{ x : 520., y : 359., press : 1.},{ x : 522., y : 360., press : 1.},{ x : 524., y : 361., press : 1.},{ x : 526., y : 363., press : 1.},{ x : 529., y : 365., press : 1.},{ x : 531., y : 365., press : 1.},{ x : 533., y : 365., press : 1.},{ x : 537., y : 367., press : 1.},{ x : 540., y : 368., press : 1.},{ x : 542., y : 368., press : 1.},{ x : 544., y : 369., press : 1.},{ x : 547., y : 370., press : 1.},{ x : 549., y : 370., press : 1.},{ x : 551., y : 370., press : 1.},{ x : 553., y : 370., press : 1.},{ x : 556., y : 370., press : 1.},{ x : 559., y : 370., press : 1.},{ x : 564., y : 370., press : 1.},{ x : 572., y : 370., press : 1.},{ x : 576., y : 370., press : 1.},{ x : 579., y : 369., press : 1.},{ x : 582., y : 369., press : 1.},{ x : 585., y : 368., press : 1.},{ x : 588., y : 368., press : 1.},{ x : 593., y : 367., press : 1.},{ x : 596., y : 367., press : 1.},{ x : 603., y : 363., press : 1.},{ x : 609., y : 361., press : 1.},{ x : 612., y : 361., press : 1.},{ x : 615., y : 361., press : 1.},{ x : 616., y : 361., press : 1.},{ x : 620., y : 361., press : 1.},{ x : 622., y : 361., press : 1.},{ x : 624., y : 361., press : 1.},{ x : 626., y : 361., press : 1.},{ x : 628., y : 361., press : 1.},{ x : 629., y : 361., press : 1.},{ x : 636., y : 359., press : 1.},{ x : 643., y : 353., press : 1.},{ x : 645., y : 352., press : 1.},{ x : 648., y : 350., press : 1.},{ x : 650., y : 350., press : 1.},{ x : 651., y : 348., press : 1.},{ x : 655., y : 344., press : 1.},{ x : 656., y : 343., press : 1.},{ x : 657., y : 340., press : 1.},{ x : 659., y : 338., press : 1.},{ x : 660., y : 335., press : 1.},{ x : 661., y : 333., press : 1.},{ x : 662., y : 331., press : 1.},{ x : 663., y : 329., press : 1.},{ x : 663., y : 327., press : 1.},{ x : 663., y : 325., press : 1.},{ x : 663., y : 324., press : 1.},{ x : 663., y : 321., press : 1.},{ x : 663., y : 320., press : 1.},{ x : 663., y : 316., press : 1.},{ x : 663., y : 308., press : 1.},{ x : 663., y : 305., press : 1.},{ x : 663., y : 302., press : 1.},{ x : 663., y : 299., press : 1.},{ x : 663., y : 297., press : 1.},{ x : 663., y : 295., press : 1.},{ x : 663., y : 293., press : 1.},{ x : 663., y : 288., press : 1.},{ x : 663., y : 283., press : 1.},{ x : 663., y : 281., press : 1.},{ x : 662., y : 279., press : 1.},{ x : 662., y : 278., press : 1.},{ x : 661., y : 276., press : 1.},{ x : 661., y : 273., press : 1.},{ x : 660., y : 271., press : 1.},{ x : 660., y : 270., press : 1.},{ x : 659., y : 268., press : 1.},{ x : 658., y : 267., press : 1.},{ x : 655., y : 264., press : 1.},{ x : 654., y : 262., press : 1.},{ x : 651., y : 259., press : 1.},{ x : 650., y : 258., press : 1.},{ x : 649., y : 256., press : 1.},{ x : 648., y : 254., press : 1.},{ x : 647., y : 253., press : 1.},{ x : 646., y : 252., press : 1.},{ x : 644., y : 251., press : 1.},{ x : 643., y : 250., press : 1.},{ x : 642., y : 249., press : 1.},{ x : 641., y : 248., press : 1.},{ x : 640., y : 247., press : 1.},{ x : 639., y : 247., press : 1.},{ x : 638., y : 246., press : 1.},{ x : 637., y : 245., press : 1.},{ x : 636., y : 244., press : 1.},{ x : 635., y : 242., press : 1.},{ x : 633., y : 242., press : 1.},{ x : 632., y : 241., press : 1.},{ x : 631., y : 241., press : 1.},{ x : 630., y : 241., press : 1.},{ x : 630., y : 240., press : 1.},{ x : 629., y : 240., press : 1.},{ x : 628., y : 240., press : 1.},{ x : 627., y : 240., press : 1.},{ x : 627., y : 239., press : 1.},{ x : 626., y : 239., press : 1.},{ x : 625., y : 239., press : 1.},{ x : 624., y : 238., press : 1.},{ x : 624., y : 238., press : 1.},{ x : 623., y : 237., press : 1.},{ x : 622., y : 237., press : 1.},{ x : 622., y : 236., press : 1.},{ x : 621., y : 236., press : 1.},{ x : 620., y : 236., press : 1.},{ x : 619., y : 234., press : 1.},{ x : 618., y : 233., press : 1.},{ x : 618., y : 232., press : 1.},{ x : 617., y : 231., press : 1.},{ x : 614., y : 231., press : 1.},{ x : 613., y : 231., press : 1.},{ x : 612., y : 231., press : 1.},{ x : 611., y : 231., press : 1.},{ x : 609., y : 231., press : 1.},{ x : 608., y : 231., press : 1.},{ x : 606., y : 231., press : 1.},{ x : 606., y : 231., press : -1.}];
postite_dro_Coords.clockcircle = [{ x : 459., y : 344., press : -1.},{ x : 459., y : 342., press : 1.},{ x : 459., y : 341., press : 1.},{ x : 459., y : 337., press : 1.},{ x : 459., y : 333., press : 1.},{ x : 459., y : 329., press : 1.},{ x : 459., y : 325., press : 1.},{ x : 459., y : 321., press : 1.},{ x : 459., y : 316., press : 1.},{ x : 459., y : 312., press : 1.},{ x : 461., y : 309., press : 1.},{ x : 463., y : 303., press : 1.},{ x : 465., y : 299., press : 1.},{ x : 468., y : 295., press : 1.},{ x : 471., y : 291., press : 1.},{ x : 475., y : 287., press : 1.},{ x : 481., y : 280., press : 1.},{ x : 484., y : 277., press : 1.},{ x : 487., y : 275., press : 1.},{ x : 493., y : 272., press : 1.},{ x : 496., y : 271., press : 1.},{ x : 501., y : 269., press : 1.},{ x : 508., y : 267., press : 1.},{ x : 514., y : 266., press : 1.},{ x : 521., y : 264., press : 1.},{ x : 526., y : 262., press : 1.},{ x : 532., y : 261., press : 1.},{ x : 537., y : 260., press : 1.},{ x : 541., y : 258., press : 1.},{ x : 545., y : 258., press : 1.},{ x : 549., y : 258., press : 1.},{ x : 555., y : 258., press : 1.},{ x : 559., y : 258., press : 1.},{ x : 563., y : 258., press : 1.},{ x : 567., y : 258., press : 1.},{ x : 570., y : 258., press : 1.},{ x : 574., y : 259., press : 1.},{ x : 580., y : 261., press : 1.},{ x : 583., y : 263., press : 1.},{ x : 586., y : 264., press : 1.},{ x : 589., y : 266., press : 1.},{ x : 593., y : 269., press : 1.},{ x : 596., y : 270., press : 1.},{ x : 599., y : 272., press : 1.},{ x : 603., y : 275., press : 1.},{ x : 607., y : 278., press : 1.},{ x : 611., y : 281., press : 1.},{ x : 613., y : 284., press : 1.},{ x : 617., y : 287., press : 1.},{ x : 620., y : 290., press : 1.},{ x : 622., y : 294., press : 1.},{ x : 624., y : 297., press : 1.},{ x : 626., y : 300., press : 1.},{ x : 628., y : 302., press : 1.},{ x : 629., y : 304., press : 1.},{ x : 630., y : 306., press : 1.},{ x : 632., y : 309., press : 1.},{ x : 633., y : 311., press : 1.},{ x : 634., y : 313., press : 1.},{ x : 636., y : 316., press : 1.},{ x : 636., y : 319., press : 1.},{ x : 637., y : 322., press : 1.},{ x : 638., y : 326., press : 1.},{ x : 639., y : 331., press : 1.},{ x : 640., y : 334., press : 1.},{ x : 640., y : 339., press : 1.},{ x : 641., y : 342., press : 1.},{ x : 641., y : 345., press : 1.},{ x : 641., y : 349., press : 1.},{ x : 641., y : 352., press : 1.},{ x : 641., y : 356., press : 1.},{ x : 641., y : 359., press : 1.},{ x : 641., y : 364., press : 1.},{ x : 641., y : 370., press : 1.},{ x : 640., y : 374., press : 1.},{ x : 638., y : 379., press : 1.},{ x : 637., y : 383., press : 1.},{ x : 636., y : 387., press : 1.},{ x : 634., y : 389., press : 1.},{ x : 631., y : 394., press : 1.},{ x : 630., y : 397., press : 1.},{ x : 628., y : 400., press : 1.},{ x : 626., y : 405., press : 1.},{ x : 623., y : 408., press : 1.},{ x : 621., y : 410., press : 1.},{ x : 619., y : 413., press : 1.},{ x : 616., y : 415., press : 1.},{ x : 613., y : 417., press : 1.},{ x : 609., y : 419., press : 1.},{ x : 607., y : 421., press : 1.},{ x : 603., y : 423., press : 1.},{ x : 600., y : 424., press : 1.},{ x : 597., y : 426., press : 1.},{ x : 593., y : 426., press : 1.},{ x : 589., y : 428., press : 1.},{ x : 586., y : 429., press : 1.},{ x : 581., y : 429., press : 1.},{ x : 577., y : 429., press : 1.},{ x : 571., y : 430., press : 1.},{ x : 566., y : 430., press : 1.},{ x : 559., y : 430., press : 1.},{ x : 555., y : 431., press : 1.},{ x : 549., y : 432., press : 1.},{ x : 545., y : 432., press : 1.},{ x : 541., y : 432., press : 1.},{ x : 536., y : 432., press : 1.},{ x : 531., y : 432., press : 1.},{ x : 528., y : 432., press : 1.},{ x : 523., y : 431., press : 1.},{ x : 517., y : 431., press : 1.},{ x : 512., y : 430., press : 1.},{ x : 508., y : 430., press : 1.},{ x : 504., y : 429., press : 1.},{ x : 501., y : 428., press : 1.},{ x : 497., y : 427., press : 1.},{ x : 494., y : 426., press : 1.},{ x : 491., y : 425., press : 1.},{ x : 488., y : 424., press : 1.},{ x : 485., y : 424., press : 1.},{ x : 482., y : 422., press : 1.},{ x : 479., y : 422., press : 1.},{ x : 477., y : 421., press : 1.},{ x : 475., y : 420., press : 1.},{ x : 474., y : 418., press : 1.},{ x : 473., y : 416., press : 1.},{ x : 471., y : 414., press : 1.},{ x : 470., y : 412., press : 1.},{ x : 469., y : 410., press : 1.},{ x : 467., y : 408., press : 1.},{ x : 467., y : 406., press : 1.},{ x : 466., y : 404., press : 1.},{ x : 465., y : 402., press : 1.},{ x : 464., y : 399., press : 1.},{ x : 463., y : 398., press : 1.},{ x : 462., y : 396., press : 1.},{ x : 461., y : 393., press : 1.},{ x : 461., y : 391., press : 1.},{ x : 460., y : 388., press : 1.},{ x : 460., y : 386., press : 1.},{ x : 460., y : 384., press : 1.},{ x : 460., y : 381., press : 1.},{ x : 460., y : 378., press : 1.},{ x : 460., y : 376., press : 1.},{ x : 460., y : 374., press : 1.},{ x : 460., y : 372., press : 1.},{ x : 460., y : 370., press : 1.},{ x : 460., y : 368., press : 1.},{ x : 460., y : 366., press : 1.},{ x : 460., y : 365., press : 1.},{ x : 459., y : 364., press : 1.},{ x : 459., y : 363., press : 1.},{ x : 459., y : 362., press : 1.},{ x : 459., y : 361., press : 1.},{ x : 459., y : 360., press : 1.},{ x : 459., y : 359., press : 1.},{ x : 459., y : 358., press : 1.},{ x : 459., y : 358., press : 1.},{ x : 459., y : 357., press : 1.},{ x : 459., y : 356., press : 1.},{ x : 459., y : 355., press : 1.},{ x : 459., y : 355., press : 1.},{ x : 459., y : 354., press : 1.},{ x : 459., y : 354., press : -1.}];
postite_dro_Coords.small = [{ x : 87., y : 150.},{ x : 87., y : 148.},{ x : 91., y : 140.},{ x : 97., y : 133.},{ x : 105., y : 127.},{ x : 112., y : 124.},{ x : 117., y : 124.},{ x : 128., y : 124.},{ x : 135., y : 135.},{ x : 139., y : 144.},{ x : 145., y : 161.},{ x : 151., y : 175.},{ x : 154., y : 187.},{ x : 155., y : 199.},{ x : 156., y : 210.},{ x : 157., y : 215.},{ x : 158., y : 222.},{ x : 160., y : 226.},{ x : 166., y : 230.},{ x : 174., y : 234.},{ x : 185., y : 237.}];
postite_dro_Coords.closed = [{ x : 294., y : 445., press : -1.},{ x : 293., y : 444., press : 1.},{ x : 290., y : 439., press : 1.},{ x : 287., y : 435., press : 1.},{ x : 285., y : 429., press : 1.},{ x : 279., y : 420., press : 1.},{ x : 276., y : 413., press : 1.},{ x : 274., y : 405., press : 1.},{ x : 272., y : 396., press : 1.},{ x : 271., y : 387., press : 1.},{ x : 270., y : 377., press : 1.},{ x : 270., y : 370., press : 1.},{ x : 270., y : 363., press : 1.},{ x : 270., y : 355., press : 1.},{ x : 270., y : 348., press : 1.},{ x : 270., y : 341., press : 1.},{ x : 272., y : 333., press : 1.},{ x : 275., y : 326., press : 1.},{ x : 278., y : 319., press : 1.},{ x : 279., y : 315., press : 1.},{ x : 283., y : 308., press : 1.},{ x : 286., y : 304., press : 1.},{ x : 290., y : 299., press : 1.},{ x : 294., y : 293., press : 1.},{ x : 300., y : 287., press : 1.},{ x : 310., y : 279., press : 1.},{ x : 320., y : 272., press : 1.},{ x : 333., y : 262., press : 1.},{ x : 345., y : 254., press : 1.},{ x : 359., y : 244., press : 1.},{ x : 396., y : 221., press : 1.},{ x : 419., y : 207., press : 1.},{ x : 442., y : 194., press : 1.},{ x : 465., y : 182., press : 1.},{ x : 509., y : 166., press : 1.},{ x : 524., y : 164., press : 1.},{ x : 539., y : 163., press : 1.},{ x : 554., y : 163., press : 1.},{ x : 562., y : 170., press : 1.},{ x : 571., y : 181., press : 1.},{ x : 583., y : 199., press : 1.},{ x : 596., y : 219., press : 1.},{ x : 607., y : 236., press : 1.},{ x : 647., y : 311., press : 1.},{ x : 648., y : 314., press : 1.},{ x : 649., y : 319., press : 1.},{ x : 652., y : 332., press : 1.},{ x : 653., y : 355., press : 1.},{ x : 652., y : 362., press : 1.},{ x : 649., y : 368., press : 1.},{ x : 635., y : 385., press : 1.},{ x : 627., y : 393., press : 1.},{ x : 610., y : 406., press : 1.},{ x : 603., y : 410., press : 1.},{ x : 590., y : 414., press : 1.},{ x : 583., y : 415., press : 1.},{ x : 578., y : 416., press : 1.},{ x : 573., y : 417., press : 1.},{ x : 567., y : 417., press : 1.},{ x : 558., y : 417., press : 1.},{ x : 553., y : 418., press : 1.},{ x : 548., y : 418., press : 1.},{ x : 535., y : 418., press : 1.},{ x : 528., y : 418., press : 1.},{ x : 522., y : 418., press : 1.},{ x : 503., y : 418., press : 1.},{ x : 497., y : 418., press : 1.},{ x : 482., y : 418., press : 1.},{ x : 473., y : 418., press : 1.},{ x : 448., y : 418., press : 1.},{ x : 440., y : 417., press : 1.},{ x : 423., y : 414., press : 1.},{ x : 415., y : 413., press : 1.},{ x : 407., y : 412., press : 1.},{ x : 392., y : 410., press : 1.},{ x : 373., y : 409., press : 1.},{ x : 367., y : 408., press : 1.},{ x : 353., y : 408., press : 1.},{ x : 347., y : 408., press : 1.},{ x : 341., y : 408., press : 1.},{ x : 335., y : 408., press : 1.},{ x : 322., y : 412., press : 1.},{ x : 316., y : 414., press : 1.},{ x : 309., y : 416., press : 1.},{ x : 301., y : 418., press : 1.},{ x : 296., y : 419., press : 1.},{ x : 289., y : 420., press : 1.},{ x : 284., y : 421., press : 1.},{ x : 279., y : 422., press : 1.},{ x : 274., y : 423., press : 1.},{ x : 270., y : 423., press : 1.},{ x : 266., y : 423., press : 1.},{ x : 262., y : 423., press : 1.},{ x : 259., y : 423., press : 1.},{ x : 256., y : 424., press : 1.},{ x : 253., y : 425., press : 1.},{ x : 251., y : 426., press : 1.},{ x : 248., y : 428., press : 1.},{ x : 247., y : 429., press : 1.},{ x : 246., y : 429., press : 1.},{ x : 245., y : 430., press : 1.},{ x : 245., y : 431., press : 1.},{ x : 245., y : 431., press : -1.}];
postite_dro_Coords.path = [{ x : 87., y : 150., press : -1.},{ x : 87., y : 148., press : 1.},{ x : 91., y : 140., press : 1.},{ x : 97., y : 133., press : 1.},{ x : 105., y : 127., press : 1.},{ x : 112., y : 124., press : 1.},{ x : 117., y : 124., press : 1.},{ x : 128., y : 124., press : 1.},{ x : 135., y : 135., press : 1.},{ x : 139., y : 144., press : 1.},{ x : 145., y : 161., press : 1.},{ x : 151., y : 175., press : 1.},{ x : 154., y : 187., press : 1.},{ x : 155., y : 199., press : 1.},{ x : 156., y : 210., press : 1.},{ x : 157., y : 215., press : 1.},{ x : 158., y : 222., press : 1.},{ x : 160., y : 226., press : 1.},{ x : 166., y : 230., press : 1.},{ x : 174., y : 234., press : 1.},{ x : 185., y : 237., press : 1.},{ x : 199., y : 238., press : 1.},{ x : 212., y : 238., press : 1.},{ x : 224., y : 238., press : 1.},{ x : 229., y : 236., press : 1.},{ x : 233., y : 231., press : 1.},{ x : 234., y : 225., press : 1.},{ x : 234., y : 217., press : 1.},{ x : 234., y : 209., press : 1.},{ x : 235., y : 204., press : 1.},{ x : 237., y : 198., press : 1.},{ x : 239., y : 195., press : 1.},{ x : 244., y : 194., press : 1.},{ x : 250., y : 194., press : 1.},{ x : 260., y : 203., press : 1.},{ x : 271., y : 215., press : 1.},{ x : 279., y : 223., press : 1.},{ x : 288., y : 234., press : 1.},{ x : 294., y : 241., press : 1.},{ x : 301., y : 248., press : 1.},{ x : 306., y : 249., press : 1.},{ x : 310., y : 249., press : 1.},{ x : 315., y : 249., press : 1.},{ x : 320., y : 249., press : 1.},{ x : 325., y : 245., press : 1.},{ x : 328., y : 242., press : 1.},{ x : 329., y : 238., press : 1.},{ x : 330., y : 234., press : 1.},{ x : 331., y : 231., press : 1.},{ x : 333., y : 228., press : 1.},{ x : 335., y : 227., press : 1.},{ x : 339., y : 226., press : 1.},{ x : 345., y : 226., press : 1.},{ x : 352., y : 230., press : 1.},{ x : 358., y : 232., press : 1.},{ x : 363., y : 233., press : 1.},{ x : 366., y : 233., press : 1.},{ x : 369., y : 231., press : 1.},{ x : 369., y : 224., press : 1.},{ x : 369., y : 214., press : 1.},{ x : 369., y : 205., press : 1.},{ x : 369., y : 197., press : 1.},{ x : 370., y : 191., press : 1.},{ x : 372., y : 188., press : 1.},{ x : 377., y : 188., press : 1.},{ x : 385., y : 188., press : 1.},{ x : 398., y : 191., press : 1.},{ x : 418., y : 204., press : 1.},{ x : 428., y : 212., press : 1.},{ x : 432., y : 218., press : 1.},{ x : 434., y : 222., press : 1.},{ x : 436., y : 226., press : 1.},{ x : 436., y : 229., press : 1.},{ x : 433., y : 234., press : 1.},{ x : 425., y : 245., press : 1.},{ x : 416., y : 258., press : 1.},{ x : 403., y : 273., press : 1.},{ x : 386., y : 289., press : 1.},{ x : 366., y : 304., press : 1.},{ x : 344., y : 315., press : 1.},{ x : 323., y : 322., press : 1.},{ x : 309., y : 327., press : 1.},{ x : 292., y : 334., press : 1.},{ x : 281., y : 340., press : 1.},{ x : 275., y : 348., press : 1.},{ x : 267., y : 360., press : 1.},{ x : 260., y : 374., press : 1.},{ x : 258., y : 389., press : 1.},{ x : 257., y : 398., press : 1.},{ x : 257., y : 407., press : 1.},{ x : 259., y : 414., press : 1.},{ x : 265., y : 417., press : 1.},{ x : 275., y : 421., press : 1.},{ x : 289., y : 421., press : 1.},{ x : 303., y : 421., press : 1.},{ x : 327., y : 421., press : 1.},{ x : 336., y : 419., press : 1.},{ x : 345., y : 416., press : 1.},{ x : 351., y : 413., press : 1.},{ x : 353., y : 411., press : 1.},{ x : 354., y : 410., press : 1.},{ x : 355., y : 410., press : 1.},{ x : 356., y : 410., press : 1.},{ x : 360., y : 410., press : 1.},{ x : 367., y : 415., press : 1.},{ x : 384., y : 422., press : 1.},{ x : 393., y : 425., press : 1.},{ x : 401., y : 425., press : 1.},{ x : 408., y : 425., press : 1.},{ x : 410., y : 421., press : 1.},{ x : 410., y : 401., press : 1.},{ x : 400., y : 379., press : 1.},{ x : 386., y : 358., press : 1.},{ x : 375., y : 346., press : 1.},{ x : 369., y : 341., press : 1.},{ x : 364., y : 335., press : 1.},{ x : 360., y : 333., press : 1.},{ x : 357., y : 332., press : 1.},{ x : 353., y : 332., press : 1.},{ x : 351., y : 332., press : 1.},{ x : 351., y : 339., press : 1.},{ x : 357., y : 348., press : 1.},{ x : 367., y : 361., press : 1.},{ x : 382., y : 370., press : 1.},{ x : 394., y : 376., press : 1.},{ x : 408., y : 381., press : 1.},{ x : 419., y : 383., press : 1.},{ x : 428., y : 383., press : 1.},{ x : 435., y : 381., press : 1.},{ x : 444., y : 381., press : 1.},{ x : 449., y : 381., press : 1.},{ x : 453., y : 384., press : 1.},{ x : 457., y : 389., press : 1.},{ x : 458., y : 393., press : 1.},{ x : 459., y : 395., press : 1.},{ x : 460., y : 398., press : 1.},{ x : 460., y : 401., press : 1.},{ x : 460., y : 406., press : 1.},{ x : 460., y : 411., press : 1.},{ x : 459., y : 417., press : 1.},{ x : 453., y : 424., press : 1.},{ x : 444., y : 428., press : 1.},{ x : 433., y : 430., press : 1.},{ x : 421., y : 430., press : 1.},{ x : 407., y : 419., press : 1.},{ x : 391., y : 408., press : 1.},{ x : 374., y : 399., press : 1.},{ x : 358., y : 389., press : 1.},{ x : 344., y : 386., press : 1.},{ x : 331., y : 386., press : 1.},{ x : 317., y : 385., press : 1.},{ x : 295., y : 385., press : 1.},{ x : 278., y : 387., press : 1.},{ x : 263., y : 396., press : 1.},{ x : 252., y : 405., press : 1.},{ x : 241., y : 414., press : 1.},{ x : 234., y : 423., press : 1.},{ x : 226., y : 433., press : 1.},{ x : 221., y : 441., press : 1.},{ x : 218., y : 447., press : 1.},{ x : 217., y : 450., press : 1.},{ x : 214., y : 455., press : 1.},{ x : 212., y : 458., press : 1.},{ x : 211., y : 460., press : 1.},{ x : 211., y : 461., press : 1.},{ x : 212., y : 461., press : 1.},{ x : 219., y : 461., press : 1.},{ x : 224., y : 460., press : 1.},{ x : 229., y : 458., press : 1.},{ x : 231., y : 457., press : 1.},{ x : 232., y : 457., press : 1.},{ x : 232., y : 456., press : 1.},{ x : 231., y : 456., press : 1.},{ x : 218., y : 455., press : 1.},{ x : 200., y : 452., press : 1.},{ x : 174., y : 447., press : 1.},{ x : 156., y : 444., press : 1.},{ x : 137., y : 439., press : 1.},{ x : 124., y : 436., press : 1.},{ x : 112., y : 432., press : 1.},{ x : 105., y : 428., press : 1.},{ x : 100., y : 425., press : 1.},{ x : 95., y : 421., press : 1.},{ x : 90., y : 418., press : 1.},{ x : 88., y : 413., press : 1.},{ x : 85., y : 409., press : 1.},{ x : 82., y : 403., press : 1.},{ x : 80., y : 394., press : 1.},{ x : 79., y : 385., press : 1.},{ x : 79., y : 372., press : 1.},{ x : 79., y : 365., press : 1.},{ x : 80., y : 359., press : 1.},{ x : 84., y : 354., press : 1.},{ x : 94., y : 347., press : 1.},{ x : 99., y : 345., press : 1.},{ x : 103., y : 342., press : 1.},{ x : 107., y : 339., press : 1.},{ x : 109., y : 337., press : 1.},{ x : 111., y : 335., press : 1.},{ x : 111., y : 331., press : 1.},{ x : 111., y : 326., press : 1.},{ x : 109., y : 321., press : 1.},{ x : 99., y : 309., press : 1.},{ x : 93., y : 303., press : 1.},{ x : 86., y : 298., press : 1.},{ x : 78., y : 294., press : 1.},{ x : 70., y : 291., press : 1.},{ x : 61., y : 289., press : 1.},{ x : 56., y : 287., press : 1.},{ x : 56., y : 287., press : -1.}];
postite_dro__$Couleur_Couleur_$Impl_$.Rouge = 13382400;
postite_dro__$Couleur_Couleur_$Impl_$.Bleu = 1769883;
postite_dro__$Couleur_Couleur_$Impl_$.Orange = 16016923;
postite_dro__$Couleur_Couleur_$Impl_$.Ombre = 4137476;
postite_dro__$Couleur_Couleur_$Impl_$.Jaune = 16768629;
postite_dro__$Couleur_Couleur_$Impl_$.Ocre = 14659372;
postite_dro__$Couleur_Couleur_$Impl_$.Vert = 6856049;
postite_dro__$Couleur_Couleur_$Impl_$.Prusse = 17767;
postite_dro__$Couleur_Couleur_$Impl_$.Olive = 8421376;
postite_dro__$Couleur_Couleur_$Impl_$.Noir = 0;
postite_dro__$Couleur_Couleur_$Impl_$.Blanc = 16777215;
postite_dro__$Couleur_Couleur_$Impl_$.Gris = 8355711;
postite_dro_Dro.fill = "#ooaaff";
postite_geom_Geste.NumPoints = 64;
postite_geom_Geste.SquareSize = 250.0;
postite_geom_Geste.Origin = postite_geom__$CoolPoint_Point_$Impl_$._new(0,0);
postite_geom_Geste.Diagonal = Math.sqrt(postite_geom_Geste.SquareSize * postite_geom_Geste.SquareSize + postite_geom_Geste.SquareSize * postite_geom_Geste.SquareSize);
postite_geom_Geste.HalfDiagonal = 0.5 * postite_geom_Geste.Diagonal;
postite_geom_Geste.AngleRange = postite_geom_Geste.Deg2Rad(45.0);
postite_geom_Geste.AnglePrecision = postite_geom_Geste.Deg2Rad(2.0);
postite_geom_Geste.Phi = 0.5 * (-1.0 + Math.sqrt(5.0));
postite_geom_UnistrokePatterns.unimap = (function($this) {
	var $r;
	var _g = new haxe_ds_StringMap();
	{
		var value = [postite_geom__$CoolPoint_Point_$Impl_$._new(137,139),postite_geom__$CoolPoint_Point_$Impl_$._new(135,141),postite_geom__$CoolPoint_Point_$Impl_$._new(133,144),postite_geom__$CoolPoint_Point_$Impl_$._new(132,146),postite_geom__$CoolPoint_Point_$Impl_$._new(130,149),postite_geom__$CoolPoint_Point_$Impl_$._new(128,151),postite_geom__$CoolPoint_Point_$Impl_$._new(126,155),postite_geom__$CoolPoint_Point_$Impl_$._new(123,160),postite_geom__$CoolPoint_Point_$Impl_$._new(120,166),postite_geom__$CoolPoint_Point_$Impl_$._new(116,171),postite_geom__$CoolPoint_Point_$Impl_$._new(112,177),postite_geom__$CoolPoint_Point_$Impl_$._new(107,183),postite_geom__$CoolPoint_Point_$Impl_$._new(102,188),postite_geom__$CoolPoint_Point_$Impl_$._new(100,191),postite_geom__$CoolPoint_Point_$Impl_$._new(95,195),postite_geom__$CoolPoint_Point_$Impl_$._new(90,199),postite_geom__$CoolPoint_Point_$Impl_$._new(86,203),postite_geom__$CoolPoint_Point_$Impl_$._new(82,206),postite_geom__$CoolPoint_Point_$Impl_$._new(80,209),postite_geom__$CoolPoint_Point_$Impl_$._new(75,213),postite_geom__$CoolPoint_Point_$Impl_$._new(73,213),postite_geom__$CoolPoint_Point_$Impl_$._new(70,216),postite_geom__$CoolPoint_Point_$Impl_$._new(67,219),postite_geom__$CoolPoint_Point_$Impl_$._new(64,221),postite_geom__$CoolPoint_Point_$Impl_$._new(61,223),postite_geom__$CoolPoint_Point_$Impl_$._new(60,225),postite_geom__$CoolPoint_Point_$Impl_$._new(62,226),postite_geom__$CoolPoint_Point_$Impl_$._new(65,225),postite_geom__$CoolPoint_Point_$Impl_$._new(67,226),postite_geom__$CoolPoint_Point_$Impl_$._new(74,226),postite_geom__$CoolPoint_Point_$Impl_$._new(77,227),postite_geom__$CoolPoint_Point_$Impl_$._new(85,229),postite_geom__$CoolPoint_Point_$Impl_$._new(91,230),postite_geom__$CoolPoint_Point_$Impl_$._new(99,231),postite_geom__$CoolPoint_Point_$Impl_$._new(108,232),postite_geom__$CoolPoint_Point_$Impl_$._new(116,233),postite_geom__$CoolPoint_Point_$Impl_$._new(125,233),postite_geom__$CoolPoint_Point_$Impl_$._new(134,234),postite_geom__$CoolPoint_Point_$Impl_$._new(145,233),postite_geom__$CoolPoint_Point_$Impl_$._new(153,232),postite_geom__$CoolPoint_Point_$Impl_$._new(160,233),postite_geom__$CoolPoint_Point_$Impl_$._new(170,234),postite_geom__$CoolPoint_Point_$Impl_$._new(177,235),postite_geom__$CoolPoint_Point_$Impl_$._new(179,236),postite_geom__$CoolPoint_Point_$Impl_$._new(186,237),postite_geom__$CoolPoint_Point_$Impl_$._new(193,238),postite_geom__$CoolPoint_Point_$Impl_$._new(198,239),postite_geom__$CoolPoint_Point_$Impl_$._new(200,237),postite_geom__$CoolPoint_Point_$Impl_$._new(202,239),postite_geom__$CoolPoint_Point_$Impl_$._new(204,238),postite_geom__$CoolPoint_Point_$Impl_$._new(206,234),postite_geom__$CoolPoint_Point_$Impl_$._new(205,230),postite_geom__$CoolPoint_Point_$Impl_$._new(202,222),postite_geom__$CoolPoint_Point_$Impl_$._new(197,216),postite_geom__$CoolPoint_Point_$Impl_$._new(192,207),postite_geom__$CoolPoint_Point_$Impl_$._new(186,198),postite_geom__$CoolPoint_Point_$Impl_$._new(179,189),postite_geom__$CoolPoint_Point_$Impl_$._new(174,183),postite_geom__$CoolPoint_Point_$Impl_$._new(170,178),postite_geom__$CoolPoint_Point_$Impl_$._new(164,171),postite_geom__$CoolPoint_Point_$Impl_$._new(161,168),postite_geom__$CoolPoint_Point_$Impl_$._new(154,160),postite_geom__$CoolPoint_Point_$Impl_$._new(148,155),postite_geom__$CoolPoint_Point_$Impl_$._new(143,150),postite_geom__$CoolPoint_Point_$Impl_$._new(138,148),postite_geom__$CoolPoint_Point_$Impl_$._new(136,148)];
		if(__map_reserved["triangle"] != null) {
			_g.setReserved("triangle",value);
		} else {
			_g.h["triangle"] = value;
		}
	}
	{
		var value1 = [postite_geom__$CoolPoint_Point_$Impl_$._new(87,142),postite_geom__$CoolPoint_Point_$Impl_$._new(89,145),postite_geom__$CoolPoint_Point_$Impl_$._new(91,148),postite_geom__$CoolPoint_Point_$Impl_$._new(93,151),postite_geom__$CoolPoint_Point_$Impl_$._new(96,155),postite_geom__$CoolPoint_Point_$Impl_$._new(98,157),postite_geom__$CoolPoint_Point_$Impl_$._new(100,160),postite_geom__$CoolPoint_Point_$Impl_$._new(102,162),postite_geom__$CoolPoint_Point_$Impl_$._new(106,167),postite_geom__$CoolPoint_Point_$Impl_$._new(108,169),postite_geom__$CoolPoint_Point_$Impl_$._new(110,171),postite_geom__$CoolPoint_Point_$Impl_$._new(115,177),postite_geom__$CoolPoint_Point_$Impl_$._new(119,183),postite_geom__$CoolPoint_Point_$Impl_$._new(123,189),postite_geom__$CoolPoint_Point_$Impl_$._new(127,193),postite_geom__$CoolPoint_Point_$Impl_$._new(129,196),postite_geom__$CoolPoint_Point_$Impl_$._new(133,200),postite_geom__$CoolPoint_Point_$Impl_$._new(137,206),postite_geom__$CoolPoint_Point_$Impl_$._new(140,209),postite_geom__$CoolPoint_Point_$Impl_$._new(143,212),postite_geom__$CoolPoint_Point_$Impl_$._new(146,215),postite_geom__$CoolPoint_Point_$Impl_$._new(151,220),postite_geom__$CoolPoint_Point_$Impl_$._new(153,222),postite_geom__$CoolPoint_Point_$Impl_$._new(155,223),postite_geom__$CoolPoint_Point_$Impl_$._new(157,225),postite_geom__$CoolPoint_Point_$Impl_$._new(158,223),postite_geom__$CoolPoint_Point_$Impl_$._new(157,218),postite_geom__$CoolPoint_Point_$Impl_$._new(155,211),postite_geom__$CoolPoint_Point_$Impl_$._new(154,208),postite_geom__$CoolPoint_Point_$Impl_$._new(152,200),postite_geom__$CoolPoint_Point_$Impl_$._new(150,189),postite_geom__$CoolPoint_Point_$Impl_$._new(148,179),postite_geom__$CoolPoint_Point_$Impl_$._new(147,170),postite_geom__$CoolPoint_Point_$Impl_$._new(147,158),postite_geom__$CoolPoint_Point_$Impl_$._new(147,148),postite_geom__$CoolPoint_Point_$Impl_$._new(147,141),postite_geom__$CoolPoint_Point_$Impl_$._new(147,136),postite_geom__$CoolPoint_Point_$Impl_$._new(144,135),postite_geom__$CoolPoint_Point_$Impl_$._new(142,137),postite_geom__$CoolPoint_Point_$Impl_$._new(140,139),postite_geom__$CoolPoint_Point_$Impl_$._new(135,145),postite_geom__$CoolPoint_Point_$Impl_$._new(131,152),postite_geom__$CoolPoint_Point_$Impl_$._new(124,163),postite_geom__$CoolPoint_Point_$Impl_$._new(116,177),postite_geom__$CoolPoint_Point_$Impl_$._new(108,191),postite_geom__$CoolPoint_Point_$Impl_$._new(100,206),postite_geom__$CoolPoint_Point_$Impl_$._new(94,217),postite_geom__$CoolPoint_Point_$Impl_$._new(91,222),postite_geom__$CoolPoint_Point_$Impl_$._new(89,225),postite_geom__$CoolPoint_Point_$Impl_$._new(87,226),postite_geom__$CoolPoint_Point_$Impl_$._new(87,224)];
		if(__map_reserved["x"] != null) {
			_g.setReserved("x",value1);
		} else {
			_g.h["x"] = value1;
		}
	}
	{
		var value2 = [postite_geom__$CoolPoint_Point_$Impl_$._new(78,149),postite_geom__$CoolPoint_Point_$Impl_$._new(78,153),postite_geom__$CoolPoint_Point_$Impl_$._new(78,157),postite_geom__$CoolPoint_Point_$Impl_$._new(78,160),postite_geom__$CoolPoint_Point_$Impl_$._new(79,162),postite_geom__$CoolPoint_Point_$Impl_$._new(79,164),postite_geom__$CoolPoint_Point_$Impl_$._new(79,167),postite_geom__$CoolPoint_Point_$Impl_$._new(79,169),postite_geom__$CoolPoint_Point_$Impl_$._new(79,173),postite_geom__$CoolPoint_Point_$Impl_$._new(79,178),postite_geom__$CoolPoint_Point_$Impl_$._new(79,183),postite_geom__$CoolPoint_Point_$Impl_$._new(80,189),postite_geom__$CoolPoint_Point_$Impl_$._new(80,193),postite_geom__$CoolPoint_Point_$Impl_$._new(80,198),postite_geom__$CoolPoint_Point_$Impl_$._new(80,202),postite_geom__$CoolPoint_Point_$Impl_$._new(81,208),postite_geom__$CoolPoint_Point_$Impl_$._new(81,210),postite_geom__$CoolPoint_Point_$Impl_$._new(81,216),postite_geom__$CoolPoint_Point_$Impl_$._new(82,222),postite_geom__$CoolPoint_Point_$Impl_$._new(82,224),postite_geom__$CoolPoint_Point_$Impl_$._new(82,227),postite_geom__$CoolPoint_Point_$Impl_$._new(83,229),postite_geom__$CoolPoint_Point_$Impl_$._new(83,231),postite_geom__$CoolPoint_Point_$Impl_$._new(85,230),postite_geom__$CoolPoint_Point_$Impl_$._new(88,232),postite_geom__$CoolPoint_Point_$Impl_$._new(90,233),postite_geom__$CoolPoint_Point_$Impl_$._new(92,232),postite_geom__$CoolPoint_Point_$Impl_$._new(94,233),postite_geom__$CoolPoint_Point_$Impl_$._new(99,232),postite_geom__$CoolPoint_Point_$Impl_$._new(102,233),postite_geom__$CoolPoint_Point_$Impl_$._new(106,233),postite_geom__$CoolPoint_Point_$Impl_$._new(109,234),postite_geom__$CoolPoint_Point_$Impl_$._new(117,235),postite_geom__$CoolPoint_Point_$Impl_$._new(123,236),postite_geom__$CoolPoint_Point_$Impl_$._new(126,236),postite_geom__$CoolPoint_Point_$Impl_$._new(135,237),postite_geom__$CoolPoint_Point_$Impl_$._new(142,238),postite_geom__$CoolPoint_Point_$Impl_$._new(145,238),postite_geom__$CoolPoint_Point_$Impl_$._new(152,238),postite_geom__$CoolPoint_Point_$Impl_$._new(154,239),postite_geom__$CoolPoint_Point_$Impl_$._new(165,238),postite_geom__$CoolPoint_Point_$Impl_$._new(174,237),postite_geom__$CoolPoint_Point_$Impl_$._new(179,236),postite_geom__$CoolPoint_Point_$Impl_$._new(186,235),postite_geom__$CoolPoint_Point_$Impl_$._new(191,235),postite_geom__$CoolPoint_Point_$Impl_$._new(195,233),postite_geom__$CoolPoint_Point_$Impl_$._new(197,233),postite_geom__$CoolPoint_Point_$Impl_$._new(200,233),postite_geom__$CoolPoint_Point_$Impl_$._new(201,235),postite_geom__$CoolPoint_Point_$Impl_$._new(201,233),postite_geom__$CoolPoint_Point_$Impl_$._new(199,231),postite_geom__$CoolPoint_Point_$Impl_$._new(198,226),postite_geom__$CoolPoint_Point_$Impl_$._new(198,220),postite_geom__$CoolPoint_Point_$Impl_$._new(196,207),postite_geom__$CoolPoint_Point_$Impl_$._new(195,195),postite_geom__$CoolPoint_Point_$Impl_$._new(195,181),postite_geom__$CoolPoint_Point_$Impl_$._new(195,173),postite_geom__$CoolPoint_Point_$Impl_$._new(195,163),postite_geom__$CoolPoint_Point_$Impl_$._new(194,155),postite_geom__$CoolPoint_Point_$Impl_$._new(192,145),postite_geom__$CoolPoint_Point_$Impl_$._new(192,143),postite_geom__$CoolPoint_Point_$Impl_$._new(192,138),postite_geom__$CoolPoint_Point_$Impl_$._new(191,135),postite_geom__$CoolPoint_Point_$Impl_$._new(191,133),postite_geom__$CoolPoint_Point_$Impl_$._new(191,130),postite_geom__$CoolPoint_Point_$Impl_$._new(190,128),postite_geom__$CoolPoint_Point_$Impl_$._new(188,129),postite_geom__$CoolPoint_Point_$Impl_$._new(186,129),postite_geom__$CoolPoint_Point_$Impl_$._new(181,132),postite_geom__$CoolPoint_Point_$Impl_$._new(173,131),postite_geom__$CoolPoint_Point_$Impl_$._new(162,131),postite_geom__$CoolPoint_Point_$Impl_$._new(151,132),postite_geom__$CoolPoint_Point_$Impl_$._new(149,132),postite_geom__$CoolPoint_Point_$Impl_$._new(138,132),postite_geom__$CoolPoint_Point_$Impl_$._new(136,132),postite_geom__$CoolPoint_Point_$Impl_$._new(122,131),postite_geom__$CoolPoint_Point_$Impl_$._new(120,131),postite_geom__$CoolPoint_Point_$Impl_$._new(109,130),postite_geom__$CoolPoint_Point_$Impl_$._new(107,130),postite_geom__$CoolPoint_Point_$Impl_$._new(90,132),postite_geom__$CoolPoint_Point_$Impl_$._new(81,133),postite_geom__$CoolPoint_Point_$Impl_$._new(76,133)];
		if(__map_reserved["rectangle"] != null) {
			_g.setReserved("rectangle",value2);
		} else {
			_g.h["rectangle"] = value2;
		}
	}
	{
		var value3 = [postite_geom__$CoolPoint_Point_$Impl_$._new(127,141),postite_geom__$CoolPoint_Point_$Impl_$._new(124,140),postite_geom__$CoolPoint_Point_$Impl_$._new(120,139),postite_geom__$CoolPoint_Point_$Impl_$._new(118,139),postite_geom__$CoolPoint_Point_$Impl_$._new(116,139),postite_geom__$CoolPoint_Point_$Impl_$._new(111,140),postite_geom__$CoolPoint_Point_$Impl_$._new(109,141),postite_geom__$CoolPoint_Point_$Impl_$._new(104,144),postite_geom__$CoolPoint_Point_$Impl_$._new(100,147),postite_geom__$CoolPoint_Point_$Impl_$._new(96,152),postite_geom__$CoolPoint_Point_$Impl_$._new(93,157),postite_geom__$CoolPoint_Point_$Impl_$._new(90,163),postite_geom__$CoolPoint_Point_$Impl_$._new(87,169),postite_geom__$CoolPoint_Point_$Impl_$._new(85,175),postite_geom__$CoolPoint_Point_$Impl_$._new(83,181),postite_geom__$CoolPoint_Point_$Impl_$._new(82,190),postite_geom__$CoolPoint_Point_$Impl_$._new(82,195),postite_geom__$CoolPoint_Point_$Impl_$._new(83,200),postite_geom__$CoolPoint_Point_$Impl_$._new(84,205),postite_geom__$CoolPoint_Point_$Impl_$._new(88,213),postite_geom__$CoolPoint_Point_$Impl_$._new(91,216),postite_geom__$CoolPoint_Point_$Impl_$._new(96,219),postite_geom__$CoolPoint_Point_$Impl_$._new(103,222),postite_geom__$CoolPoint_Point_$Impl_$._new(108,224),postite_geom__$CoolPoint_Point_$Impl_$._new(111,224),postite_geom__$CoolPoint_Point_$Impl_$._new(120,224),postite_geom__$CoolPoint_Point_$Impl_$._new(133,223),postite_geom__$CoolPoint_Point_$Impl_$._new(142,222),postite_geom__$CoolPoint_Point_$Impl_$._new(152,218),postite_geom__$CoolPoint_Point_$Impl_$._new(160,214),postite_geom__$CoolPoint_Point_$Impl_$._new(167,210),postite_geom__$CoolPoint_Point_$Impl_$._new(173,204),postite_geom__$CoolPoint_Point_$Impl_$._new(178,198),postite_geom__$CoolPoint_Point_$Impl_$._new(179,196),postite_geom__$CoolPoint_Point_$Impl_$._new(182,188),postite_geom__$CoolPoint_Point_$Impl_$._new(182,177),postite_geom__$CoolPoint_Point_$Impl_$._new(178,167),postite_geom__$CoolPoint_Point_$Impl_$._new(170,150),postite_geom__$CoolPoint_Point_$Impl_$._new(163,138),postite_geom__$CoolPoint_Point_$Impl_$._new(152,130),postite_geom__$CoolPoint_Point_$Impl_$._new(143,129),postite_geom__$CoolPoint_Point_$Impl_$._new(140,131),postite_geom__$CoolPoint_Point_$Impl_$._new(129,136),postite_geom__$CoolPoint_Point_$Impl_$._new(126,139)];
		if(__map_reserved["circle"] != null) {
			_g.setReserved("circle",value3);
		} else {
			_g.h["circle"] = value3;
		}
	}
	{
		var value4 = [postite_geom__$CoolPoint_Point_$Impl_$._new(91,185),postite_geom__$CoolPoint_Point_$Impl_$._new(93,185),postite_geom__$CoolPoint_Point_$Impl_$._new(95,185),postite_geom__$CoolPoint_Point_$Impl_$._new(97,185),postite_geom__$CoolPoint_Point_$Impl_$._new(100,188),postite_geom__$CoolPoint_Point_$Impl_$._new(102,189),postite_geom__$CoolPoint_Point_$Impl_$._new(104,190),postite_geom__$CoolPoint_Point_$Impl_$._new(106,193),postite_geom__$CoolPoint_Point_$Impl_$._new(108,195),postite_geom__$CoolPoint_Point_$Impl_$._new(110,198),postite_geom__$CoolPoint_Point_$Impl_$._new(112,201),postite_geom__$CoolPoint_Point_$Impl_$._new(114,204),postite_geom__$CoolPoint_Point_$Impl_$._new(115,207),postite_geom__$CoolPoint_Point_$Impl_$._new(117,210),postite_geom__$CoolPoint_Point_$Impl_$._new(118,212),postite_geom__$CoolPoint_Point_$Impl_$._new(120,214),postite_geom__$CoolPoint_Point_$Impl_$._new(121,217),postite_geom__$CoolPoint_Point_$Impl_$._new(122,219),postite_geom__$CoolPoint_Point_$Impl_$._new(123,222),postite_geom__$CoolPoint_Point_$Impl_$._new(124,224),postite_geom__$CoolPoint_Point_$Impl_$._new(126,226),postite_geom__$CoolPoint_Point_$Impl_$._new(127,229),postite_geom__$CoolPoint_Point_$Impl_$._new(129,231),postite_geom__$CoolPoint_Point_$Impl_$._new(130,233),postite_geom__$CoolPoint_Point_$Impl_$._new(129,231),postite_geom__$CoolPoint_Point_$Impl_$._new(129,228),postite_geom__$CoolPoint_Point_$Impl_$._new(129,226),postite_geom__$CoolPoint_Point_$Impl_$._new(129,224),postite_geom__$CoolPoint_Point_$Impl_$._new(129,221),postite_geom__$CoolPoint_Point_$Impl_$._new(129,218),postite_geom__$CoolPoint_Point_$Impl_$._new(129,212),postite_geom__$CoolPoint_Point_$Impl_$._new(129,208),postite_geom__$CoolPoint_Point_$Impl_$._new(130,198),postite_geom__$CoolPoint_Point_$Impl_$._new(132,189),postite_geom__$CoolPoint_Point_$Impl_$._new(134,182),postite_geom__$CoolPoint_Point_$Impl_$._new(137,173),postite_geom__$CoolPoint_Point_$Impl_$._new(143,164),postite_geom__$CoolPoint_Point_$Impl_$._new(147,157),postite_geom__$CoolPoint_Point_$Impl_$._new(151,151),postite_geom__$CoolPoint_Point_$Impl_$._new(155,144),postite_geom__$CoolPoint_Point_$Impl_$._new(161,137),postite_geom__$CoolPoint_Point_$Impl_$._new(165,131),postite_geom__$CoolPoint_Point_$Impl_$._new(171,122),postite_geom__$CoolPoint_Point_$Impl_$._new(174,118),postite_geom__$CoolPoint_Point_$Impl_$._new(176,114),postite_geom__$CoolPoint_Point_$Impl_$._new(177,112),postite_geom__$CoolPoint_Point_$Impl_$._new(177,114),postite_geom__$CoolPoint_Point_$Impl_$._new(175,116),postite_geom__$CoolPoint_Point_$Impl_$._new(173,118)];
		if(__map_reserved["check"] != null) {
			_g.setReserved("check",value4);
		} else {
			_g.h["check"] = value4;
		}
	}
	{
		var value5 = [postite_geom__$CoolPoint_Point_$Impl_$._new(79,245),postite_geom__$CoolPoint_Point_$Impl_$._new(79,242),postite_geom__$CoolPoint_Point_$Impl_$._new(79,239),postite_geom__$CoolPoint_Point_$Impl_$._new(80,237),postite_geom__$CoolPoint_Point_$Impl_$._new(80,234),postite_geom__$CoolPoint_Point_$Impl_$._new(81,232),postite_geom__$CoolPoint_Point_$Impl_$._new(82,230),postite_geom__$CoolPoint_Point_$Impl_$._new(84,224),postite_geom__$CoolPoint_Point_$Impl_$._new(86,220),postite_geom__$CoolPoint_Point_$Impl_$._new(86,218),postite_geom__$CoolPoint_Point_$Impl_$._new(87,216),postite_geom__$CoolPoint_Point_$Impl_$._new(88,213),postite_geom__$CoolPoint_Point_$Impl_$._new(90,207),postite_geom__$CoolPoint_Point_$Impl_$._new(91,202),postite_geom__$CoolPoint_Point_$Impl_$._new(92,200),postite_geom__$CoolPoint_Point_$Impl_$._new(93,194),postite_geom__$CoolPoint_Point_$Impl_$._new(94,192),postite_geom__$CoolPoint_Point_$Impl_$._new(96,189),postite_geom__$CoolPoint_Point_$Impl_$._new(97,186),postite_geom__$CoolPoint_Point_$Impl_$._new(100,179),postite_geom__$CoolPoint_Point_$Impl_$._new(102,173),postite_geom__$CoolPoint_Point_$Impl_$._new(105,165),postite_geom__$CoolPoint_Point_$Impl_$._new(107,160),postite_geom__$CoolPoint_Point_$Impl_$._new(109,158),postite_geom__$CoolPoint_Point_$Impl_$._new(112,151),postite_geom__$CoolPoint_Point_$Impl_$._new(115,144),postite_geom__$CoolPoint_Point_$Impl_$._new(117,139),postite_geom__$CoolPoint_Point_$Impl_$._new(119,136),postite_geom__$CoolPoint_Point_$Impl_$._new(119,134),postite_geom__$CoolPoint_Point_$Impl_$._new(120,132),postite_geom__$CoolPoint_Point_$Impl_$._new(121,129),postite_geom__$CoolPoint_Point_$Impl_$._new(122,127),postite_geom__$CoolPoint_Point_$Impl_$._new(124,125),postite_geom__$CoolPoint_Point_$Impl_$._new(126,124),postite_geom__$CoolPoint_Point_$Impl_$._new(129,125),postite_geom__$CoolPoint_Point_$Impl_$._new(131,127),postite_geom__$CoolPoint_Point_$Impl_$._new(132,130),postite_geom__$CoolPoint_Point_$Impl_$._new(136,139),postite_geom__$CoolPoint_Point_$Impl_$._new(141,154),postite_geom__$CoolPoint_Point_$Impl_$._new(145,166),postite_geom__$CoolPoint_Point_$Impl_$._new(151,182),postite_geom__$CoolPoint_Point_$Impl_$._new(156,193),postite_geom__$CoolPoint_Point_$Impl_$._new(157,196),postite_geom__$CoolPoint_Point_$Impl_$._new(161,209),postite_geom__$CoolPoint_Point_$Impl_$._new(162,211),postite_geom__$CoolPoint_Point_$Impl_$._new(167,223),postite_geom__$CoolPoint_Point_$Impl_$._new(169,229),postite_geom__$CoolPoint_Point_$Impl_$._new(170,231),postite_geom__$CoolPoint_Point_$Impl_$._new(173,237),postite_geom__$CoolPoint_Point_$Impl_$._new(176,242),postite_geom__$CoolPoint_Point_$Impl_$._new(177,244),postite_geom__$CoolPoint_Point_$Impl_$._new(179,250),postite_geom__$CoolPoint_Point_$Impl_$._new(181,255),postite_geom__$CoolPoint_Point_$Impl_$._new(182,257)];
		if(__map_reserved["caret"] != null) {
			_g.setReserved("caret",value5);
		} else {
			_g.h["caret"] = value5;
		}
	}
	{
		var value6 = [postite_geom__$CoolPoint_Point_$Impl_$._new(68,222),postite_geom__$CoolPoint_Point_$Impl_$._new(70,220),postite_geom__$CoolPoint_Point_$Impl_$._new(73,218),postite_geom__$CoolPoint_Point_$Impl_$._new(75,217),postite_geom__$CoolPoint_Point_$Impl_$._new(77,215),postite_geom__$CoolPoint_Point_$Impl_$._new(80,213),postite_geom__$CoolPoint_Point_$Impl_$._new(82,212),postite_geom__$CoolPoint_Point_$Impl_$._new(84,210),postite_geom__$CoolPoint_Point_$Impl_$._new(87,209),postite_geom__$CoolPoint_Point_$Impl_$._new(89,208),postite_geom__$CoolPoint_Point_$Impl_$._new(92,206),postite_geom__$CoolPoint_Point_$Impl_$._new(95,204),postite_geom__$CoolPoint_Point_$Impl_$._new(101,201),postite_geom__$CoolPoint_Point_$Impl_$._new(106,198),postite_geom__$CoolPoint_Point_$Impl_$._new(112,194),postite_geom__$CoolPoint_Point_$Impl_$._new(118,191),postite_geom__$CoolPoint_Point_$Impl_$._new(124,187),postite_geom__$CoolPoint_Point_$Impl_$._new(127,186),postite_geom__$CoolPoint_Point_$Impl_$._new(132,183),postite_geom__$CoolPoint_Point_$Impl_$._new(138,181),postite_geom__$CoolPoint_Point_$Impl_$._new(141,180),postite_geom__$CoolPoint_Point_$Impl_$._new(146,178),postite_geom__$CoolPoint_Point_$Impl_$._new(154,173),postite_geom__$CoolPoint_Point_$Impl_$._new(159,171),postite_geom__$CoolPoint_Point_$Impl_$._new(161,170),postite_geom__$CoolPoint_Point_$Impl_$._new(166,167),postite_geom__$CoolPoint_Point_$Impl_$._new(168,167),postite_geom__$CoolPoint_Point_$Impl_$._new(171,166),postite_geom__$CoolPoint_Point_$Impl_$._new(174,164),postite_geom__$CoolPoint_Point_$Impl_$._new(177,162),postite_geom__$CoolPoint_Point_$Impl_$._new(180,160),postite_geom__$CoolPoint_Point_$Impl_$._new(182,158),postite_geom__$CoolPoint_Point_$Impl_$._new(183,156),postite_geom__$CoolPoint_Point_$Impl_$._new(181,154),postite_geom__$CoolPoint_Point_$Impl_$._new(178,153),postite_geom__$CoolPoint_Point_$Impl_$._new(171,153),postite_geom__$CoolPoint_Point_$Impl_$._new(164,153),postite_geom__$CoolPoint_Point_$Impl_$._new(160,153),postite_geom__$CoolPoint_Point_$Impl_$._new(150,154),postite_geom__$CoolPoint_Point_$Impl_$._new(147,155),postite_geom__$CoolPoint_Point_$Impl_$._new(141,157),postite_geom__$CoolPoint_Point_$Impl_$._new(137,158),postite_geom__$CoolPoint_Point_$Impl_$._new(135,158),postite_geom__$CoolPoint_Point_$Impl_$._new(137,158),postite_geom__$CoolPoint_Point_$Impl_$._new(140,157),postite_geom__$CoolPoint_Point_$Impl_$._new(143,156),postite_geom__$CoolPoint_Point_$Impl_$._new(151,154),postite_geom__$CoolPoint_Point_$Impl_$._new(160,152),postite_geom__$CoolPoint_Point_$Impl_$._new(170,149),postite_geom__$CoolPoint_Point_$Impl_$._new(179,147),postite_geom__$CoolPoint_Point_$Impl_$._new(185,145),postite_geom__$CoolPoint_Point_$Impl_$._new(192,144),postite_geom__$CoolPoint_Point_$Impl_$._new(196,144),postite_geom__$CoolPoint_Point_$Impl_$._new(198,144),postite_geom__$CoolPoint_Point_$Impl_$._new(200,144),postite_geom__$CoolPoint_Point_$Impl_$._new(201,147),postite_geom__$CoolPoint_Point_$Impl_$._new(199,149),postite_geom__$CoolPoint_Point_$Impl_$._new(194,157),postite_geom__$CoolPoint_Point_$Impl_$._new(191,160),postite_geom__$CoolPoint_Point_$Impl_$._new(186,167),postite_geom__$CoolPoint_Point_$Impl_$._new(180,176),postite_geom__$CoolPoint_Point_$Impl_$._new(177,179),postite_geom__$CoolPoint_Point_$Impl_$._new(171,187),postite_geom__$CoolPoint_Point_$Impl_$._new(169,189),postite_geom__$CoolPoint_Point_$Impl_$._new(165,194),postite_geom__$CoolPoint_Point_$Impl_$._new(164,196)];
		if(__map_reserved["arrow"] != null) {
			_g.setReserved("arrow",value6);
		} else {
			_g.h["arrow"] = value6;
		}
	}
	{
		var value7 = [postite_geom__$CoolPoint_Point_$Impl_$._new(140,124),postite_geom__$CoolPoint_Point_$Impl_$._new(138,123),postite_geom__$CoolPoint_Point_$Impl_$._new(135,122),postite_geom__$CoolPoint_Point_$Impl_$._new(133,123),postite_geom__$CoolPoint_Point_$Impl_$._new(130,123),postite_geom__$CoolPoint_Point_$Impl_$._new(128,124),postite_geom__$CoolPoint_Point_$Impl_$._new(125,125),postite_geom__$CoolPoint_Point_$Impl_$._new(122,124),postite_geom__$CoolPoint_Point_$Impl_$._new(120,124),postite_geom__$CoolPoint_Point_$Impl_$._new(118,124),postite_geom__$CoolPoint_Point_$Impl_$._new(116,125),postite_geom__$CoolPoint_Point_$Impl_$._new(113,125),postite_geom__$CoolPoint_Point_$Impl_$._new(111,125),postite_geom__$CoolPoint_Point_$Impl_$._new(108,124),postite_geom__$CoolPoint_Point_$Impl_$._new(106,125),postite_geom__$CoolPoint_Point_$Impl_$._new(104,125),postite_geom__$CoolPoint_Point_$Impl_$._new(102,124),postite_geom__$CoolPoint_Point_$Impl_$._new(100,123),postite_geom__$CoolPoint_Point_$Impl_$._new(98,123),postite_geom__$CoolPoint_Point_$Impl_$._new(95,124),postite_geom__$CoolPoint_Point_$Impl_$._new(93,123),postite_geom__$CoolPoint_Point_$Impl_$._new(90,124),postite_geom__$CoolPoint_Point_$Impl_$._new(88,124),postite_geom__$CoolPoint_Point_$Impl_$._new(85,125),postite_geom__$CoolPoint_Point_$Impl_$._new(83,126),postite_geom__$CoolPoint_Point_$Impl_$._new(81,127),postite_geom__$CoolPoint_Point_$Impl_$._new(81,129),postite_geom__$CoolPoint_Point_$Impl_$._new(82,131),postite_geom__$CoolPoint_Point_$Impl_$._new(82,134),postite_geom__$CoolPoint_Point_$Impl_$._new(83,138),postite_geom__$CoolPoint_Point_$Impl_$._new(84,141),postite_geom__$CoolPoint_Point_$Impl_$._new(84,144),postite_geom__$CoolPoint_Point_$Impl_$._new(85,148),postite_geom__$CoolPoint_Point_$Impl_$._new(85,151),postite_geom__$CoolPoint_Point_$Impl_$._new(86,156),postite_geom__$CoolPoint_Point_$Impl_$._new(86,160),postite_geom__$CoolPoint_Point_$Impl_$._new(86,164),postite_geom__$CoolPoint_Point_$Impl_$._new(86,168),postite_geom__$CoolPoint_Point_$Impl_$._new(87,171),postite_geom__$CoolPoint_Point_$Impl_$._new(87,175),postite_geom__$CoolPoint_Point_$Impl_$._new(87,179),postite_geom__$CoolPoint_Point_$Impl_$._new(87,182),postite_geom__$CoolPoint_Point_$Impl_$._new(87,186),postite_geom__$CoolPoint_Point_$Impl_$._new(88,188),postite_geom__$CoolPoint_Point_$Impl_$._new(88,195),postite_geom__$CoolPoint_Point_$Impl_$._new(88,198),postite_geom__$CoolPoint_Point_$Impl_$._new(88,201),postite_geom__$CoolPoint_Point_$Impl_$._new(88,207),postite_geom__$CoolPoint_Point_$Impl_$._new(89,211),postite_geom__$CoolPoint_Point_$Impl_$._new(89,213),postite_geom__$CoolPoint_Point_$Impl_$._new(89,217),postite_geom__$CoolPoint_Point_$Impl_$._new(89,222),postite_geom__$CoolPoint_Point_$Impl_$._new(88,225),postite_geom__$CoolPoint_Point_$Impl_$._new(88,229),postite_geom__$CoolPoint_Point_$Impl_$._new(88,231),postite_geom__$CoolPoint_Point_$Impl_$._new(88,233),postite_geom__$CoolPoint_Point_$Impl_$._new(88,235),postite_geom__$CoolPoint_Point_$Impl_$._new(89,237),postite_geom__$CoolPoint_Point_$Impl_$._new(89,240),postite_geom__$CoolPoint_Point_$Impl_$._new(89,242),postite_geom__$CoolPoint_Point_$Impl_$._new(91,241),postite_geom__$CoolPoint_Point_$Impl_$._new(94,241),postite_geom__$CoolPoint_Point_$Impl_$._new(96,240),postite_geom__$CoolPoint_Point_$Impl_$._new(98,239),postite_geom__$CoolPoint_Point_$Impl_$._new(105,240),postite_geom__$CoolPoint_Point_$Impl_$._new(109,240),postite_geom__$CoolPoint_Point_$Impl_$._new(113,239),postite_geom__$CoolPoint_Point_$Impl_$._new(116,240),postite_geom__$CoolPoint_Point_$Impl_$._new(121,239),postite_geom__$CoolPoint_Point_$Impl_$._new(130,240),postite_geom__$CoolPoint_Point_$Impl_$._new(136,237),postite_geom__$CoolPoint_Point_$Impl_$._new(139,237),postite_geom__$CoolPoint_Point_$Impl_$._new(144,238),postite_geom__$CoolPoint_Point_$Impl_$._new(151,237),postite_geom__$CoolPoint_Point_$Impl_$._new(157,236),postite_geom__$CoolPoint_Point_$Impl_$._new(159,237)];
		if(__map_reserved["left square bracket"] != null) {
			_g.setReserved("left square bracket",value7);
		} else {
			_g.h["left square bracket"] = value7;
		}
	}
	{
		var value8 = [postite_geom__$CoolPoint_Point_$Impl_$._new(112,138),postite_geom__$CoolPoint_Point_$Impl_$._new(112,136),postite_geom__$CoolPoint_Point_$Impl_$._new(115,136),postite_geom__$CoolPoint_Point_$Impl_$._new(118,137),postite_geom__$CoolPoint_Point_$Impl_$._new(120,136),postite_geom__$CoolPoint_Point_$Impl_$._new(123,136),postite_geom__$CoolPoint_Point_$Impl_$._new(125,136),postite_geom__$CoolPoint_Point_$Impl_$._new(128,136),postite_geom__$CoolPoint_Point_$Impl_$._new(131,136),postite_geom__$CoolPoint_Point_$Impl_$._new(134,135),postite_geom__$CoolPoint_Point_$Impl_$._new(137,135),postite_geom__$CoolPoint_Point_$Impl_$._new(140,134),postite_geom__$CoolPoint_Point_$Impl_$._new(143,133),postite_geom__$CoolPoint_Point_$Impl_$._new(145,132),postite_geom__$CoolPoint_Point_$Impl_$._new(147,132),postite_geom__$CoolPoint_Point_$Impl_$._new(149,132),postite_geom__$CoolPoint_Point_$Impl_$._new(152,132),postite_geom__$CoolPoint_Point_$Impl_$._new(153,134),postite_geom__$CoolPoint_Point_$Impl_$._new(154,137),postite_geom__$CoolPoint_Point_$Impl_$._new(155,141),postite_geom__$CoolPoint_Point_$Impl_$._new(156,144),postite_geom__$CoolPoint_Point_$Impl_$._new(157,152),postite_geom__$CoolPoint_Point_$Impl_$._new(158,161),postite_geom__$CoolPoint_Point_$Impl_$._new(160,170),postite_geom__$CoolPoint_Point_$Impl_$._new(162,182),postite_geom__$CoolPoint_Point_$Impl_$._new(164,192),postite_geom__$CoolPoint_Point_$Impl_$._new(166,200),postite_geom__$CoolPoint_Point_$Impl_$._new(167,209),postite_geom__$CoolPoint_Point_$Impl_$._new(168,214),postite_geom__$CoolPoint_Point_$Impl_$._new(168,216),postite_geom__$CoolPoint_Point_$Impl_$._new(169,221),postite_geom__$CoolPoint_Point_$Impl_$._new(169,223),postite_geom__$CoolPoint_Point_$Impl_$._new(169,228),postite_geom__$CoolPoint_Point_$Impl_$._new(169,231),postite_geom__$CoolPoint_Point_$Impl_$._new(166,233),postite_geom__$CoolPoint_Point_$Impl_$._new(164,234),postite_geom__$CoolPoint_Point_$Impl_$._new(161,235),postite_geom__$CoolPoint_Point_$Impl_$._new(155,236),postite_geom__$CoolPoint_Point_$Impl_$._new(147,235),postite_geom__$CoolPoint_Point_$Impl_$._new(140,233),postite_geom__$CoolPoint_Point_$Impl_$._new(131,233),postite_geom__$CoolPoint_Point_$Impl_$._new(124,233),postite_geom__$CoolPoint_Point_$Impl_$._new(117,235),postite_geom__$CoolPoint_Point_$Impl_$._new(114,238),postite_geom__$CoolPoint_Point_$Impl_$._new(112,238)];
		if(__map_reserved["right square bracket"] != null) {
			_g.setReserved("right square bracket",value8);
		} else {
			_g.h["right square bracket"] = value8;
		}
	}
	{
		var value9 = [postite_geom__$CoolPoint_Point_$Impl_$._new(89,164),postite_geom__$CoolPoint_Point_$Impl_$._new(90,162),postite_geom__$CoolPoint_Point_$Impl_$._new(92,162),postite_geom__$CoolPoint_Point_$Impl_$._new(94,164),postite_geom__$CoolPoint_Point_$Impl_$._new(95,166),postite_geom__$CoolPoint_Point_$Impl_$._new(96,169),postite_geom__$CoolPoint_Point_$Impl_$._new(97,171),postite_geom__$CoolPoint_Point_$Impl_$._new(99,175),postite_geom__$CoolPoint_Point_$Impl_$._new(101,178),postite_geom__$CoolPoint_Point_$Impl_$._new(103,182),postite_geom__$CoolPoint_Point_$Impl_$._new(106,189),postite_geom__$CoolPoint_Point_$Impl_$._new(108,194),postite_geom__$CoolPoint_Point_$Impl_$._new(111,199),postite_geom__$CoolPoint_Point_$Impl_$._new(114,204),postite_geom__$CoolPoint_Point_$Impl_$._new(117,209),postite_geom__$CoolPoint_Point_$Impl_$._new(119,214),postite_geom__$CoolPoint_Point_$Impl_$._new(122,218),postite_geom__$CoolPoint_Point_$Impl_$._new(124,222),postite_geom__$CoolPoint_Point_$Impl_$._new(126,225),postite_geom__$CoolPoint_Point_$Impl_$._new(128,228),postite_geom__$CoolPoint_Point_$Impl_$._new(130,229),postite_geom__$CoolPoint_Point_$Impl_$._new(133,233),postite_geom__$CoolPoint_Point_$Impl_$._new(134,236),postite_geom__$CoolPoint_Point_$Impl_$._new(136,239),postite_geom__$CoolPoint_Point_$Impl_$._new(138,240),postite_geom__$CoolPoint_Point_$Impl_$._new(139,242),postite_geom__$CoolPoint_Point_$Impl_$._new(140,244),postite_geom__$CoolPoint_Point_$Impl_$._new(142,242),postite_geom__$CoolPoint_Point_$Impl_$._new(142,240),postite_geom__$CoolPoint_Point_$Impl_$._new(142,237),postite_geom__$CoolPoint_Point_$Impl_$._new(143,235),postite_geom__$CoolPoint_Point_$Impl_$._new(143,233),postite_geom__$CoolPoint_Point_$Impl_$._new(145,229),postite_geom__$CoolPoint_Point_$Impl_$._new(146,226),postite_geom__$CoolPoint_Point_$Impl_$._new(148,217),postite_geom__$CoolPoint_Point_$Impl_$._new(149,208),postite_geom__$CoolPoint_Point_$Impl_$._new(149,205),postite_geom__$CoolPoint_Point_$Impl_$._new(151,196),postite_geom__$CoolPoint_Point_$Impl_$._new(151,193),postite_geom__$CoolPoint_Point_$Impl_$._new(153,182),postite_geom__$CoolPoint_Point_$Impl_$._new(155,172),postite_geom__$CoolPoint_Point_$Impl_$._new(157,165),postite_geom__$CoolPoint_Point_$Impl_$._new(159,160),postite_geom__$CoolPoint_Point_$Impl_$._new(162,155),postite_geom__$CoolPoint_Point_$Impl_$._new(164,150),postite_geom__$CoolPoint_Point_$Impl_$._new(165,148),postite_geom__$CoolPoint_Point_$Impl_$._new(166,146)];
		if(__map_reserved["v"] != null) {
			_g.setReserved("v",value9);
		} else {
			_g.h["v"] = value9;
		}
	}
	{
		var value10 = [postite_geom__$CoolPoint_Point_$Impl_$._new(123,129),postite_geom__$CoolPoint_Point_$Impl_$._new(123,131),postite_geom__$CoolPoint_Point_$Impl_$._new(124,133),postite_geom__$CoolPoint_Point_$Impl_$._new(125,136),postite_geom__$CoolPoint_Point_$Impl_$._new(127,140),postite_geom__$CoolPoint_Point_$Impl_$._new(129,142),postite_geom__$CoolPoint_Point_$Impl_$._new(133,148),postite_geom__$CoolPoint_Point_$Impl_$._new(137,154),postite_geom__$CoolPoint_Point_$Impl_$._new(143,158),postite_geom__$CoolPoint_Point_$Impl_$._new(145,161),postite_geom__$CoolPoint_Point_$Impl_$._new(148,164),postite_geom__$CoolPoint_Point_$Impl_$._new(153,170),postite_geom__$CoolPoint_Point_$Impl_$._new(158,176),postite_geom__$CoolPoint_Point_$Impl_$._new(160,178),postite_geom__$CoolPoint_Point_$Impl_$._new(164,183),postite_geom__$CoolPoint_Point_$Impl_$._new(168,188),postite_geom__$CoolPoint_Point_$Impl_$._new(171,191),postite_geom__$CoolPoint_Point_$Impl_$._new(175,196),postite_geom__$CoolPoint_Point_$Impl_$._new(178,200),postite_geom__$CoolPoint_Point_$Impl_$._new(180,202),postite_geom__$CoolPoint_Point_$Impl_$._new(181,205),postite_geom__$CoolPoint_Point_$Impl_$._new(184,208),postite_geom__$CoolPoint_Point_$Impl_$._new(186,210),postite_geom__$CoolPoint_Point_$Impl_$._new(187,213),postite_geom__$CoolPoint_Point_$Impl_$._new(188,215),postite_geom__$CoolPoint_Point_$Impl_$._new(186,212),postite_geom__$CoolPoint_Point_$Impl_$._new(183,211),postite_geom__$CoolPoint_Point_$Impl_$._new(177,208),postite_geom__$CoolPoint_Point_$Impl_$._new(169,206),postite_geom__$CoolPoint_Point_$Impl_$._new(162,205),postite_geom__$CoolPoint_Point_$Impl_$._new(154,207),postite_geom__$CoolPoint_Point_$Impl_$._new(145,209),postite_geom__$CoolPoint_Point_$Impl_$._new(137,210),postite_geom__$CoolPoint_Point_$Impl_$._new(129,214),postite_geom__$CoolPoint_Point_$Impl_$._new(122,217),postite_geom__$CoolPoint_Point_$Impl_$._new(118,218),postite_geom__$CoolPoint_Point_$Impl_$._new(111,221),postite_geom__$CoolPoint_Point_$Impl_$._new(109,222),postite_geom__$CoolPoint_Point_$Impl_$._new(110,219),postite_geom__$CoolPoint_Point_$Impl_$._new(112,217),postite_geom__$CoolPoint_Point_$Impl_$._new(118,209),postite_geom__$CoolPoint_Point_$Impl_$._new(120,207),postite_geom__$CoolPoint_Point_$Impl_$._new(128,196),postite_geom__$CoolPoint_Point_$Impl_$._new(135,187),postite_geom__$CoolPoint_Point_$Impl_$._new(138,183),postite_geom__$CoolPoint_Point_$Impl_$._new(148,167),postite_geom__$CoolPoint_Point_$Impl_$._new(157,153),postite_geom__$CoolPoint_Point_$Impl_$._new(163,145),postite_geom__$CoolPoint_Point_$Impl_$._new(165,142),postite_geom__$CoolPoint_Point_$Impl_$._new(172,133),postite_geom__$CoolPoint_Point_$Impl_$._new(177,127),postite_geom__$CoolPoint_Point_$Impl_$._new(179,127),postite_geom__$CoolPoint_Point_$Impl_$._new(180,125)];
		if(__map_reserved["delete"] != null) {
			_g.setReserved("delete",value10);
		} else {
			_g.h["delete"] = value10;
		}
	}
	{
		var value11 = [postite_geom__$CoolPoint_Point_$Impl_$._new(117,132),postite_geom__$CoolPoint_Point_$Impl_$._new(115,132),postite_geom__$CoolPoint_Point_$Impl_$._new(115,129),postite_geom__$CoolPoint_Point_$Impl_$._new(117,129),postite_geom__$CoolPoint_Point_$Impl_$._new(119,128),postite_geom__$CoolPoint_Point_$Impl_$._new(122,127),postite_geom__$CoolPoint_Point_$Impl_$._new(125,127),postite_geom__$CoolPoint_Point_$Impl_$._new(127,127),postite_geom__$CoolPoint_Point_$Impl_$._new(130,127),postite_geom__$CoolPoint_Point_$Impl_$._new(133,129),postite_geom__$CoolPoint_Point_$Impl_$._new(136,129),postite_geom__$CoolPoint_Point_$Impl_$._new(138,130),postite_geom__$CoolPoint_Point_$Impl_$._new(140,131),postite_geom__$CoolPoint_Point_$Impl_$._new(143,134),postite_geom__$CoolPoint_Point_$Impl_$._new(144,136),postite_geom__$CoolPoint_Point_$Impl_$._new(145,139),postite_geom__$CoolPoint_Point_$Impl_$._new(145,142),postite_geom__$CoolPoint_Point_$Impl_$._new(145,145),postite_geom__$CoolPoint_Point_$Impl_$._new(145,147),postite_geom__$CoolPoint_Point_$Impl_$._new(145,149),postite_geom__$CoolPoint_Point_$Impl_$._new(144,152),postite_geom__$CoolPoint_Point_$Impl_$._new(142,157),postite_geom__$CoolPoint_Point_$Impl_$._new(141,160),postite_geom__$CoolPoint_Point_$Impl_$._new(139,163),postite_geom__$CoolPoint_Point_$Impl_$._new(137,166),postite_geom__$CoolPoint_Point_$Impl_$._new(135,167),postite_geom__$CoolPoint_Point_$Impl_$._new(133,169),postite_geom__$CoolPoint_Point_$Impl_$._new(131,172),postite_geom__$CoolPoint_Point_$Impl_$._new(128,173),postite_geom__$CoolPoint_Point_$Impl_$._new(126,176),postite_geom__$CoolPoint_Point_$Impl_$._new(125,178),postite_geom__$CoolPoint_Point_$Impl_$._new(125,180),postite_geom__$CoolPoint_Point_$Impl_$._new(125,182),postite_geom__$CoolPoint_Point_$Impl_$._new(126,184),postite_geom__$CoolPoint_Point_$Impl_$._new(128,187),postite_geom__$CoolPoint_Point_$Impl_$._new(130,187),postite_geom__$CoolPoint_Point_$Impl_$._new(132,188),postite_geom__$CoolPoint_Point_$Impl_$._new(135,189),postite_geom__$CoolPoint_Point_$Impl_$._new(140,189),postite_geom__$CoolPoint_Point_$Impl_$._new(145,189),postite_geom__$CoolPoint_Point_$Impl_$._new(150,187),postite_geom__$CoolPoint_Point_$Impl_$._new(155,186),postite_geom__$CoolPoint_Point_$Impl_$._new(157,185),postite_geom__$CoolPoint_Point_$Impl_$._new(159,184),postite_geom__$CoolPoint_Point_$Impl_$._new(156,185),postite_geom__$CoolPoint_Point_$Impl_$._new(154,185),postite_geom__$CoolPoint_Point_$Impl_$._new(149,185),postite_geom__$CoolPoint_Point_$Impl_$._new(145,187),postite_geom__$CoolPoint_Point_$Impl_$._new(141,188),postite_geom__$CoolPoint_Point_$Impl_$._new(136,191),postite_geom__$CoolPoint_Point_$Impl_$._new(134,191),postite_geom__$CoolPoint_Point_$Impl_$._new(131,192),postite_geom__$CoolPoint_Point_$Impl_$._new(129,193),postite_geom__$CoolPoint_Point_$Impl_$._new(129,195),postite_geom__$CoolPoint_Point_$Impl_$._new(129,197),postite_geom__$CoolPoint_Point_$Impl_$._new(131,200),postite_geom__$CoolPoint_Point_$Impl_$._new(133,202),postite_geom__$CoolPoint_Point_$Impl_$._new(136,206),postite_geom__$CoolPoint_Point_$Impl_$._new(139,211),postite_geom__$CoolPoint_Point_$Impl_$._new(142,215),postite_geom__$CoolPoint_Point_$Impl_$._new(145,220),postite_geom__$CoolPoint_Point_$Impl_$._new(147,225),postite_geom__$CoolPoint_Point_$Impl_$._new(148,231),postite_geom__$CoolPoint_Point_$Impl_$._new(147,239),postite_geom__$CoolPoint_Point_$Impl_$._new(144,244),postite_geom__$CoolPoint_Point_$Impl_$._new(139,248),postite_geom__$CoolPoint_Point_$Impl_$._new(134,250),postite_geom__$CoolPoint_Point_$Impl_$._new(126,253),postite_geom__$CoolPoint_Point_$Impl_$._new(119,253),postite_geom__$CoolPoint_Point_$Impl_$._new(115,253)];
		if(__map_reserved["right curly brace"] != null) {
			_g.setReserved("right curly brace",value11);
		} else {
			_g.h["right curly brace"] = value11;
		}
	}
	{
		var value12 = [postite_geom__$CoolPoint_Point_$Impl_$._new(75,250),postite_geom__$CoolPoint_Point_$Impl_$._new(75,247),postite_geom__$CoolPoint_Point_$Impl_$._new(77,244),postite_geom__$CoolPoint_Point_$Impl_$._new(78,242),postite_geom__$CoolPoint_Point_$Impl_$._new(79,239),postite_geom__$CoolPoint_Point_$Impl_$._new(80,237),postite_geom__$CoolPoint_Point_$Impl_$._new(82,234),postite_geom__$CoolPoint_Point_$Impl_$._new(82,232),postite_geom__$CoolPoint_Point_$Impl_$._new(84,229),postite_geom__$CoolPoint_Point_$Impl_$._new(85,225),postite_geom__$CoolPoint_Point_$Impl_$._new(87,222),postite_geom__$CoolPoint_Point_$Impl_$._new(88,219),postite_geom__$CoolPoint_Point_$Impl_$._new(89,216),postite_geom__$CoolPoint_Point_$Impl_$._new(91,212),postite_geom__$CoolPoint_Point_$Impl_$._new(92,208),postite_geom__$CoolPoint_Point_$Impl_$._new(94,204),postite_geom__$CoolPoint_Point_$Impl_$._new(95,201),postite_geom__$CoolPoint_Point_$Impl_$._new(96,196),postite_geom__$CoolPoint_Point_$Impl_$._new(97,194),postite_geom__$CoolPoint_Point_$Impl_$._new(98,191),postite_geom__$CoolPoint_Point_$Impl_$._new(100,185),postite_geom__$CoolPoint_Point_$Impl_$._new(102,178),postite_geom__$CoolPoint_Point_$Impl_$._new(104,173),postite_geom__$CoolPoint_Point_$Impl_$._new(104,171),postite_geom__$CoolPoint_Point_$Impl_$._new(105,164),postite_geom__$CoolPoint_Point_$Impl_$._new(106,158),postite_geom__$CoolPoint_Point_$Impl_$._new(107,156),postite_geom__$CoolPoint_Point_$Impl_$._new(107,152),postite_geom__$CoolPoint_Point_$Impl_$._new(108,145),postite_geom__$CoolPoint_Point_$Impl_$._new(109,141),postite_geom__$CoolPoint_Point_$Impl_$._new(110,139),postite_geom__$CoolPoint_Point_$Impl_$._new(112,133),postite_geom__$CoolPoint_Point_$Impl_$._new(113,131),postite_geom__$CoolPoint_Point_$Impl_$._new(116,127),postite_geom__$CoolPoint_Point_$Impl_$._new(117,125),postite_geom__$CoolPoint_Point_$Impl_$._new(119,122),postite_geom__$CoolPoint_Point_$Impl_$._new(121,121),postite_geom__$CoolPoint_Point_$Impl_$._new(123,120),postite_geom__$CoolPoint_Point_$Impl_$._new(125,122),postite_geom__$CoolPoint_Point_$Impl_$._new(125,125),postite_geom__$CoolPoint_Point_$Impl_$._new(127,130),postite_geom__$CoolPoint_Point_$Impl_$._new(128,133),postite_geom__$CoolPoint_Point_$Impl_$._new(131,143),postite_geom__$CoolPoint_Point_$Impl_$._new(136,153),postite_geom__$CoolPoint_Point_$Impl_$._new(140,163),postite_geom__$CoolPoint_Point_$Impl_$._new(144,172),postite_geom__$CoolPoint_Point_$Impl_$._new(145,175),postite_geom__$CoolPoint_Point_$Impl_$._new(151,189),postite_geom__$CoolPoint_Point_$Impl_$._new(156,201),postite_geom__$CoolPoint_Point_$Impl_$._new(161,213),postite_geom__$CoolPoint_Point_$Impl_$._new(166,225),postite_geom__$CoolPoint_Point_$Impl_$._new(169,233),postite_geom__$CoolPoint_Point_$Impl_$._new(171,236),postite_geom__$CoolPoint_Point_$Impl_$._new(174,243),postite_geom__$CoolPoint_Point_$Impl_$._new(177,247),postite_geom__$CoolPoint_Point_$Impl_$._new(178,249),postite_geom__$CoolPoint_Point_$Impl_$._new(179,251),postite_geom__$CoolPoint_Point_$Impl_$._new(180,253),postite_geom__$CoolPoint_Point_$Impl_$._new(180,255),postite_geom__$CoolPoint_Point_$Impl_$._new(179,257),postite_geom__$CoolPoint_Point_$Impl_$._new(177,257),postite_geom__$CoolPoint_Point_$Impl_$._new(174,255),postite_geom__$CoolPoint_Point_$Impl_$._new(169,250),postite_geom__$CoolPoint_Point_$Impl_$._new(164,247),postite_geom__$CoolPoint_Point_$Impl_$._new(160,245),postite_geom__$CoolPoint_Point_$Impl_$._new(149,238),postite_geom__$CoolPoint_Point_$Impl_$._new(138,230),postite_geom__$CoolPoint_Point_$Impl_$._new(127,221),postite_geom__$CoolPoint_Point_$Impl_$._new(124,220),postite_geom__$CoolPoint_Point_$Impl_$._new(112,212),postite_geom__$CoolPoint_Point_$Impl_$._new(110,210),postite_geom__$CoolPoint_Point_$Impl_$._new(96,201),postite_geom__$CoolPoint_Point_$Impl_$._new(84,195),postite_geom__$CoolPoint_Point_$Impl_$._new(74,190),postite_geom__$CoolPoint_Point_$Impl_$._new(64,182),postite_geom__$CoolPoint_Point_$Impl_$._new(55,175),postite_geom__$CoolPoint_Point_$Impl_$._new(51,172),postite_geom__$CoolPoint_Point_$Impl_$._new(49,170),postite_geom__$CoolPoint_Point_$Impl_$._new(51,169),postite_geom__$CoolPoint_Point_$Impl_$._new(56,169),postite_geom__$CoolPoint_Point_$Impl_$._new(66,169),postite_geom__$CoolPoint_Point_$Impl_$._new(78,168),postite_geom__$CoolPoint_Point_$Impl_$._new(92,166),postite_geom__$CoolPoint_Point_$Impl_$._new(107,164),postite_geom__$CoolPoint_Point_$Impl_$._new(123,161),postite_geom__$CoolPoint_Point_$Impl_$._new(140,162),postite_geom__$CoolPoint_Point_$Impl_$._new(156,162),postite_geom__$CoolPoint_Point_$Impl_$._new(171,160),postite_geom__$CoolPoint_Point_$Impl_$._new(173,160),postite_geom__$CoolPoint_Point_$Impl_$._new(186,160),postite_geom__$CoolPoint_Point_$Impl_$._new(195,160),postite_geom__$CoolPoint_Point_$Impl_$._new(198,161),postite_geom__$CoolPoint_Point_$Impl_$._new(203,163),postite_geom__$CoolPoint_Point_$Impl_$._new(208,163),postite_geom__$CoolPoint_Point_$Impl_$._new(206,164),postite_geom__$CoolPoint_Point_$Impl_$._new(200,167),postite_geom__$CoolPoint_Point_$Impl_$._new(187,172),postite_geom__$CoolPoint_Point_$Impl_$._new(174,179),postite_geom__$CoolPoint_Point_$Impl_$._new(172,181),postite_geom__$CoolPoint_Point_$Impl_$._new(153,192),postite_geom__$CoolPoint_Point_$Impl_$._new(137,201),postite_geom__$CoolPoint_Point_$Impl_$._new(123,211),postite_geom__$CoolPoint_Point_$Impl_$._new(112,220),postite_geom__$CoolPoint_Point_$Impl_$._new(99,229),postite_geom__$CoolPoint_Point_$Impl_$._new(90,237),postite_geom__$CoolPoint_Point_$Impl_$._new(80,244),postite_geom__$CoolPoint_Point_$Impl_$._new(73,250),postite_geom__$CoolPoint_Point_$Impl_$._new(69,254),postite_geom__$CoolPoint_Point_$Impl_$._new(69,252)];
		if(__map_reserved["star"] != null) {
			_g.setReserved("star",value12);
		} else {
			_g.h["star"] = value12;
		}
	}
	{
		var value13 = [postite_geom__$CoolPoint_Point_$Impl_$._new(81,219),postite_geom__$CoolPoint_Point_$Impl_$._new(84,218),postite_geom__$CoolPoint_Point_$Impl_$._new(86,220),postite_geom__$CoolPoint_Point_$Impl_$._new(88,220),postite_geom__$CoolPoint_Point_$Impl_$._new(90,220),postite_geom__$CoolPoint_Point_$Impl_$._new(92,219),postite_geom__$CoolPoint_Point_$Impl_$._new(95,220),postite_geom__$CoolPoint_Point_$Impl_$._new(97,219),postite_geom__$CoolPoint_Point_$Impl_$._new(99,220),postite_geom__$CoolPoint_Point_$Impl_$._new(102,218),postite_geom__$CoolPoint_Point_$Impl_$._new(105,217),postite_geom__$CoolPoint_Point_$Impl_$._new(107,216),postite_geom__$CoolPoint_Point_$Impl_$._new(110,216),postite_geom__$CoolPoint_Point_$Impl_$._new(113,214),postite_geom__$CoolPoint_Point_$Impl_$._new(116,212),postite_geom__$CoolPoint_Point_$Impl_$._new(118,210),postite_geom__$CoolPoint_Point_$Impl_$._new(121,208),postite_geom__$CoolPoint_Point_$Impl_$._new(124,205),postite_geom__$CoolPoint_Point_$Impl_$._new(126,202),postite_geom__$CoolPoint_Point_$Impl_$._new(129,199),postite_geom__$CoolPoint_Point_$Impl_$._new(132,196),postite_geom__$CoolPoint_Point_$Impl_$._new(136,191),postite_geom__$CoolPoint_Point_$Impl_$._new(139,187),postite_geom__$CoolPoint_Point_$Impl_$._new(142,182),postite_geom__$CoolPoint_Point_$Impl_$._new(144,179),postite_geom__$CoolPoint_Point_$Impl_$._new(146,174),postite_geom__$CoolPoint_Point_$Impl_$._new(148,170),postite_geom__$CoolPoint_Point_$Impl_$._new(149,168),postite_geom__$CoolPoint_Point_$Impl_$._new(151,162),postite_geom__$CoolPoint_Point_$Impl_$._new(152,160),postite_geom__$CoolPoint_Point_$Impl_$._new(152,157),postite_geom__$CoolPoint_Point_$Impl_$._new(152,155),postite_geom__$CoolPoint_Point_$Impl_$._new(152,151),postite_geom__$CoolPoint_Point_$Impl_$._new(152,149),postite_geom__$CoolPoint_Point_$Impl_$._new(152,146),postite_geom__$CoolPoint_Point_$Impl_$._new(149,142),postite_geom__$CoolPoint_Point_$Impl_$._new(148,139),postite_geom__$CoolPoint_Point_$Impl_$._new(145,137),postite_geom__$CoolPoint_Point_$Impl_$._new(141,135),postite_geom__$CoolPoint_Point_$Impl_$._new(139,135),postite_geom__$CoolPoint_Point_$Impl_$._new(134,136),postite_geom__$CoolPoint_Point_$Impl_$._new(130,140),postite_geom__$CoolPoint_Point_$Impl_$._new(128,142),postite_geom__$CoolPoint_Point_$Impl_$._new(126,145),postite_geom__$CoolPoint_Point_$Impl_$._new(122,150),postite_geom__$CoolPoint_Point_$Impl_$._new(119,158),postite_geom__$CoolPoint_Point_$Impl_$._new(117,163),postite_geom__$CoolPoint_Point_$Impl_$._new(115,170),postite_geom__$CoolPoint_Point_$Impl_$._new(114,175),postite_geom__$CoolPoint_Point_$Impl_$._new(117,184),postite_geom__$CoolPoint_Point_$Impl_$._new(120,190),postite_geom__$CoolPoint_Point_$Impl_$._new(125,199),postite_geom__$CoolPoint_Point_$Impl_$._new(129,203),postite_geom__$CoolPoint_Point_$Impl_$._new(133,208),postite_geom__$CoolPoint_Point_$Impl_$._new(138,213),postite_geom__$CoolPoint_Point_$Impl_$._new(145,215),postite_geom__$CoolPoint_Point_$Impl_$._new(155,218),postite_geom__$CoolPoint_Point_$Impl_$._new(164,219),postite_geom__$CoolPoint_Point_$Impl_$._new(166,219),postite_geom__$CoolPoint_Point_$Impl_$._new(177,219),postite_geom__$CoolPoint_Point_$Impl_$._new(182,218),postite_geom__$CoolPoint_Point_$Impl_$._new(192,216),postite_geom__$CoolPoint_Point_$Impl_$._new(196,213),postite_geom__$CoolPoint_Point_$Impl_$._new(199,212),postite_geom__$CoolPoint_Point_$Impl_$._new(201,211)];
		if(__map_reserved["pigtail"] != null) {
			_g.setReserved("pigtail",value13);
		} else {
			_g.h["pigtail"] = value13;
		}
	}
	$r = _g;
	return $r;
}(this));
postite_geom_units__$Angle_Degree_$Impl_$.ofUnit = 0.00277777777777777788;
postite_geom_units__$Angle_Degree_$Impl_$.turn = 360.0;
postite_geom_units__$Angle_Degree_$Impl_$.dividerRadian = 0.159154943091895346;
postite_geom_units__$Angle_Degree_$Impl_$.symbol = "°";
postite_geom_units__$Angle_Radian_$Impl_$.ofUnit = 0.159154943091895346;
postite_geom_units__$Angle_Radian_$Impl_$.turn = 6.283185307179586;
postite_geom_units__$Angle_Radian_$Impl_$.dividerDegree = 0.00277777777777777788;
postite_geom_units__$Angle_Radian_$Impl_$.symbol = "rad";
postite_math_Matools.PI = 3.14159265358979323;
postite_math_Matools.EPSILON = 1e-10;
postite_uz__$Debug_LogLevel_$Impl_$.Debug = 10;
postite_uz__$Debug_LogLevel_$Impl_$.Info = 20;
postite_uz__$Debug_LogLevel_$Impl_$.Warning = 30;
postite_uz__$Debug_LogLevel_$Impl_$.Error = 40;
postite_uz__$Debug_LogLevel_$Impl_$.Critical = 50;
postite_uz__$Debug_LogLevel_$Impl_$.longest = 10;
tests_TestGesteStatics.p1 = postite_geom__$CoolPoint_Point_$Impl_$.fromAnonInt({ x : 100, y : 200});
tests_TestGesteStatics.p2 = postite_geom__$CoolPoint_Point_$Impl_$.fromAnonInt({ x : 300, y : 400});
tests_TestGesteStatics.seg = [tests_TestGesteStatics.p1,tests_TestGesteStatics.p2];
tests_TestGesteStatics.rec = [{ x : 0, y : 0},{ x : 100, y : 0},{ x : 100, y : 100},{ x : 0, y : 100},{ x : 0, y : 0}];
tests_TestResample.p1 = postite_geom__$CoolPoint_Point_$Impl_$.fromAnonInt({ x : 100, y : 200});
tests_TestResample.p2 = postite_geom__$CoolPoint_Point_$Impl_$.fromAnonInt({ x : 300, y : 400});
tests_TestResample.seg = [tests_TestResample.p1,tests_TestResample.p2];
tests_TestResample.dix = [1,2,3,4,5,6,7,8,9,10];
tests_TestResample.zig = [postite_geom__$CoolPoint_Point_$Impl_$._new(307,216),postite_geom__$CoolPoint_Point_$Impl_$._new(333,186),postite_geom__$CoolPoint_Point_$Impl_$._new(356,215),postite_geom__$CoolPoint_Point_$Impl_$._new(375,186),postite_geom__$CoolPoint_Point_$Impl_$._new(399,216),postite_geom__$CoolPoint_Point_$Impl_$._new(418,186)];
utest_TestHandler.POLLING_TIME = 10;
utest_AccessoryName.SETUP_NAME = "setup";
utest_AccessoryName.SETUP_CLASS_NAME = "setupClass";
utest_AccessoryName.TEARDOWN_NAME = "teardown";
utest_AccessoryName.TEARDOWN_CLASS_NAME = "teardownClass";
utest_ui_text_HtmlReport.platform = "javascript";
tests_TestAll.main();
})(typeof window != "undefined" ? window : typeof global != "undefined" ? global : typeof self != "undefined" ? self : this);

//# sourceMappingURL=test.js.map